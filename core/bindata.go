// Code generated by go-bindata.
// sources:
// data/bindata.go
// data/cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5a\x5d\x8f\xdb\xb6\xb6\x7d\xb6\x7e\x05\x6b\xa0\xbd\x76\xeb\x7a\x64\x7d\x58\x92\x2f\xe6\xa1\x4d\xda\x22\xc5\x6d\x7a\xd1\xf6\xe2\x3e\x84\x41\x40\x49\xd4\x0c\x1b\x59\xf4\x91\xe4\x09\x27\x03\xff\xf7\x83\xc5\x4d\xd9\xf2\x64\x66\x92\xe6\x14\x07\x38\x01\x9c\xb1\x24\x72\x73\x7f\xac\xb5\x36\x25\xf9\xe2\x82\x3d\xd3\xa5\x64\x57\xb2\x91\xad\xe8\x65\xc9\xf2\x5b\x76\xa5\xbf\xcd\x55\x53\x8a\x5e\x2c\xbd\x8b\x0b\xd6\xe9\x7d\x5b\xc8\x6e\x83\xef\xc3\xf9\x2b\x8d\xa3\x42\x17\x5a\x37\xcb\x3f\x75\xbe\xfc\xb3\xd3\x0d\x4e\x3d\xff\x95\xbd\xfc\xf5\x0f\xf6\xc3\xf3\x17\x7f\x7c\xe1\x79\x3b\x51\xbc\x15\x57\x92\x61\x8e\xe7\xa9\xed\x4e\xb7\x3d\x9b\x79\x93\x69\x7e\xdb\xcb\x6e\xea\x4d\xa6\x85\xde\xee\x5a\xd9\x75\x17\x57\xef\xd5\x0e\x27\xaa\x6d\x8f\x3f\x4a\xd3\xff\x17\x4a\xef\x7b\x55\xe3\x40\xdb\x09\x3b\xd1\x5f\x5f\x54\xaa\x96\xf8\x82\x13\x5d\xdf\xaa\xe6\xca\x5e\xeb\xd5\x56\x4e\xbd\xb9\xe7\x55\xfb\xa6\x18\x7c\xfd\x4d\x8a\x72\x86\x2f\xec\xd5\x6b\x2c\xbb\x60\x8d\xd8\x4a\x46\xd3\xe6\x6c\x36\x9c\x95\x6d\xab\xdb\x39\xbb\xf3\x26\x57\xef\xed\x11\xdb\x5c\x32\x78\xb5\x7c\x29\xdf\xc1\x88\x6c\x67\xd6\x6d\x1c\x7f\xbf\xaf\x2a\xd9\x5a\xb3\xf3\xb9\x37\x51\x95\x9d\xf0\xc5\x25\x6b\x54\x0d\x13\x93\x56\xf6\xfb\xb6\xc1\xe1\x82\x55\xdb\x7e\xf9\x03\xac\x57\xb3\x29\x0c\xb1\x2f\xff\xb1\x61\x5f\xde\x4c\xc9\x13\xbb\xd6\xdc\x9b\x1c\x3c\x6f\x72\x23\x5a\x96\xef\x2b\x46\xeb\xd0\x22\xde\xe4\x0d\xb9\x73\xc9\x94\x5e\x3e\xd3\xbb\xdb\xd9\x57\xf9\xbe\x5a\xb0\xab\xf7\x73\x6f\x52\xd4\x3f\x0c\x9e\x2e\x9f\xd5\xba\x93\xb3\xb9\xf7\x77\xf9\x03\x33\x64\xff\x11\x43\xb2\x6d\xc9\x6f\x77\x32\xdf\x57\xcb\xef\xe1\xfa\x6c\xbe\xc0\x08\xef\xe0\x79\xfd\xed\x4e\x32\xd1\x75\xb2\x47\xca\xf7\x45\x0f\x2b\x36\x3e\x57\x0f\x6f\xa2\x9a\x4a\x33\xa6\xbb\xe5\x8f\xaa\x96\x2f\x9a\x4a\x1f\xe7\xb9\x12\x0e\xe7\x47\x16\x6c\x0d\x19\x73\x65\xf4\x26\x9d\x7a\x6f\x8f\x55\xd3\xaf\x23\x6f\xb2\x05\xa8\xd9\xd1\xe8\x2f\xba\x94\xf6\xe4\x1f\x6a\x2b\x19\x60\xb2\xc4\x37\xac\x63\xa1\x32\xab\xd4\xfd\xb5\xe6\xec\xa5\xd8\xca\xd9\xdc\xad\x80\x35\x5d\x94\x95\x5a\x62\x75\xef\xf0\xc4\xdc\xdf\xd5\x7b\xcc\xb5\xde\x9c\x4f\x85\xa3\x4f\x4e\x85\xaf\xb3\xf9\xd8\xf3\x73\x03\x08\xed\x63\x06\x10\xdc\x6c\x7e\x0a\xf4\x03\x0b\x2e\xfa\xc7\x8d\xbc\xe8\x9e\xab\x76\x36\x67\xb9\xd6\xf5\x78\xb6\xa8\xbb\x8f\x44\x7e\xdb\x51\xe0\xb2\xad\x44\x21\xef\x0e\xa3\xd9\x0e\x12\x40\xf9\x1b\x37\xf1\x27\xcd\x2e\x1d\x10\x66\x53\x6e\x56\x15\x37\x69\xce\x8d\x9f\x72\xe3\xfb\xee\x93\x71\xb3\x96\xdc\xa4\xee\x5c\x55\x71\xe3\xaf\x4e\xd7\x71\x6c\xcf\xf9\x4f\x7d\xa6\xf7\x64\xe1\x27\xed\x90\xfa\x90\x02\x0c\x78\x1e\x29\x88\x37\x99\x9c\x7c\x5e\x78\x93\xc9\xf4\xa4\x85\xd3\x85\x37\x99\x1f\xc1\x74\x1c\x05\xdb\x5f\x5b\xe8\x8f\x6d\x5b\xec\x1f\x05\xe6\xbe\x37\x1f\xe3\xee\x91\x72\x96\x34\x27\x03\x43\x01\xee\x00\xcd\x0d\x3b\x73\x8e\x01\x73\x1b\xe6\x2f\x18\xb0\xb3\x19\x43\x6b\x16\x05\xfe\xdc\x9e\x07\x22\x36\x84\x98\xff\x6b\x94\x99\xad\xa2\x34\x4d\xc2\x38\x8c\xd3\x05\xf3\xe7\x07\x6f\x22\xb0\xda\x57\x36\x9c\x3b\x1b\xc3\x86\xb9\x50\xe0\xca\xc6\xfe\x7f\x38\xa6\x4e\x2c\xce\xaa\x4d\x9d\xe2\x67\x9d\xff\xdc\xe9\xe6\xb3\x2a\x9e\x16\xdc\xc4\x6b\x6e\xa2\x9c\x9b\xb4\xe2\x46\x84\xdc\x84\x29\x37\x2b\x9f\x9b\x5c\x72\x53\x25\xdc\x88\x8a\x9b\xdc\xe7\x46\x14\xdc\x84\x19\x37\x52\x72\x13\x44\xdc\x94\x25\x37\x61\x4e\x9f\x2c\xe1\x26\x4a\xb9\x49\x72\x6e\x84\xcf\x4d\x14\x72\x93\xaf\xb9\xc9\x62\x6e\xe2\x98\x9b\x15\xe6\xa4\xb4\x46\x11\x72\xb3\x16\xdc\xac\x62\x6e\x82\x15\x37\x45\xc2\x4d\x9e\x72\xb3\xce\xb8\x09\x72\x6e\x0a\xf8\xb3\xe6\x26\xc1\xfc\x15\x37\x19\xce\x17\xdc\xc8\x80\x9b\xbc\x22\x7f\xd6\x05\xad\x17\x26\xdc\xac\x7d\x6e\xb2\xc0\xad\x21\xb9\x49\x56\xdc\x08\x41\xfe\x27\x82\x9b\x2a\xe5\x46\x20\x17\x09\x37\x59\xc4\x8d\x5f\x51\x5e\xe4\x8a\xec\x95\xf0\x6f\xc5\x4d\x54\x71\x93\xf9\xdc\x84\x25\x37\x41\xc0\x4d\x1a\x91\x7d\xbb\x76\xcc\x4d\x24\xc8\x07\xe4\xb1\x08\xb8\x11\x19\x37\x31\x62\x4d\x68\x7c\xe5\x73\xb3\x46\xae\x62\x6e\x92\x82\xfc\x89\x05\x37\x71\x46\x9f\x42\x52\xec\xd6\x37\xc1\x4d\x21\x28\xf7\xc8\xe5\x3a\x74\xfe\x46\xdc\x24\x09\x37\x45\xc6\x4d\x56\x72\x53\xc2\x07\x9f\x9b\xa4\xe4\x46\xae\xc9\xff\xb8\xe4\xa6\x88\x29\x37\x38\x07\xbf\x92\x90\x72\x28\x5d\x9d\x2b\xc4\x2d\xb9\x29\x53\x6e\x0a\xd4\x3b\xa0\x5c\xe3\x6f\x9c\x52\xbd\x51\x83\x6a\x45\xf9\x8c\x22\x6e\x56\x29\x37\xe5\x9a\xc6\xa3\x7e\xfe\x90\x03\x17\x73\x84\x98\x50\x6f\xe4\x7e\x45\xf8\x09\x05\xd9\x8d\x02\xc2\x8d\x70\x79\xc4\xba\xf0\xdf\xe6\xba\x24\xdc\x21\x6e\x11\x91\xca\x44\x25\xf9\x6b\xed\xaf\xb9\x11\x92\x6a\x9a\x48\xaa\x05\xf2\x0b\xfc\xae\x90\x83\x15\x37\x41\xc6\x8d\x1f\x72\x93\xe5\x94\x47\xe0\x0d\x35\x07\x8e\x65\x4a\x63\xd2\x8c\x30\x84\xdc\x15\x11\xe1\x03\x63\x2c\xc6\x81\xd5\x90\xd6\x91\x50\xb6\x92\x9b\x74\xc5\xcd\x0a\xf9\x44\x5c\x6b\x6e\x42\xf8\x9d\x53\x6d\x92\x98\xd6\x09\x23\xca\x33\x6c\x03\x27\x76\x5e\x46\x79\x00\xce\x70\x2e\xc2\xba\x11\xe1\xa0\x00\x56\x90\xab\x98\x30\x17\x38\xcc\x66\x0e\xe7\x81\xcf\x4d\x1c\x72\x53\x94\x84\x7f\x5f\x90\xcf\xe0\x5d\x86\x3c\xc4\xc4\xa7\xd8\xf1\x06\x36\xcb\x84\xb0\x91\x49\xc2\x22\x72\xb6\x4e\x29\x27\xeb\x92\xea\x05\xae\xe4\x11\xe5\xd9\xc6\x0e\xec\x45\xb4\x1e\x30\x52\x45\xe4\xab\x9f\x8f\x72\x51\x72\x53\x65\xc4\x2f\xf8\x80\x6b\xc0\x12\x72\x02\x0e\x84\x2b\xe2\x38\xd6\xb7\xdc\x70\xb8\x06\x17\x10\x23\xb8\x8e\x0f\xd6\x45\x9e\x80\x8b\x20\xa4\x6b\x55\x4c\x3e\x54\x6b\xaa\x0f\xd6\x01\xa7\xc1\x3b\xe4\x23\x10\x84\x01\xf0\x22\x43\xfe\x13\xc2\xd0\x80\x5f\x8b\xd3\x92\xb0\x0f\x0c\x01\x6f\xc8\x07\x72\x14\xc6\xc4\x0b\xf0\x0b\xb5\x48\xb0\x5e\x48\xe3\x51\x73\xdf\xd5\x12\x5c\x09\xa5\xe3\x4a\x46\xb1\xa1\xd6\xb9\xe3\xf5\x1a\x35\x76\xfc\x05\xe6\x80\x57\x8b\x67\x49\x5c\x06\xc6\x92\x80\xf8\x1c\x4b\xb2\xbb\x86\x66\x14\xe4\xb3\x04\x16\x02\x6e\x92\x94\x6a\x86\x5c\xa1\xfe\xa8\xa5\xd5\x46\xc4\x0b\xbc\x25\x84\x5b\xf0\xad\x2c\x1c\x56\x23\x6e\xf2\x90\xea\x98\xaf\x88\xab\x22\x21\x6e\xa0\x7e\xc0\x0e\x74\x0d\x7a\x8b\xef\xf0\xa7\x58\x51\x9c\x19\x30\x93\x13\x57\x50\x5b\xf8\x00\xdc\x00\x1b\x79\xe6\xea\x24\x09\xeb\xa8\x0b\xec\xad\x1c\x2f\x80\x17\x59\x10\xbf\x11\x77\xec\x6a\x85\x9e\x80\x98\x0a\x97\x4b\xe8\x3f\xf8\x57\x86\x74\x1d\xba\x94\x97\x94\x07\xe4\x13\x5c\xc4\x35\x60\x21\x05\x96\x50\x67\xf8\xe4\x13\x97\xc0\x31\xe4\xd8\x72\x58\x50\x5e\x2d\xa6\x23\xc2\x2d\xe2\xc2\x31\x6a\x0d\xce\x41\x37\x31\x2f\xab\xc8\xa7\x21\xb7\x99\xc3\x3e\xb0\x9b\x4a\xd2\x8f\x61\x4c\x30\x8c\x89\xb9\x59\x27\xd4\x6f\x80\xf7\x2a\x20\xae\xa0\x06\x88\x05\xb9\x80\x0d\xab\xf9\x21\xf5\x21\xe8\x93\x8f\xdc\xe4\x94\x13\xf8\x00\x8e\x20\x7f\xc0\xa0\xd5\xff\x8c\xf2\x12\xac\x09\x3f\xd0\x7b\xe0\x16\x1c\x80\x5f\xc2\xe5\x13\x79\x41\xac\xc0\x96\xe5\x4d\x49\xeb\x81\x8b\xa8\x7f\x1c\x38\x4c\x38\x1d\x40\xae\x80\x37\xe4\x25\x85\x1e\x54\x84\xe7\xc8\xf5\x40\xe8\x33\xfa\x10\xb8\x04\x8c\x04\x4e\x73\xb0\x1e\xf4\x0c\x9f\x78\x45\xbd\x07\x36\x30\xce\xe2\x49\x9c\xea\x09\x2c\x40\xdb\xad\x46\xae\xa8\xfe\x56\x7f\x7d\xf2\x03\x5c\x80\xd6\x03\x7b\xc0\xbb\x8c\x88\xe7\xe8\x3d\xc0\x2b\xfc\x85\x96\xa3\x17\x23\x0e\x70\x0e\xf8\xc4\x5f\xf4\x09\xab\x15\xb1\xd3\xc2\x94\xf4\x10\xf6\xc1\x45\xdf\xe1\x12\xdc\xb3\x7d\x24\xa7\x1a\x95\x4e\xc3\x90\xf3\x20\x26\x4d\xc0\x07\xdc\xc7\x27\x75\x75\xc2\x3a\xb6\xa7\x56\xc4\x99\x81\x4f\xa8\x6b\xe5\x7a\x0b\xbe\x97\x19\xe9\x02\xf6\x23\xd0\x96\x52\xb8\x78\x9c\x9e\xa0\xbe\x12\x5c\x09\xa8\xb6\xc8\x01\xf0\x06\x4e\x80\x4f\xb1\xd3\x1c\xcb\x69\x9f\xea\x34\xec\x0b\xec\xfc\x35\xe9\x03\xe6\xa2\x4f\x43\xaf\x33\x97\x37\x31\xc4\xe5\xbb\x9e\x94\x91\x0e\x08\xc7\x21\xec\x73\x50\x23\xf4\x78\xd8\x83\xd6\xda\x7d\x15\xf8\xba\x76\x9a\x2f\xa8\xf7\x87\x4e\xf3\x82\x61\x6f\x10\x50\x1c\xc0\x3a\xf0\x06\xff\xd6\x6b\xea\xbf\xb6\xf7\xe7\xd4\xd3\xa0\xe1\x88\x0d\x18\x92\x6e\xef\x84\xbc\x82\x1f\xd0\xcc\xc4\xed\xf1\x60\x0f\x39\x02\x56\x03\xa7\xc1\x88\x3f\x1c\x62\xc8\xa8\x17\x46\x03\xf7\x24\x61\x64\xed\xf6\x6a\x58\xab\x70\xfa\xe6\x17\x54\x5f\x60\x02\x3a\x6a\xf7\x86\xc9\xa9\xff\x08\xa7\xed\xf0\x01\x3e\x43\xaf\xc1\x77\xec\x5f\xd0\x2f\x7d\xc7\x1d\xe8\x06\x70\x5a\xb8\x3b\x8c\xb5\xab\x3d\x30\x00\x7d\xca\x52\xda\xb7\xa1\x0f\x63\x0f\x05\xfe\x43\xf3\xec\x7a\x15\x71\x14\x7a\x53\x38\xbc\xa2\xf6\xc8\xab\xed\x4f\x6e\x3f\xb1\x0a\x48\xe3\x6d\x3f\x96\xa4\x03\xc8\x75\x9a\x50\xdf\x05\xbe\xc0\x0f\xf4\x6e\x68\x5f\xe9\xf6\x32\x76\xbf\x95\xba\xfd\x66\x4e\xb1\x49\xb7\x2f\x59\xbb\x3e\x80\xda\x58\x2e\xb8\xfd\xa3\xef\x70\x02\xbf\x0a\xb7\xff\x12\x88\xc1\xed\x8f\xd1\x4b\xc1\x31\xe4\x3f\x00\xee\x1c\x0f\xa1\x33\xe8\x31\xb0\x9d\x0a\xc2\x36\x6a\x18\xe7\xa4\x67\xd8\xff\x24\xae\xdf\xa0\xa6\xd0\x45\x60\xd3\x6a\x76\x49\x78\x41\x4f\x41\xbc\xd8\x07\x20\x3f\xd0\x58\xd4\x0d\x79\x48\x9c\x7d\xe8\x18\x7a\xa2\xdd\x63\xc6\x34\x0f\x3e\x41\x6b\x44\xe0\xf2\x93\x11\x67\x11\x6b\xec\x72\x0f\x8d\x07\x8f\x84\xdb\x3f\x82\x23\xd0\x5c\x9c\xc7\x1e\x32\x74\xf1\x43\x37\xb1\x37\xb2\xbd\x15\x9c\x0e\x29\x77\x18\x8b\x35\xa1\x89\x36\xff\x05\xf5\x59\xf4\x97\xe1\x6e\x13\xd8\x4a\xdc\xfe\x19\xb5\x84\x9e\xa0\x46\x76\xbf\xe9\xea\x6c\xb9\x9f\x50\x5f\x29\xdc\x5e\x09\xf3\x10\x63\xec\xfa\x3b\xf8\x85\x5c\xa0\x6f\xa2\x66\xa5\xeb\xf1\xe0\xae\xef\xd6\x2f\x5c\xff\xab\x9c\x66\x5a\xec\x39\xde\x20\x9f\xf9\x50\x9b\x80\x34\x19\xb8\x45\xbd\xe0\x37\xb4\x0a\x58\x02\x4e\xd0\x6f\xc1\x3d\x68\x08\xe2\x5c\x39\x0c\x0b\x97\x43\xc4\x3b\xf4\x03\xbb\xbe\xcb\xd3\x63\x77\xd9\xb9\x5b\x03\x36\x92\x8a\x38\x0f\x8c\xde\xbb\xcb\x3e\xbb\xe1\xfb\xeb\x77\xda\x67\xd3\xed\xdd\xf6\xbd\x67\x8d\xe7\xb7\xdc\x67\xc3\x3f\xe5\xb6\xfb\x21\xf7\xfe\xae\x5b\xef\x0f\x3c\x75\xf7\xdf\xc1\x3a\x4e\x3e\xeb\x16\x3c\x8c\xfe\xc5\x5b\xf0\x8b\x0b\xf6\x9d\x7d\x02\x57\x6b\x51\x76\x4c\x34\x25\xa3\x31\x1d\xeb\xaf\x87\xa7\x73\x95\x6e\xed\xd1\x95\xba\x91\x8d\x7d\x12\x68\x9f\xfe\xbe\xe8\x8f\x63\x45\x43\xf9\x64\xaa\x1a\xcd\x2b\xf4\xbe\x2e\x59\xa3\x7b\x96\x4b\x56\xe9\x7d\x53\x32\xdd\xd2\xd3\xe1\xd1\x05\xac\x2c\xcb\x25\x95\xcb\x3a\x33\xfb\xd8\x63\xd8\x42\x34\x8d\x6e\x54\x21\xea\x97\x18\xb9\xb9\x74\x83\xbb\xe5\x6f\x72\x57\x8b\x42\xce\xe8\x71\xe5\x94\xf3\xe9\x82\x4d\x2f\xa6\x0b\xf6\xed\x8a\xaa\x58\x2d\x98\x7e\x8b\x19\xc3\x23\x9b\x57\xe7\xc6\x5e\xff\x37\xae\xa3\xc0\xe2\x08\x89\x0a\x08\x78\x00\x02\x8f\x3e\x3a\xa5\x94\x7e\xd9\xb1\x42\x34\xff\x85\x2c\x09\xfb\xf4\xdc\x06\xf0\xc0\xf3\xd4\xc9\xe1\x84\x27\xb1\x74\x75\x43\x81\x26\x07\xef\xe3\x6b\x20\x8d\x36\xb9\xce\xea\xdc\xd5\xf5\x97\x7d\xd7\xd3\x20\xd5\xb1\x5a\xbd\x95\xae\xd2\xf9\xbe\x67\x3b\xd1\xa8\xa2\x63\xef\xae\x65\xe3\xce\xbe\xb3\x25\x19\x9c\x70\xe5\x1c\xca\xdc\xa9\xed\xae\x56\x95\x92\x1d\xeb\x44\x25\x99\x6a\x54\xaf\x44\xad\xde\x8b\x5e\xe9\x86\xe9\x8a\x5d\xd5\x3a\x17\x35\xbb\x11\xad\x12\x79\x2d\x3b\x57\xce\xa3\x0f\xe7\x25\xa5\x8a\x22\x87\xa7\x24\x9f\x86\x3d\x48\x37\xeb\xf1\x6c\x6a\x81\xb5\x71\x83\xa7\xec\x1b\x7a\x62\xff\x0d\x9b\xce\x37\x0c\x87\xb2\x6d\x29\x43\xb3\xf9\xfc\xec\x01\xb4\x18\xa3\xdd\x3e\x31\x7e\x0a\xf1\x96\xc7\xff\x6e\xd8\xc3\xab\x7b\xd0\x1f\x3d\xf9\xfe\x8f\xc3\xbf\x4d\xf2\x67\x72\x40\xd9\x80\x3f\x89\x02\xc3\x32\x8f\xd1\xc0\x0e\x42\x64\xdd\x59\x9d\x1b\x7b\x46\x8f\xea\xd6\x8d\x6b\x61\x27\xcc\x80\xd4\xd3\x43\x7e\x9a\xb2\xb9\x64\x5b\xf1\x56\xce\x86\x2b\x0b\xe6\x2f\x58\x2d\x9b\xd9\x90\x50\x00\x0f\xd0\x69\x5c\x69\x5a\xd1\x5c\xc9\x63\xba\x6d\xe2\xc8\xd2\x25\x13\xbb\x9d\x6c\x4a\x5b\xac\x6e\xf0\x7a\x1c\x30\xce\xbb\x30\x8e\xf3\x55\xc7\x04\xeb\x41\xb2\x05\xbb\xd6\x75\x09\xe7\xa4\x28\xae\x1d\xf8\xdc\xeb\x3a\xdd\x2e\xd8\x16\xe6\x4b\xd6\x6b\xa6\xfa\xce\xe1\x77\xfc\x80\x9d\x21\x92\xdd\x2b\x0a\xe3\x35\x62\xff\xb0\x3f\xde\x79\x67\x4f\xb3\x37\x6c\xfc\xa0\xfb\x83\x7e\xb6\x61\xf7\xba\xf3\xa8\x04\xcf\x55\x7b\x56\x80\x4a\xd5\x43\x15\x72\x59\xeb\x77\x4c\xb0\x42\xb6\xbd\x50\xf6\x65\x61\xa9\x5a\x59\xf4\xba\xbd\x65\x72\x9b\xcb\xb2\x94\x25\x53\xcd\x69\xde\x87\xaf\x22\x7f\xd4\x2d\x93\x46\x6c\x77\xb5\x04\x1b\x6f\xf5\x9e\xb5\xfb\x66\x34\x8a\xe9\xc6\xbe\x6c\xbc\x58\x2e\x97\x96\xf5\xf6\x64\xa1\x1b\x2c\x69\x5d\x82\x99\x4a\xd7\xb5\x7e\x87\x9c\x5e\x2b\xd9\x8a\xb6\xb8\xbe\xb5\x6f\x37\xf1\xcf\xce\x1e\x0e\x18\xab\xb4\x5e\xf6\xa6\x3f\x9d\x50\xdb\xab\xd1\x65\xc6\xc4\x72\xd7\x5c\x8d\x4f\xe4\xc3\x89\xfe\xa8\xbb\xcf\x55\x3b\x9b\xc2\xf0\x74\x7e\x2e\xc1\x03\xbc\xee\xa6\x6e\x1d\x10\x59\x6d\xaf\xa6\x87\x71\x46\x69\xee\x05\xce\x3f\x3a\xdf\xba\x81\xd9\x76\xf9\xfb\xf3\x07\xeb\x73\x9b\x93\xd3\xf9\x46\xf7\xd2\xa8\xae\xbf\x6f\x77\x90\xbc\x73\x2b\x18\xa5\xea\xfa\xc3\xc5\x6d\x68\x87\x31\xb3\x30\xfe\x7e\x7f\x1f\x98\x74\x52\xb8\x46\x97\x72\x50\xa9\xbe\x95\xd2\x6a\x17\x58\x66\x49\x02\x11\xf2\x2d\x93\x3e\x57\x09\x27\x3b\xd1\x5f\xff\x8f\xea\xfa\xf1\x94\xdf\x77\xb5\xea\x67\xe7\x26\xed\x24\x4c\x00\xa5\xdf\x2c\xd8\xee\x44\xe9\xa3\x09\xab\x85\xd6\xe3\x4b\x86\x3f\xcb\x67\xd7\xaa\x2e\x5b\xd9\xbc\xda\xbd\xc6\x25\x55\x31\xba\x3a\x92\xce\xcf\xe9\xeb\x13\x52\xc9\xc3\xf0\x06\xd6\xae\xf5\x23\x32\xfb\x09\xaf\x73\x9f\xb2\x0b\xc9\xb9\x79\x5c\xd9\xce\x62\x1a\xe4\xad\xc0\xf1\xcb\x33\x8d\x3b\x1b\x47\xce\xdc\x9c\x54\xae\xbd\x59\x9c\x26\x9d\xe9\x1c\xae\x8c\xdf\x09\xbb\x9a\x8f\xde\xe9\xda\x20\x2d\xe9\x1e\x54\x29\x6f\x72\x5c\x75\xa4\x68\x5f\x0f\xd8\x39\x1c\x65\xcf\x9a\xbd\x64\x5f\xb9\xaf\x77\x36\x4b\x0f\x4c\xf9\x40\xf6\x8e\x33\x4e\xfa\xf7\xe0\xbc\xc3\xe1\x61\x5d\x3c\xce\x3f\x17\xc8\x47\x6d\x1c\x48\x39\x7f\x93\x5d\xaf\x5b\x49\xb5\x6b\xe9\xc0\x6e\x3b\x48\xec\xf7\x4d\x29\xc7\x7b\x94\xa3\x6a\x12\xdf\xc6\xb3\x67\xa5\x6a\xef\xfd\xbe\x81\xb6\x2e\x77\xde\x04\x01\x7d\xea\x3e\xcc\x95\xcc\xdd\xf1\x4c\xd4\xb0\x33\x39\x4e\x3d\xee\x62\x3e\x65\x3a\xfd\x78\x41\x77\xcb\x5f\xde\x96\xaa\xfd\xae\xae\x67\x6f\xa0\xef\xff\x2b\xfa\x6b\x72\x78\xf8\x39\xc7\x72\x90\x8d\xf9\x7c\x71\x76\x8b\xe4\x27\x71\xfc\xe4\xef\x2c\xce\x97\xa2\xdf\x8c\x2c\xff\xbf\x55\xbd\x84\x8d\xfb\xeb\xd9\x25\x16\x8c\x32\x82\xe0\x96\xf4\xd2\xfd\x2f\x05\xf3\xec\x1a\x77\x6a\xdd\x23\xb6\x07\xab\xf4\x26\xfe\xfe\xf1\xa7\x2c\x74\xfe\xce\xfc\x1e\x4c\xba\xbf\x82\x13\xd6\xca\x62\xdf\x76\xea\x46\xd6\x0f\x60\xa6\x7b\x0a\x34\x85\x63\xdc\x79\xf5\x8f\x65\xf2\x26\x68\xca\xaa\x96\x4f\xc4\xf3\x30\x3e\x49\x1a\x2e\x2e\xd8\x73\xd5\x7a\x83\xec\xda\xd5\x4e\x4a\x53\x8c\x45\x86\xf2\xfe\x80\xe3\x47\xf0\xfc\xac\x55\xe3\x1a\x81\x9d\x39\x7f\x7a\x3f\x6b\xf3\xec\x64\xf6\x3c\xd7\x36\x45\x0f\x94\xf5\x98\x9e\xd3\x6e\xf1\x73\x3b\xd3\xf1\xc7\x18\x63\xdf\x9d\x84\x1e\xfb\x6a\xa9\xda\xc3\xe2\x13\xfa\xd6\x72\xb9\xb4\x1f\xf8\xfe\xcf\x00\x00\x00\xff\xff\x8a\xec\xe4\x08\xd1\x25\x00\x00")

func dataBindataGoBytes() ([]byte, error) {
	return bindataRead(
		_dataBindataGo,
		"data/bindata.go",
	)
}

func dataBindataGo() (*asset, error) {
	bytes, err := dataBindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bindata.go", size: 9681, mode: os.FileMode(420), modTime: time.Unix(1488735358, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataCocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4f\x8f\xa3\x36\x14\xbf\xcf\xa7\xb0\xac\x3d\x76\x93\x99\x56\x7b\x89\xd4\x03\x09\xe9\x88\x16\x12\x94\x90\x43\x55\x45\xc8\x31\x1e\xc6\x8a\xb1\x91\x6d\xb2\x9b\x22\xbe\x7b\x65\x43\x76\x00\x93\x4c\x73\x19\xcf\x7b\xbf\xf7\xc7\xbf\xf7\xc7\xd4\x4f\x00\xc0\x3f\xc5\x09\x2e\x80\x39\x02\x00\x77\x24\xa7\x82\xc3\x05\x80\x39\x13\x27\xc4\xe0\x2f\xad\x3c\xf0\x8d\xac\xae\x03\xbf\x69\x6e\xb2\x0d\x2a\x88\x2b\x4d\xae\xa5\x95\x2a\x22\x2f\x14\x93\x9b\x38\x96\x54\x48\xaa\xaf\x70\x01\xbe\x3d\x77\x32\x8f\x31\x4f\x6f\x39\x36\xf8\x37\xc4\x14\xe9\xe4\x3e\xd2\x08\x13\xae\x89\x54\x70\x01\xfe\xb1\x42\x00\x60\x86\x5f\xa0\x3d\x1f\x3b\xdc\x4a\x70\xa5\x25\xa2\x5c\xf7\x71\x75\xf7\x17\x00\x18\x26\x48\xe6\x44\x9b\x74\xbe\xd4\x48\x6b\x39\x3b\x13\xc9\x09\x9b\x71\x54\x90\x5b\xc6\xed\xbd\x3f\x90\x8c\xf2\xea\x47\x5f\xb7\x2d\x89\x44\x3c\x33\xba\xdf\x61\x27\x6e\x06\x89\x24\x48\x9d\x5f\xa5\xa8\xca\x3b\x79\x4c\x32\xd5\x5d\xa1\xe2\x26\x6a\x5d\xdb\x53\xd3\x0c\x74\xfd\xeb\xf1\x8a\xb1\x9e\xd2\x84\xec\x47\x1b\x46\x1c\x44\xd5\x48\x9d\xbf\x3a\xa1\x5b\xa6\x25\xbd\x10\x69\x40\x99\xc0\x67\x22\xc7\xfa\x95\xe0\x6f\x34\xff\xd9\x1e\x3d\x0d\x2d\x50\x7e\xbb\x93\x39\x3a\xbe\x01\x80\x6f\x42\x62\x92\x96\x15\x63\x70\x01\xb4\xac\x88\x83\xc0\xa2\x28\x3a\x6a\x4f\x48\xbd\xbb\x2e\x38\xd1\xdf\x85\x3c\xa7\x85\xc8\x6c\xb4\x77\xa1\xb4\x8b\x42\x32\xb7\x5c\xc0\x2f\xf5\x66\x1b\x79\x7e\x1a\xad\x13\x2f\xdd\xaf\x76\x41\x9c\xec\x53\x3f\xd8\x35\xf3\x81\xc6\x5f\xc7\xe1\xf6\xef\x0e\x90\x6e\xbc\x68\xdd\xc0\xa3\xe3\xb5\x94\xf4\x42\x19\xc9\x49\x76\x2f\xfd\x52\x48\x9d\x16\xa8\x34\xb1\x8f\x03\x65\x33\x22\x72\xcd\x2f\x53\x2c\xae\xb6\xab\xed\x76\x93\x4e\x4c\x97\x0b\x5a\x6d\xfd\x75\x7a\xd8\x85\x2d\x74\x25\xb0\x10\x7c\x25\x32\x72\xd8\x85\x9f\x59\x25\xde\xeb\xd8\x2a\x41\xf9\x67\x56\xa1\xb7\x71\xcc\x42\xc4\x1f\xd9\x2d\x0f\x41\xe8\xa7\xb1\xb7\xf3\xa2\x7d\xdf\x74\x59\x51\x96\xc5\x48\xa2\x42\x3d\xb0\xf6\x83\xfd\x5f\x69\x18\x44\x41\xd2\xda\xfa\x54\x9d\xa3\xa5\x63\x30\xe6\x76\xdf\x6e\x1a\xdb\x01\x0e\xc3\x77\x47\xaf\xd3\x27\xa8\x6b\x9d\x0e\xe0\xb6\x41\x2c\xa4\x0e\xd1\x89\x98\x26\x86\x58\x70\x4e\xb0\x16\x12\x02\x00\x86\x59\x8d\x2c\x61\x44\x34\x9a\xaa\xb9\xdb\x7c\xc6\xb1\xac\xf8\xd7\x9f\xce\x67\x53\xa3\xd0\x6b\x67\x63\x30\x67\x02\x23\x36\x57\x58\xd2\x52\x2b\xf8\x90\xa1\x50\xe4\xf7\x27\x39\x42\x3f\xfe\xa0\xcc\xd2\xf7\xf2\xec\x44\xed\xb4\x7b\xfa\x2f\x89\x96\x16\xf2\x30\x52\x42\x8a\x92\x21\xdd\x16\x63\xcc\x88\x27\x35\x7d\x43\x58\x4f\x56\x0a\x00\xf8\x4a\xb4\x26\x72\x2f\x2a\x89\xdb\x61\xd7\xba\x54\x8b\xf9\x5c\xa2\xef\xb3\x9c\xea\xf7\xea\x54\x29\x22\xb1\xe0\x9a\x70\x3d\xc3\xa2\x98\x73\x2c\x32\xa2\xe6\xd8\x36\xd9\xbc\x40\x4a\x13\x79\xa3\xe4\xf3\x91\x1f\x5f\xd6\xbe\x7f\x0c\x69\x7a\x21\x3e\x51\xfa\x53\x96\xc7\xf7\xdb\x11\x65\x73\x57\x93\xa3\x1e\x1f\xda\x3d\x1f\x1f\x9a\xc6\xa5\x99\x14\x42\x5e\x2d\xc3\x75\x7d\xfb\x67\x02\x17\x6c\x63\x33\x58\x6e\x9d\x36\xed\xa2\x1c\x3f\x09\xed\xcf\xe5\xda\x84\x5c\x52\x5b\x89\xba\xb6\x27\x37\x98\x45\xf9\x57\x8e\x0a\x8a\xcd\x10\x28\xb8\x70\x5d\x5b\xf7\x00\x76\x03\xd2\x9b\x8f\x66\x02\x7a\x74\x64\x63\xd4\xe3\x2d\xea\x53\x55\x22\x8d\xdf\x63\x74\x65\x02\x99\xb5\x5c\xf7\x1d\x7c\x9c\x8f\xfd\xa7\xfd\x4e\x55\xee\x57\xe4\xff\x54\x63\xb2\x12\x83\x2a\x7c\x5c\xa5\x19\x66\xa3\x91\xd4\xb1\x60\x14\x5f\xc7\x19\x05\xe6\x9b\xe7\x82\xcc\xa6\xf9\xed\xf9\xe3\x37\x08\xe1\x69\x4d\x8a\x52\xbb\xe3\x0a\x7d\xc2\x90\x71\xf9\xeb\xb7\x69\xcb\xa8\x7b\x43\x33\x8b\x9b\xcc\xee\xb6\xb3\x9a\xc9\xcf\x9c\x43\x99\x21\x4d\x7a\x49\xc3\xbd\x46\x79\x6e\x3f\x20\x5e\xdc\x74\xcd\xee\x30\x3b\x9f\x31\xbb\x3b\x5f\x9e\x6e\x1e\x9b\xa7\xe6\xbf\x00\x00\x00\xff\xff\xa9\x48\x3b\x87\x7a\x0a\x00\x00")

func dataCocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataCocoonJobJson,
		"data/cocoon.job.json",
	)
}

func dataCocoonJobJson() (*asset, error) {
	bytes, err := dataCocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/cocoon.job.json", size: 2682, mode: os.FileMode(420), modTime: time.Unix(1488898108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bindata.go": dataBindataGo,
	"data/cocoon.job.json": dataCocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bindata.go": &bintree{dataBindataGo, map[string]*bintree{}},
		"cocoon.job.json": &bintree{dataCocoonJobJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

