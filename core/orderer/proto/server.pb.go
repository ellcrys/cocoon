// Code generated by protoc-gen-go.
// source: server.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	CreateLedgerParams
	PutTransactionParams
	GetLedgerParams
	GetParams
	GetBlockParams
	GetRangeParams
	Ledger
	Transaction
	Transactions
	PutResult
	Block
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateLedgerParams struct {
	CocoonCodeId string `protobuf:"bytes,1,opt,name=cocoonCodeId" json:"cocoonCodeId,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Public       bool   `protobuf:"varint,3,opt,name=public" json:"public,omitempty"`
	Chained      bool   `protobuf:"varint,4,opt,name=chained" json:"chained,omitempty"`
}

func (m *CreateLedgerParams) Reset()                    { *m = CreateLedgerParams{} }
func (m *CreateLedgerParams) String() string            { return proto1.CompactTextString(m) }
func (*CreateLedgerParams) ProtoMessage()               {}
func (*CreateLedgerParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateLedgerParams) GetCocoonCodeId() string {
	if m != nil {
		return m.CocoonCodeId
	}
	return ""
}

func (m *CreateLedgerParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateLedgerParams) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *CreateLedgerParams) GetChained() bool {
	if m != nil {
		return m.Chained
	}
	return false
}

type PutTransactionParams struct {
	CocoonCodeId string         `protobuf:"bytes,1,opt,name=cocoonCodeId" json:"cocoonCodeId,omitempty"`
	LedgerName   string         `protobuf:"bytes,2,opt,name=ledgerName" json:"ledgerName,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,3,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *PutTransactionParams) Reset()                    { *m = PutTransactionParams{} }
func (m *PutTransactionParams) String() string            { return proto1.CompactTextString(m) }
func (*PutTransactionParams) ProtoMessage()               {}
func (*PutTransactionParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PutTransactionParams) GetCocoonCodeId() string {
	if m != nil {
		return m.CocoonCodeId
	}
	return ""
}

func (m *PutTransactionParams) GetLedgerName() string {
	if m != nil {
		return m.LedgerName
	}
	return ""
}

func (m *PutTransactionParams) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type GetLedgerParams struct {
	CocoonCodeId string `protobuf:"bytes,1,opt,name=cocoonCodeId" json:"cocoonCodeId,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *GetLedgerParams) Reset()                    { *m = GetLedgerParams{} }
func (m *GetLedgerParams) String() string            { return proto1.CompactTextString(m) }
func (*GetLedgerParams) ProtoMessage()               {}
func (*GetLedgerParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetLedgerParams) GetCocoonCodeId() string {
	if m != nil {
		return m.CocoonCodeId
	}
	return ""
}

func (m *GetLedgerParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetParams struct {
	CocoonCodeId string `protobuf:"bytes,1,opt,name=cocoonCodeId" json:"cocoonCodeId,omitempty"`
	Ledger       string `protobuf:"bytes,2,opt,name=ledger" json:"ledger,omitempty"`
	Id           string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Key          string `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
}

func (m *GetParams) Reset()                    { *m = GetParams{} }
func (m *GetParams) String() string            { return proto1.CompactTextString(m) }
func (*GetParams) ProtoMessage()               {}
func (*GetParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetParams) GetCocoonCodeId() string {
	if m != nil {
		return m.CocoonCodeId
	}
	return ""
}

func (m *GetParams) GetLedger() string {
	if m != nil {
		return m.Ledger
	}
	return ""
}

func (m *GetParams) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetParams) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetBlockParams struct {
	CocoonCodeId string `protobuf:"bytes,1,opt,name=cocoonCodeId" json:"cocoonCodeId,omitempty"`
	Ledger       string `protobuf:"bytes,2,opt,name=ledger" json:"ledger,omitempty"`
	Id           string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *GetBlockParams) Reset()                    { *m = GetBlockParams{} }
func (m *GetBlockParams) String() string            { return proto1.CompactTextString(m) }
func (*GetBlockParams) ProtoMessage()               {}
func (*GetBlockParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetBlockParams) GetCocoonCodeId() string {
	if m != nil {
		return m.CocoonCodeId
	}
	return ""
}

func (m *GetBlockParams) GetLedger() string {
	if m != nil {
		return m.Ledger
	}
	return ""
}

func (m *GetBlockParams) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetRangeParams struct {
	CocoonCodeId string `protobuf:"bytes,1,opt,name=cocoonCodeId" json:"cocoonCodeId,omitempty"`
	Ledger       string `protobuf:"bytes,2,opt,name=ledger" json:"ledger,omitempty"`
	StartKey     string `protobuf:"bytes,3,opt,name=startKey" json:"startKey,omitempty"`
	EndKey       string `protobuf:"bytes,4,opt,name=endKey" json:"endKey,omitempty"`
	Inclusive    bool   `protobuf:"varint,5,opt,name=inclusive" json:"inclusive,omitempty"`
	Limit        int32  `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
	Offset       int32  `protobuf:"varint,7,opt,name=offset" json:"offset,omitempty"`
}

func (m *GetRangeParams) Reset()                    { *m = GetRangeParams{} }
func (m *GetRangeParams) String() string            { return proto1.CompactTextString(m) }
func (*GetRangeParams) ProtoMessage()               {}
func (*GetRangeParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetRangeParams) GetCocoonCodeId() string {
	if m != nil {
		return m.CocoonCodeId
	}
	return ""
}

func (m *GetRangeParams) GetLedger() string {
	if m != nil {
		return m.Ledger
	}
	return ""
}

func (m *GetRangeParams) GetStartKey() string {
	if m != nil {
		return m.StartKey
	}
	return ""
}

func (m *GetRangeParams) GetEndKey() string {
	if m != nil {
		return m.EndKey
	}
	return ""
}

func (m *GetRangeParams) GetInclusive() bool {
	if m != nil {
		return m.Inclusive
	}
	return false
}

func (m *GetRangeParams) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetRangeParams) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type Ledger struct {
	Number    int64  `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Hash      string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Public    bool   `protobuf:"varint,4,opt,name=public" json:"public,omitempty"`
	Chained   bool   `protobuf:"varint,5,opt,name=chained" json:"chained,omitempty"`
	CreatedAt int64  `protobuf:"varint,6,opt,name=createdAt" json:"createdAt,omitempty"`
}

func (m *Ledger) Reset()                    { *m = Ledger{} }
func (m *Ledger) String() string            { return proto1.CompactTextString(m) }
func (*Ledger) ProtoMessage()               {}
func (*Ledger) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Ledger) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Ledger) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Ledger) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Ledger) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *Ledger) GetChained() bool {
	if m != nil {
		return m.Chained
	}
	return false
}

func (m *Ledger) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type Transaction struct {
	Number    int64  `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Ledger    string `protobuf:"bytes,2,opt,name=ledger" json:"ledger,omitempty"`
	Id        string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Key       string `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Value     string `protobuf:"bytes,5,opt,name=value" json:"value,omitempty"`
	Hash      string `protobuf:"bytes,6,opt,name=hash" json:"hash,omitempty"`
	CreatedAt int64  `protobuf:"varint,9,opt,name=createdAt" json:"createdAt,omitempty"`
	BlockId   string `protobuf:"bytes,10,opt,name=blockId" json:"blockId,omitempty"`
	Block     *Block `protobuf:"bytes,11,opt,name=block" json:"block,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto1.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Transaction) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Transaction) GetLedger() string {
	if m != nil {
		return m.Ledger
	}
	return ""
}

func (m *Transaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Transaction) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Transaction) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Transaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Transaction) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Transaction) GetBlockId() string {
	if m != nil {
		return m.BlockId
	}
	return ""
}

func (m *Transaction) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type Transactions struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *Transactions) Reset()                    { *m = Transactions{} }
func (m *Transactions) String() string            { return proto1.CompactTextString(m) }
func (*Transactions) ProtoMessage()               {}
func (*Transactions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Transactions) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type PutResult struct {
	Added int32  `protobuf:"varint,1,opt,name=added" json:"added,omitempty"`
	Block *Block `protobuf:"bytes,2,opt,name=block" json:"block,omitempty"`
}

func (m *PutResult) Reset()                    { *m = PutResult{} }
func (m *PutResult) String() string            { return proto1.CompactTextString(m) }
func (*PutResult) ProtoMessage()               {}
func (*PutResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PutResult) GetAdded() int32 {
	if m != nil {
		return m.Added
	}
	return 0
}

func (m *PutResult) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type Block struct {
	Id            string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Number        int64  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	ChainName     string `protobuf:"bytes,3,opt,name=chainName" json:"chainName,omitempty"`
	PrevBlockHash string `protobuf:"bytes,4,opt,name=prevBlockHash" json:"prevBlockHash,omitempty"`
	Hash          string `protobuf:"bytes,5,opt,name=hash" json:"hash,omitempty"`
	Transactions  []byte `protobuf:"bytes,6,opt,name=transactions,proto3" json:"transactions,omitempty"`
	CreatedAt     int64  `protobuf:"varint,7,opt,name=createdAt" json:"createdAt,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto1.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Block) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Block) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Block) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *Block) GetPrevBlockHash() string {
	if m != nil {
		return m.PrevBlockHash
	}
	return ""
}

func (m *Block) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Block) GetTransactions() []byte {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func init() {
	proto1.RegisterType((*CreateLedgerParams)(nil), "proto.CreateLedgerParams")
	proto1.RegisterType((*PutTransactionParams)(nil), "proto.PutTransactionParams")
	proto1.RegisterType((*GetLedgerParams)(nil), "proto.GetLedgerParams")
	proto1.RegisterType((*GetParams)(nil), "proto.GetParams")
	proto1.RegisterType((*GetBlockParams)(nil), "proto.GetBlockParams")
	proto1.RegisterType((*GetRangeParams)(nil), "proto.GetRangeParams")
	proto1.RegisterType((*Ledger)(nil), "proto.Ledger")
	proto1.RegisterType((*Transaction)(nil), "proto.Transaction")
	proto1.RegisterType((*Transactions)(nil), "proto.Transactions")
	proto1.RegisterType((*PutResult)(nil), "proto.PutResult")
	proto1.RegisterType((*Block)(nil), "proto.Block")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Orderer service

type OrdererClient interface {
	CreateLedger(ctx context.Context, in *CreateLedgerParams, opts ...grpc.CallOption) (*Ledger, error)
	GetLedger(ctx context.Context, in *GetLedgerParams, opts ...grpc.CallOption) (*Ledger, error)
	Put(ctx context.Context, in *PutTransactionParams, opts ...grpc.CallOption) (*PutResult, error)
	Get(ctx context.Context, in *GetParams, opts ...grpc.CallOption) (*Transaction, error)
	GetByID(ctx context.Context, in *GetParams, opts ...grpc.CallOption) (*Transaction, error)
	GetBlockByID(ctx context.Context, in *GetBlockParams, opts ...grpc.CallOption) (*Block, error)
	GetRange(ctx context.Context, in *GetRangeParams, opts ...grpc.CallOption) (*Transactions, error)
}

type ordererClient struct {
	cc *grpc.ClientConn
}

func NewOrdererClient(cc *grpc.ClientConn) OrdererClient {
	return &ordererClient{cc}
}

func (c *ordererClient) CreateLedger(ctx context.Context, in *CreateLedgerParams, opts ...grpc.CallOption) (*Ledger, error) {
	out := new(Ledger)
	err := grpc.Invoke(ctx, "/proto.Orderer/CreateLedger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererClient) GetLedger(ctx context.Context, in *GetLedgerParams, opts ...grpc.CallOption) (*Ledger, error) {
	out := new(Ledger)
	err := grpc.Invoke(ctx, "/proto.Orderer/GetLedger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererClient) Put(ctx context.Context, in *PutTransactionParams, opts ...grpc.CallOption) (*PutResult, error) {
	out := new(PutResult)
	err := grpc.Invoke(ctx, "/proto.Orderer/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererClient) Get(ctx context.Context, in *GetParams, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/proto.Orderer/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererClient) GetByID(ctx context.Context, in *GetParams, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/proto.Orderer/GetByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererClient) GetBlockByID(ctx context.Context, in *GetBlockParams, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := grpc.Invoke(ctx, "/proto.Orderer/GetBlockByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererClient) GetRange(ctx context.Context, in *GetRangeParams, opts ...grpc.CallOption) (*Transactions, error) {
	out := new(Transactions)
	err := grpc.Invoke(ctx, "/proto.Orderer/GetRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Orderer service

type OrdererServer interface {
	CreateLedger(context.Context, *CreateLedgerParams) (*Ledger, error)
	GetLedger(context.Context, *GetLedgerParams) (*Ledger, error)
	Put(context.Context, *PutTransactionParams) (*PutResult, error)
	Get(context.Context, *GetParams) (*Transaction, error)
	GetByID(context.Context, *GetParams) (*Transaction, error)
	GetBlockByID(context.Context, *GetBlockParams) (*Block, error)
	GetRange(context.Context, *GetRangeParams) (*Transactions, error)
}

func RegisterOrdererServer(s *grpc.Server, srv OrdererServer) {
	s.RegisterService(&_Orderer_serviceDesc, srv)
}

func _Orderer_CreateLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLedgerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServer).CreateLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Orderer/CreateLedger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServer).CreateLedger(ctx, req.(*CreateLedgerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderer_GetLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLedgerParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServer).GetLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Orderer/GetLedger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServer).GetLedger(ctx, req.(*GetLedgerParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderer_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTransactionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Orderer/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServer).Put(ctx, req.(*PutTransactionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Orderer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServer).Get(ctx, req.(*GetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderer_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Orderer/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServer).GetByID(ctx, req.(*GetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderer_GetBlockByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServer).GetBlockByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Orderer/GetBlockByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServer).GetBlockByID(ctx, req.(*GetBlockParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderer_GetRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRangeParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServer).GetRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Orderer/GetRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServer).GetRange(ctx, req.(*GetRangeParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Orderer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Orderer",
	HandlerType: (*OrdererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLedger",
			Handler:    _Orderer_CreateLedger_Handler,
		},
		{
			MethodName: "GetLedger",
			Handler:    _Orderer_GetLedger_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Orderer_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Orderer_Get_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _Orderer_GetByID_Handler,
		},
		{
			MethodName: "GetBlockByID",
			Handler:    _Orderer_GetBlockByID_Handler,
		},
		{
			MethodName: "GetRange",
			Handler:    _Orderer_GetRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto1.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0x96, 0xe3, 0x3a, 0xa9, 0x27, 0x6e, 0x7f, 0xd5, 0xfe, 0x4a, 0x65, 0x02, 0x42, 0xd1, 0x8a,
	0x43, 0x24, 0xa4, 0x22, 0xa5, 0xa8, 0xe2, 0x0a, 0x05, 0x42, 0x54, 0x54, 0xa2, 0x15, 0x47, 0x2e,
	0x1b, 0xef, 0xb4, 0xb5, 0xea, 0xd8, 0xd5, 0x7a, 0x1d, 0xa9, 0x17, 0x1e, 0x82, 0x13, 0xaf, 0x84,
	0xc4, 0x6b, 0xf0, 0x0e, 0x1c, 0xd1, 0xae, 0x37, 0xfe, 0x93, 0xb6, 0x52, 0x8b, 0x7a, 0xb2, 0x67,
	0x66, 0x67, 0x76, 0xe6, 0xfb, 0xbe, 0x1d, 0x08, 0x72, 0x94, 0x4b, 0x94, 0xfb, 0x97, 0x32, 0x53,
	0x19, 0xf1, 0xcc, 0x87, 0x7e, 0x03, 0x72, 0x24, 0x91, 0x2b, 0xfc, 0x84, 0xe2, 0x0c, 0xe5, 0x8c,
	0x4b, 0xbe, 0xc8, 0x09, 0x85, 0x20, 0xca, 0xa2, 0x2c, 0x4b, 0x8f, 0x32, 0x81, 0x53, 0x11, 0x3a,
	0x43, 0x67, 0xe4, 0xb3, 0x96, 0x8f, 0x10, 0xd8, 0x48, 0xf9, 0x02, 0xc3, 0x8e, 0x89, 0x99, 0x7f,
	0xb2, 0x07, 0xdd, 0xcb, 0x62, 0x9e, 0xc4, 0x51, 0xe8, 0x0e, 0x9d, 0xd1, 0x26, 0xb3, 0x16, 0x09,
	0xa1, 0x17, 0x9d, 0xf3, 0x38, 0x45, 0x11, 0x6e, 0x98, 0xc0, 0xca, 0xa4, 0xdf, 0x1d, 0xd8, 0x9d,
	0x15, 0xea, 0x8b, 0xe4, 0x69, 0xce, 0x23, 0x15, 0x67, 0xe9, 0x3d, 0x5a, 0x78, 0x06, 0x90, 0x98,
	0xb6, 0x4f, 0xea, 0x46, 0x1a, 0x1e, 0x72, 0x08, 0x81, 0xaa, 0x0b, 0xe7, 0xa1, 0x3b, 0x74, 0x47,
	0xfd, 0x31, 0x29, 0x11, 0xd8, 0x6f, 0xdc, 0xc9, 0x5a, 0xe7, 0xe8, 0x14, 0xfe, 0x9b, 0xa0, 0x7a,
	0x08, 0x44, 0x68, 0x0c, 0xfe, 0x04, 0xd5, 0x3d, 0x8a, 0xec, 0x41, 0xb7, 0x9c, 0xc0, 0x96, 0xb1,
	0x16, 0xd9, 0x86, 0x4e, 0x2c, 0x0c, 0xac, 0x3e, 0xeb, 0xc4, 0x82, 0xec, 0x80, 0x7b, 0x81, 0x57,
	0x06, 0x4e, 0x9f, 0xe9, 0x5f, 0xfa, 0x15, 0xb6, 0x27, 0xa8, 0xde, 0x26, 0x59, 0x74, 0xf1, 0xf0,
	0xf7, 0xd1, 0x5f, 0x8e, 0x29, 0xcf, 0x78, 0x7a, 0x86, 0x0f, 0x50, 0x7e, 0x00, 0x9b, 0xb9, 0xe2,
	0x52, 0x1d, 0xe3, 0x95, 0xbd, 0xa4, 0xb2, 0x75, 0x0e, 0xa6, 0xe2, 0xb8, 0x9a, 0xce, 0x5a, 0xe4,
	0x29, 0xf8, 0x71, 0x1a, 0x25, 0x45, 0x1e, 0x2f, 0x31, 0xf4, 0x8c, 0x8e, 0x6a, 0x07, 0xd9, 0x05,
	0x2f, 0x89, 0x17, 0xb1, 0x0a, 0xbb, 0x43, 0x67, 0xe4, 0xb1, 0xd2, 0xd0, 0xb5, 0xb2, 0xd3, 0xd3,
	0x1c, 0x55, 0xd8, 0x33, 0x6e, 0x6b, 0xd1, 0x1f, 0x0e, 0x74, 0x4b, 0x82, 0xf5, 0x91, 0xb4, 0x58,
	0xcc, 0x51, 0x9a, 0x01, 0x5c, 0x66, 0x2d, 0x4d, 0xe7, 0x39, 0xcf, 0xcf, 0x57, 0x74, 0xea, 0xff,
	0x8a, 0x62, 0xf7, 0x46, 0xd1, 0x6f, 0xdc, 0x26, 0x7a, 0xaf, 0x25, 0x7a, 0x3d, 0x48, 0x64, 0x1e,
	0x9d, 0x78, 0x53, 0xb6, 0xeb, 0xb2, 0xda, 0x41, 0x7f, 0x3b, 0xd0, 0x6f, 0x68, 0xf3, 0xd6, 0xfe,
	0xfe, 0x59, 0x29, 0x1a, 0xaa, 0x25, 0x4f, 0x8a, 0x12, 0x44, 0x9f, 0x95, 0x46, 0x35, 0x6f, 0xb7,
	0x31, 0x6f, 0xab, 0x53, 0x7f, 0xad, 0x53, 0x3d, 0xe1, 0x5c, 0xcb, 0x6d, 0x2a, 0x42, 0x30, 0x49,
	0x2b, 0x93, 0x50, 0xf0, 0xcc, 0x6f, 0xd8, 0x1f, 0x3a, 0xa3, 0xfe, 0x38, 0xb0, 0x4f, 0xce, 0x88,
	0x93, 0x95, 0x21, 0xfa, 0x01, 0x82, 0xc6, 0x98, 0xf9, 0xb5, 0xd7, 0xea, 0xdc, 0xf1, 0xb5, 0xbe,
	0x07, 0x7f, 0x56, 0x28, 0x86, 0x79, 0x91, 0x28, 0x3d, 0x1a, 0x17, 0x02, 0x4b, 0x31, 0x7a, 0xac,
	0x34, 0xea, 0x76, 0x3a, 0xb7, 0xb7, 0xf3, 0xd3, 0x01, 0xcf, 0x38, 0x2c, 0x80, 0x4e, 0x05, 0x60,
	0x4d, 0x40, 0xa7, 0x45, 0x80, 0x06, 0x47, 0x33, 0x7a, 0x52, 0x2b, 0xa2, 0x76, 0x90, 0xe7, 0xb0,
	0x75, 0x29, 0x71, 0x69, 0x4a, 0x7e, 0xd4, 0xb8, 0x96, 0x04, 0xb4, 0x9d, 0x15, 0xe8, 0x5e, 0x03,
	0x74, 0xba, 0x06, 0x84, 0x26, 0x24, 0x68, 0x0f, 0xdd, 0x26, 0xa6, 0xb7, 0x46, 0xcc, 0xf8, 0x4f,
	0x07, 0x7a, 0x9f, 0xa5, 0x40, 0x89, 0x92, 0xbc, 0x86, 0xa0, 0xb9, 0xe1, 0xc9, 0x63, 0x3b, 0xfc,
	0xf5, 0xb5, 0x3f, 0xd8, 0xb2, 0x21, 0x7b, 0x72, 0x6c, 0x76, 0xd7, 0xea, 0x95, 0xd8, 0xd8, 0xda,
	0x62, 0x5c, 0xcf, 0x79, 0x05, 0xee, 0xac, 0x50, 0xe4, 0x89, 0xf5, 0xde, 0xb4, 0xda, 0x07, 0x3b,
	0x75, 0xd0, 0xb2, 0xf6, 0x02, 0xdc, 0x09, 0x2a, 0xb2, 0x53, 0xdf, 0x61, 0x8f, 0xde, 0xc0, 0x3e,
	0x79, 0x09, 0x3d, 0xbd, 0xe7, 0xae, 0xa6, 0xef, 0xee, 0x98, 0x70, 0x00, 0xc1, 0x6a, 0x31, 0x9a,
	0xac, 0x47, 0x75, 0x56, 0x63, 0x5b, 0x0e, 0x5a, 0xaa, 0x20, 0x87, 0xb0, 0xb9, 0x5a, 0x77, 0xcd,
	0x84, 0xc6, 0xfe, 0x1b, 0xfc, 0x7f, 0xfd, 0xae, 0x7c, 0xde, 0x35, 0xbe, 0x83, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xc1, 0x94, 0x20, 0x3c, 0x6e, 0x07, 0x00, 0x00,
}
