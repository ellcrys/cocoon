// Code generated by protoc-gen-gogo.
// source: server.proto
// DO NOT EDIT!

/*
Package proto_api is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	DeleteSessionsRequest
	GetLogsRequest
	FirewallRule
	LoginRequest
	AddSignatoriesRequest
	RemoveSignatoriesRequest
	AddVoteRequest
	ContractRequest
	GetCocoonRequest
	GetIdentityRequest
	GetReleaseRequest
	DeployRequest
	CreateIdentityRequest
	StopCocoonRequest
	Response
*/
package proto_api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DeleteSessionsRequest struct {
	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
}

func (m *DeleteSessionsRequest) Reset()                    { *m = DeleteSessionsRequest{} }
func (m *DeleteSessionsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSessionsRequest) ProtoMessage()               {}
func (*DeleteSessionsRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{0} }

func (m *DeleteSessionsRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type GetLogsRequest struct {
	CocoonID string `protobuf:"bytes,1,opt,name=cocoonID,proto3" json:"cocoonID,omitempty"`
	NumLines int32  `protobuf:"varint,2,opt,name=numLines,proto3" json:"numLines,omitempty"`
	Source   string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *GetLogsRequest) Reset()                    { *m = GetLogsRequest{} }
func (m *GetLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLogsRequest) ProtoMessage()               {}
func (*GetLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{1} }

func (m *GetLogsRequest) GetCocoonID() string {
	if m != nil {
		return m.CocoonID
	}
	return ""
}

func (m *GetLogsRequest) GetNumLines() int32 {
	if m != nil {
		return m.NumLines
	}
	return 0
}

func (m *GetLogsRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type FirewallRule struct {
	Destination     string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	DestinationPort string `protobuf:"bytes,2,opt,name=destinationPort,proto3" json:"destinationPort,omitempty"`
	Protocol        string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *FirewallRule) Reset()                    { *m = FirewallRule{} }
func (m *FirewallRule) String() string            { return proto.CompactTextString(m) }
func (*FirewallRule) ProtoMessage()               {}
func (*FirewallRule) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{2} }

func (m *FirewallRule) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *FirewallRule) GetDestinationPort() string {
	if m != nil {
		return m.DestinationPort
	}
	return ""
}

func (m *FirewallRule) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type LoginRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{3} }

func (m *LoginRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AddSignatoriesRequest struct {
	CocoonID string   `protobuf:"bytes,1,opt,name=cocoonID,proto3" json:"cocoonID,omitempty"`
	IDs      []string `protobuf:"bytes,2,rep,name=IDs" json:"IDs,omitempty"`
}

func (m *AddSignatoriesRequest) Reset()                    { *m = AddSignatoriesRequest{} }
func (m *AddSignatoriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AddSignatoriesRequest) ProtoMessage()               {}
func (*AddSignatoriesRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{4} }

func (m *AddSignatoriesRequest) GetCocoonID() string {
	if m != nil {
		return m.CocoonID
	}
	return ""
}

func (m *AddSignatoriesRequest) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

type RemoveSignatoriesRequest struct {
	CocoonID string   `protobuf:"bytes,1,opt,name=cocoonID,proto3" json:"cocoonID,omitempty"`
	IDs      []string `protobuf:"bytes,2,rep,name=IDs" json:"IDs,omitempty"`
}

func (m *RemoveSignatoriesRequest) Reset()                    { *m = RemoveSignatoriesRequest{} }
func (m *RemoveSignatoriesRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveSignatoriesRequest) ProtoMessage()               {}
func (*RemoveSignatoriesRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{5} }

func (m *RemoveSignatoriesRequest) GetCocoonID() string {
	if m != nil {
		return m.CocoonID
	}
	return ""
}

func (m *RemoveSignatoriesRequest) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

type AddVoteRequest struct {
	ReleaseID string `protobuf:"bytes,1,opt,name=releaseID,proto3" json:"releaseID,omitempty"`
	Vote      int32  `protobuf:"varint,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (m *AddVoteRequest) Reset()                    { *m = AddVoteRequest{} }
func (m *AddVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*AddVoteRequest) ProtoMessage()               {}
func (*AddVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{6} }

func (m *AddVoteRequest) GetReleaseID() string {
	if m != nil {
		return m.ReleaseID
	}
	return ""
}

func (m *AddVoteRequest) GetVote() int32 {
	if m != nil {
		return m.Vote
	}
	return 0
}

type ContractRequest struct {
	CocoonID       string            `protobuf:"bytes,1,opt,name=cocoonID,proto3" json:"cocoonID,omitempty" structs:"cocoonID,omitempty" mapstructure:"cocoonID,omitempty"`
	URL            string            `protobuf:"bytes,2,opt,name=URL,proto3" json:"url,omitempty" structs:"url,omitempty" mapstructure:"url,omitempty"`
	Language       string            `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty" structs:"language,omitempty" mapstructure:"language,omitempty"`
	Version        string            `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty" structs:"version,omitempty" mapstructure:"version,omitempty"`
	BuildParam     string            `protobuf:"bytes,5,opt,name=buildParam,proto3" json:"buildParam,omitempty" structs:"buildParam,omitempty" mapstructure:"buildParam,omitempty"`
	Firewall       []*FirewallRule   `protobuf:"bytes,6,rep,name=firewall" json:"firewall,omitempty" structs:"firewall,omitempty" mapstructure:"firewall,omitempty"`
	ACL            []byte            `protobuf:"bytes,7,opt,name=ACL,proto3" json:"acl,omitempty" structs:"acl,omitempty" mapstructure:"acl,omitempty"`
	Memory         int32             `protobuf:"varint,8,opt,name=memory,proto3" json:"memory,omitempty" structs:"memory,omitempty" mapstructure:"memory,omitempty"`
	CPUShare       int32             `protobuf:"varint,9,opt,name=CPUShare,proto3" json:"CPUShare,omitempty" structs:"CPUShare,omitempty" mapstructure:"CPUShare,omitempty"`
	Link           string            `protobuf:"bytes,10,opt,name=link,proto3" json:"link,omitempty" structs:"link,omitempty" mapstructure:"link,omitempty"`
	NumSignatories int32             `protobuf:"varint,11,opt,name=numSignatories,proto3" json:"numSignatories,omitempty" structs:"numSignatories,omitempty" mapstructure:"numSignatories,omitempty"`
	SigThreshold   int32             `protobuf:"varint,12,opt,name=sigThreshold,proto3" json:"sigThreshold,omitempty" structs:"sigThreshold,omitempty" mapstructure:"sigThreshold,omitempty"`
	Env            map[string]string `protobuf:"bytes,13,rep,name=env" json:"env,omitempty" structs:"env,omitempty" mapstructure:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnableFirewall bool              `protobuf:"varint,14,opt,name=enableFirewall,proto3" json:"enableFirewall,omitempty" structs:"enableFirewall,omitempty" mapstructure:"enableFirewall,omitempty"`
}

func (m *ContractRequest) Reset()                    { *m = ContractRequest{} }
func (m *ContractRequest) String() string            { return proto.CompactTextString(m) }
func (*ContractRequest) ProtoMessage()               {}
func (*ContractRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{7} }

func (m *ContractRequest) GetCocoonID() string {
	if m != nil {
		return m.CocoonID
	}
	return ""
}

func (m *ContractRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *ContractRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *ContractRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ContractRequest) GetBuildParam() string {
	if m != nil {
		return m.BuildParam
	}
	return ""
}

func (m *ContractRequest) GetFirewall() []*FirewallRule {
	if m != nil {
		return m.Firewall
	}
	return nil
}

func (m *ContractRequest) GetACL() []byte {
	if m != nil {
		return m.ACL
	}
	return nil
}

func (m *ContractRequest) GetMemory() int32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ContractRequest) GetCPUShare() int32 {
	if m != nil {
		return m.CPUShare
	}
	return 0
}

func (m *ContractRequest) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *ContractRequest) GetNumSignatories() int32 {
	if m != nil {
		return m.NumSignatories
	}
	return 0
}

func (m *ContractRequest) GetSigThreshold() int32 {
	if m != nil {
		return m.SigThreshold
	}
	return 0
}

func (m *ContractRequest) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *ContractRequest) GetEnableFirewall() bool {
	if m != nil {
		return m.EnableFirewall
	}
	return false
}

type GetCocoonRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id" structs:"id,omitempty" mapstructure:"id,omitempty"`
}

func (m *GetCocoonRequest) Reset()                    { *m = GetCocoonRequest{} }
func (m *GetCocoonRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCocoonRequest) ProtoMessage()               {}
func (*GetCocoonRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{8} }

func (m *GetCocoonRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetIdentityRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	ID    string `protobuf:"bytes,2,opt,name=ID,proto3" json:"id" structs:"id,omitempty" mapstructure:"id,omitempty"`
}

func (m *GetIdentityRequest) Reset()                    { *m = GetIdentityRequest{} }
func (m *GetIdentityRequest) String() string            { return proto.CompactTextString(m) }
func (*GetIdentityRequest) ProtoMessage()               {}
func (*GetIdentityRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{9} }

func (m *GetIdentityRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GetIdentityRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetReleaseRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *GetReleaseRequest) Reset()                    { *m = GetReleaseRequest{} }
func (m *GetReleaseRequest) String() string            { return proto.CompactTextString(m) }
func (*GetReleaseRequest) ProtoMessage()               {}
func (*GetReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{10} }

func (m *GetReleaseRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type DeployRequest struct {
	CocoonID  string `protobuf:"bytes,1,opt,name=cocoonID,proto3" json:"cocoonID,omitempty"`
	ReleaseID string `protobuf:"bytes,2,opt,name=releaseID,proto3" json:"releaseID,omitempty"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{11} }

func (m *DeployRequest) GetCocoonID() string {
	if m != nil {
		return m.CocoonID
	}
	return ""
}

func (m *DeployRequest) GetReleaseID() string {
	if m != nil {
		return m.ReleaseID
	}
	return ""
}

type CreateIdentityRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *CreateIdentityRequest) Reset()                    { *m = CreateIdentityRequest{} }
func (m *CreateIdentityRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateIdentityRequest) ProtoMessage()               {}
func (*CreateIdentityRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{12} }

func (m *CreateIdentityRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateIdentityRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type StopCocoonRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"id" structs:"id,omitempty" mapstructure:"id,omitempty"`
}

func (m *StopCocoonRequest) Reset()                    { *m = StopCocoonRequest{} }
func (m *StopCocoonRequest) String() string            { return proto.CompactTextString(m) }
func (*StopCocoonRequest) ProtoMessage()               {}
func (*StopCocoonRequest) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{13} }

func (m *StopCocoonRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Response struct {
	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Body   []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorServer, []int{14} }

func (m *Response) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Response) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*DeleteSessionsRequest)(nil), "proto_api.DeleteSessionsRequest")
	proto.RegisterType((*GetLogsRequest)(nil), "proto_api.GetLogsRequest")
	proto.RegisterType((*FirewallRule)(nil), "proto_api.FirewallRule")
	proto.RegisterType((*LoginRequest)(nil), "proto_api.LoginRequest")
	proto.RegisterType((*AddSignatoriesRequest)(nil), "proto_api.AddSignatoriesRequest")
	proto.RegisterType((*RemoveSignatoriesRequest)(nil), "proto_api.RemoveSignatoriesRequest")
	proto.RegisterType((*AddVoteRequest)(nil), "proto_api.AddVoteRequest")
	proto.RegisterType((*ContractRequest)(nil), "proto_api.ContractRequest")
	proto.RegisterType((*GetCocoonRequest)(nil), "proto_api.GetCocoonRequest")
	proto.RegisterType((*GetIdentityRequest)(nil), "proto_api.GetIdentityRequest")
	proto.RegisterType((*GetReleaseRequest)(nil), "proto_api.GetReleaseRequest")
	proto.RegisterType((*DeployRequest)(nil), "proto_api.DeployRequest")
	proto.RegisterType((*CreateIdentityRequest)(nil), "proto_api.CreateIdentityRequest")
	proto.RegisterType((*StopCocoonRequest)(nil), "proto_api.StopCocoonRequest")
	proto.RegisterType((*Response)(nil), "proto_api.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error)
	CreateCocoon(ctx context.Context, in *ContractRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateCocoon(ctx context.Context, in *ContractRequest, opts ...grpc.CallOption) (*Response, error)
	GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*Response, error)
	CreateIdentity(ctx context.Context, in *CreateIdentityRequest, opts ...grpc.CallOption) (*Response, error)
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*Response, error)
	GetCocoon(ctx context.Context, in *GetCocoonRequest, opts ...grpc.CallOption) (*Response, error)
	GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*Response, error)
	StopCocoon(ctx context.Context, in *StopCocoonRequest, opts ...grpc.CallOption) (*Response, error)
	AddSignatories(ctx context.Context, in *AddSignatoriesRequest, opts ...grpc.CallOption) (*Response, error)
	AddVote(ctx context.Context, in *AddVoteRequest, opts ...grpc.CallOption) (*Response, error)
	RemoveSignatories(ctx context.Context, in *RemoveSignatoriesRequest, opts ...grpc.CallOption) (*Response, error)
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteSessions(ctx context.Context, in *DeleteSessionsRequest, opts ...grpc.CallOption) (*Response, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateCocoon(ctx context.Context, in *ContractRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/CreateCocoon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateCocoon(ctx context.Context, in *ContractRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/UpdateCocoon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/GetRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateIdentity(ctx context.Context, in *CreateIdentityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/CreateIdentity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetCocoon(ctx context.Context, in *GetCocoonRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/GetCocoon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/GetIdentity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StopCocoon(ctx context.Context, in *StopCocoonRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/StopCocoon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddSignatories(ctx context.Context, in *AddSignatoriesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/AddSignatories", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddVote(ctx context.Context, in *AddVoteRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/AddVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) RemoveSignatories(ctx context.Context, in *RemoveSignatoriesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/RemoveSignatories", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/GetLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteSessions(ctx context.Context, in *DeleteSessionsRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto_api.API/DeleteSessions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Login(context.Context, *LoginRequest) (*Response, error)
	CreateCocoon(context.Context, *ContractRequest) (*Response, error)
	UpdateCocoon(context.Context, *ContractRequest) (*Response, error)
	GetRelease(context.Context, *GetReleaseRequest) (*Response, error)
	CreateIdentity(context.Context, *CreateIdentityRequest) (*Response, error)
	Deploy(context.Context, *DeployRequest) (*Response, error)
	GetCocoon(context.Context, *GetCocoonRequest) (*Response, error)
	GetIdentity(context.Context, *GetIdentityRequest) (*Response, error)
	StopCocoon(context.Context, *StopCocoonRequest) (*Response, error)
	AddSignatories(context.Context, *AddSignatoriesRequest) (*Response, error)
	AddVote(context.Context, *AddVoteRequest) (*Response, error)
	RemoveSignatories(context.Context, *RemoveSignatoriesRequest) (*Response, error)
	GetLogs(context.Context, *GetLogsRequest) (*Response, error)
	DeleteSessions(context.Context, *DeleteSessionsRequest) (*Response, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateCocoon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateCocoon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/CreateCocoon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateCocoon(ctx, req.(*ContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateCocoon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateCocoon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/UpdateCocoon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateCocoon(ctx, req.(*ContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/GetRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetRelease(ctx, req.(*GetReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/CreateIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateIdentity(ctx, req.(*CreateIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetCocoon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCocoonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetCocoon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/GetCocoon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetCocoon(ctx, req.(*GetCocoonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/GetIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetIdentity(ctx, req.(*GetIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StopCocoon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCocoonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StopCocoon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/StopCocoon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StopCocoon(ctx, req.(*StopCocoonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddSignatories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSignatoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddSignatories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/AddSignatories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddSignatories(ctx, req.(*AddSignatoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/AddVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddVote(ctx, req.(*AddVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_RemoveSignatories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSignatoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RemoveSignatories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/RemoveSignatories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RemoveSignatories(ctx, req.(*RemoveSignatoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_api.API/DeleteSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteSessions(ctx, req.(*DeleteSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto_api.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _API_Login_Handler,
		},
		{
			MethodName: "CreateCocoon",
			Handler:    _API_CreateCocoon_Handler,
		},
		{
			MethodName: "UpdateCocoon",
			Handler:    _API_UpdateCocoon_Handler,
		},
		{
			MethodName: "GetRelease",
			Handler:    _API_GetRelease_Handler,
		},
		{
			MethodName: "CreateIdentity",
			Handler:    _API_CreateIdentity_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _API_Deploy_Handler,
		},
		{
			MethodName: "GetCocoon",
			Handler:    _API_GetCocoon_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _API_GetIdentity_Handler,
		},
		{
			MethodName: "StopCocoon",
			Handler:    _API_StopCocoon_Handler,
		},
		{
			MethodName: "AddSignatories",
			Handler:    _API_AddSignatories_Handler,
		},
		{
			MethodName: "AddVote",
			Handler:    _API_AddVote_Handler,
		},
		{
			MethodName: "RemoveSignatories",
			Handler:    _API_RemoveSignatories_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _API_GetLogs_Handler,
		},
		{
			MethodName: "DeleteSessions",
			Handler:    _API_DeleteSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptorServer) }

var fileDescriptorServer = []byte{
	// 1166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0x57, 0x92, 0x6b, 0x9b, 0x4c, 0xd3, 0x5c, 0xbb, 0x5c, 0x0f, 0x53, 0x0e, 0x25, 0x72, 0x5f,
	0x82, 0x04, 0x3d, 0xa9, 0x40, 0x81, 0xea, 0xe0, 0xe8, 0xbf, 0x2b, 0x41, 0x41, 0xaa, 0xb6, 0x14,
	0x21, 0x21, 0x41, 0x37, 0xf1, 0x5c, 0xea, 0x3b, 0xdb, 0x1b, 0xec, 0x75, 0x8e, 0xbc, 0x20, 0x1e,
	0x79, 0xe1, 0x85, 0x57, 0xbe, 0x9b, 0x3f, 0x40, 0xc4, 0xd3, 0x7d, 0x02, 0xe4, 0xf5, 0x9f, 0x78,
	0xfd, 0xa7, 0xaa, 0x74, 0xf0, 0x14, 0xcf, 0xfe, 0x66, 0xe7, 0x37, 0x33, 0x3b, 0x93, 0x9d, 0x85,
	0xb6, 0x87, 0xee, 0x0c, 0xdd, 0xbd, 0xa9, 0xcb, 0x05, 0x27, 0x2d, 0xf9, 0xf3, 0x33, 0x9b, 0x9a,
	0x3b, 0x1f, 0x4e, 0x4c, 0x71, 0xe3, 0x8f, 0xf6, 0xc6, 0xdc, 0x7e, 0x3c, 0xe1, 0x13, 0xfe, 0x58,
	0x42, 0x23, 0xff, 0xb9, 0x94, 0xa4, 0x20, 0xbf, 0xa2, 0x9d, 0xfa, 0xfb, 0xb0, 0x7d, 0x8a, 0x16,
	0x0a, 0xbc, 0x44, 0xcf, 0x33, 0xb9, 0xe3, 0x51, 0xfc, 0xc5, 0x47, 0x4f, 0x90, 0x4d, 0x68, 0x30,
	0xcb, 0xd2, 0x6a, 0xbd, 0x5a, 0xbf, 0x49, 0xc3, 0x4f, 0xfd, 0x1a, 0x3a, 0xe7, 0x28, 0x86, 0x7c,
	0x92, 0xea, 0xec, 0x40, 0x73, 0xcc, 0xc7, 0x9c, 0x3b, 0x83, 0x53, 0xa9, 0xd8, 0xa2, 0xa9, 0x1c,
	0x62, 0x8e, 0x6f, 0x0f, 0x4d, 0x07, 0x3d, 0xad, 0xde, 0xab, 0xf5, 0x57, 0x68, 0x2a, 0x93, 0x87,
	0xb0, 0xea, 0x71, 0xdf, 0x1d, 0xa3, 0xd6, 0x90, 0xbb, 0x62, 0x49, 0x9f, 0x41, 0xfb, 0x99, 0xe9,
	0xe2, 0x2b, 0x66, 0x59, 0xd4, 0xb7, 0x90, 0xf4, 0x60, 0xdd, 0x40, 0x4f, 0x98, 0x0e, 0x13, 0x26,
	0x77, 0x62, 0x8a, 0xec, 0x12, 0xe9, 0xc3, 0xfd, 0x8c, 0x78, 0xc1, 0x5d, 0x21, 0xc9, 0x5a, 0x34,
	0xbf, 0x1c, 0xfa, 0x23, 0x23, 0x1e, 0x73, 0x2b, 0x66, 0x4d, 0x65, 0xfd, 0x2b, 0x68, 0x0f, 0xf9,
	0xc4, 0x74, 0x92, 0xb8, 0x1e, 0xc0, 0x0a, 0xda, 0xcc, 0xb4, 0x62, 0xc6, 0x48, 0x90, 0x16, 0x98,
	0xe7, 0xbd, 0xe2, 0xae, 0x11, 0x93, 0xa4, 0xb2, 0x7e, 0x06, 0xdb, 0x47, 0x86, 0x71, 0x69, 0x4e,
	0x1c, 0x26, 0xb8, 0x6b, 0xe2, 0x9d, 0x52, 0xb4, 0x09, 0x8d, 0xc1, 0x69, 0x98, 0x9d, 0x46, 0xbf,
	0x45, 0xc3, 0x4f, 0xfd, 0x6b, 0xd0, 0x28, 0xda, 0x7c, 0x86, 0x6f, 0x6c, 0xe9, 0x18, 0x3a, 0x47,
	0x86, 0xf1, 0x3d, 0x17, 0x98, 0xec, 0x7f, 0x04, 0x2d, 0x17, 0x2d, 0x64, 0x1e, 0xa6, 0x06, 0x96,
	0x0b, 0x84, 0xc0, 0xbd, 0x19, 0x17, 0x18, 0x1f, 0x95, 0xfc, 0xd6, 0xff, 0xd9, 0x80, 0xfb, 0x27,
	0xdc, 0x11, 0x2e, 0x1b, 0x8b, 0xc4, 0x8a, 0xc8, 0x7b, 0x71, 0xfc, 0xc3, 0x22, 0xe8, 0x92, 0x64,
	0xed, 0x03, 0x6e, 0x9b, 0x02, 0xed, 0xa9, 0x98, 0xbf, 0x0e, 0xba, 0x5f, 0x7a, 0xc2, 0xf5, 0xc7,
	0xc2, 0x3b, 0xd4, 0x8b, 0xb0, 0xde, 0xb3, 0xd9, 0x34, 0xc2, 0x7d, 0x17, 0x4b, 0x35, 0x32, 0xf1,
	0xfd, 0x08, 0x8d, 0x2b, 0x3a, 0x8c, 0xb2, 0x7e, 0x3c, 0x58, 0x04, 0xdd, 0x0d, 0xdf, 0xb5, 0x14,
	0xae, 0x8f, 0x53, 0x2e, 0x05, 0xc9, 0xd3, 0xa8, 0x20, 0x0d, 0xad, 0x86, 0x21, 0x59, 0xcc, 0x99,
	0xf8, 0x6c, 0x12, 0xd7, 0x63, 0x14, 0x52, 0xb2, 0x56, 0x11, 0x52, 0x11, 0xce, 0x73, 0x95, 0x68,
	0xd0, 0x94, 0x89, 0x70, 0x58, 0x9b, 0xa1, 0x1b, 0xb6, 0x9c, 0x76, 0x4f, 0x92, 0x5e, 0x2d, 0x82,
	0xee, 0x56, 0xbc, 0xa4, 0x70, 0x3e, 0x49, 0x39, 0x0b, 0x68, 0x9e, 0xb2, 0xa8, 0x40, 0x13, 0x16,
	0xf2, 0x1b, 0xc0, 0xc8, 0x37, 0x2d, 0xe3, 0x82, 0xb9, 0xcc, 0xd6, 0x56, 0x24, 0xe7, 0x4f, 0x8b,
	0xa0, 0xfb, 0x60, 0xb9, 0xaa, 0xd0, 0x1e, 0xa7, 0xb4, 0x65, 0x0a, 0x79, 0xe6, 0x52, 0x1d, 0x9a,
	0x61, 0x24, 0x7f, 0xd6, 0xa0, 0xf9, 0x3c, 0xee, 0x6e, 0x6d, 0xb5, 0xd7, 0xe8, 0xaf, 0xef, 0xbf,
	0xbd, 0x97, 0xfe, 0x6f, 0xed, 0x65, 0x1b, 0x3f, 0x3a, 0x80, 0x44, 0xb9, 0xe2, 0x00, 0x8a, 0x70,
	0xde, 0xa7, 0x12, 0x0d, 0x9a, 0xba, 0x10, 0xd6, 0xd4, 0xd1, 0xc9, 0x50, 0x5b, 0xeb, 0xd5, 0xfa,
	0xed, 0xa8, 0xa6, 0xd8, 0xb8, 0xaa, 0xa6, 0x14, 0x24, 0x4f, 0xa3, 0x82, 0x34, 0xb4, 0x4a, 0x5e,
	0xc0, 0xaa, 0x8d, 0x36, 0x77, 0xe7, 0x5a, 0x33, 0x6c, 0xa8, 0x63, 0xba, 0x08, 0xba, 0x9b, 0xd1,
	0x8a, 0x42, 0x71, 0x98, 0x52, 0xe4, 0xc1, 0x3c, 0x4b, 0x01, 0xa7, 0x31, 0x43, 0x58, 0xbf, 0x27,
	0x17, 0x57, 0x97, 0x37, 0xcc, 0x45, 0xad, 0x25, 0xd9, 0x64, 0xfa, 0x92, 0xb5, 0x8a, 0xf4, 0x15,
	0xe1, 0x3c, 0x63, 0x89, 0x06, 0x4d, 0x99, 0xc8, 0x35, 0xdc, 0xb3, 0x4c, 0xe7, 0xa5, 0x06, 0xb2,
	0x90, 0x86, 0x8b, 0xa0, 0xdb, 0x09, 0x65, 0x85, 0xed, 0x60, 0xd9, 0x2d, 0x0a, 0x54, 0xe8, 0x14,
	0x15, 0xa5, 0xd2, 0x32, 0xf9, 0xab, 0x06, 0x1d, 0xc7, 0xb7, 0x33, 0x7f, 0x85, 0xda, 0xba, 0x0c,
	0xef, 0xc5, 0x22, 0xe8, 0x6a, 0x2a, 0xa2, 0xd0, 0x7e, 0x93, 0xd2, 0x56, 0x29, 0xe5, 0x1d, 0xa8,
	0xd4, 0xa3, 0x39, 0x0f, 0xc8, 0x1f, 0x35, 0x68, 0x7b, 0xe6, 0xe4, 0xbb, 0x1b, 0x17, 0xbd, 0x1b,
	0x6e, 0x19, 0x5a, 0x5b, 0xba, 0x64, 0x2c, 0x82, 0xee, 0xc3, 0xec, 0xba, 0xe2, 0xd0, 0xb3, 0xd4,
	0xa1, 0x72, 0x95, 0xbc, 0x3b, 0x15, 0x5a, 0x54, 0x61, 0x26, 0xbf, 0xd7, 0xa0, 0x81, 0xce, 0x4c,
	0xdb, 0x90, 0xbd, 0xb4, 0x9b, 0xe9, 0xa5, 0xdc, 0x9f, 0xf6, 0xde, 0x99, 0x33, 0x3b, 0x73, 0x84,
	0x3b, 0x8f, 0xca, 0x1c, 0x9d, 0x59, 0x45, 0x99, 0x2b, 0x48, 0xde, 0x29, 0x15, 0xa4, 0x21, 0xb5,
	0x3c, 0x22, 0x74, 0xd8, 0xc8, 0xc2, 0xa4, 0x7d, 0xb5, 0x4e, 0x38, 0x30, 0x44, 0x47, 0xa4, 0x22,
	0x15, 0x47, 0x54, 0xa5, 0x54, 0xa4, 0xaf, 0xd0, 0xa3, 0x39, 0x0f, 0x76, 0x0e, 0xa0, 0x99, 0x04,
	0x1c, 0x5e, 0x8c, 0x2f, 0x71, 0x1e, 0x5f, 0x77, 0xe1, 0x67, 0x78, 0xb7, 0xcf, 0x98, 0xe5, 0x63,
	0x7c, 0x85, 0x47, 0xc2, 0x61, 0xfd, 0xb3, 0x9a, 0x7e, 0x0d, 0x9b, 0xe7, 0x28, 0x4e, 0xe4, 0x9d,
	0x93, 0x5c, 0x77, 0x43, 0xa8, 0xa7, 0x17, 0xdd, 0x93, 0x45, 0xd0, 0xad, 0x9b, 0xc6, 0xeb, 0xa0,
	0xbb, 0x9f, 0x7a, 0x6f, 0xde, 0x72, 0x8a, 0x0a, 0x46, 0xeb, 0x83, 0x53, 0xfd, 0x57, 0x20, 0xe7,
	0x28, 0x06, 0x06, 0x3a, 0xc2, 0x14, 0xf3, 0xdb, 0xa7, 0x8d, 0x88, 0xb9, 0xfe, 0x1f, 0x31, 0xef,
	0xc2, 0xd6, 0x39, 0x0a, 0x1a, 0x5d, 0xf7, 0x09, 0x71, 0x67, 0x19, 0x9c, 0x54, 0x1a, 0xc0, 0xc6,
	0x29, 0x4e, 0x2d, 0x3e, 0xbf, 0xcb, 0xc8, 0xa1, 0x8c, 0x13, 0xf5, 0xdc, 0x38, 0xa1, 0x0f, 0x60,
	0xfb, 0xc4, 0x45, 0x26, 0xf0, 0x6e, 0xc1, 0xde, 0x36, 0x5a, 0x31, 0xd8, 0xba, 0x14, 0x7c, 0xfa,
	0x7f, 0x9e, 0xcb, 0x01, 0x34, 0x29, 0x7a, 0x53, 0xee, 0x78, 0x28, 0x67, 0x53, 0xc1, 0x84, 0xef,
	0x49, 0xeb, 0x2b, 0x34, 0x96, 0xc2, 0x01, 0x69, 0xc4, 0x8d, 0xb9, 0x74, 0xaf, 0x4d, 0xe5, 0xf7,
	0xfe, 0xdf, 0x6b, 0xd0, 0x38, 0xba, 0x18, 0x90, 0x4f, 0x60, 0x45, 0xce, 0x8f, 0x24, 0x7b, 0xa1,
	0x65, 0x27, 0xca, 0x9d, 0xb7, 0x32, 0x40, 0x4a, 0xf5, 0x14, 0xda, 0x51, 0x92, 0xa2, 0xd8, 0xc8,
	0x4e, 0x75, 0x0b, 0x57, 0x1a, 0xb8, 0x9a, 0x1a, 0x6f, 0x64, 0x00, 0x96, 0x65, 0x41, 0x1e, 0x65,
	0x54, 0x0a, 0xd5, 0x52, 0x6e, 0xe0, 0x1c, 0x3a, 0xea, 0x39, 0x93, 0x5e, 0xd6, 0x87, 0xb2, 0x12,
	0x28, 0x37, 0xf4, 0x29, 0xac, 0x46, 0xb5, 0x47, 0xb4, 0x0c, 0xac, 0x94, 0x63, 0xf9, 0xc6, 0x2f,
	0xa0, 0x95, 0x76, 0x2d, 0x79, 0x57, 0x8d, 0x40, 0xa9, 0x99, 0xf2, 0xed, 0x47, 0xb0, 0x9e, 0x69,
	0x49, 0xf2, 0x9e, 0x6a, 0xe0, 0x4e, 0xae, 0x3f, 0x05, 0x58, 0x16, 0xa8, 0x92, 0xc4, 0x42, 0xdd,
	0x56, 0x26, 0x51, 0x7d, 0x3c, 0x28, 0x49, 0x2c, 0x7d, 0x57, 0x94, 0x1b, 0xfa, 0x1c, 0xd6, 0xe2,
	0xa1, 0x9f, 0xbc, 0xa3, 0x5a, 0xc8, 0x3c, 0x04, 0xca, 0xb7, 0x7e, 0x0b, 0x5b, 0x85, 0x97, 0x07,
	0xd9, 0x55, 0x34, 0xcb, 0xdf, 0x25, 0x95, 0x9e, 0xc4, 0x6f, 0x45, 0xc5, 0x13, 0xf5, 0xfd, 0x58,
	0x99, 0x0d, 0xf5, 0x45, 0xaa, 0x64, 0xa3, 0xf4, 0xb1, 0x5a, 0x6a, 0x68, 0xb4, 0x2a, 0xd7, 0x3e,
	0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xc4, 0xce, 0xe3, 0x2b, 0x0f, 0x00, 0x00,
}
