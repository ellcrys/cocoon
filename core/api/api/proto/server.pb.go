// Code generated by protoc-gen-go.
// source: server.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	FirewallAllowRequest
	FirewallRule
	LoginRequest
	AddSignatoriesRequest
	RemoveSignatoriesRequest
	AddVoteRequest
	CocoonPayloadRequest
	GetCocoonRequest
	GetIdentityRequest
	CreateReleaseRequest
	GetReleaseRequest
	DeployRequest
	CreateIdentityRequest
	StopCocoonRequest
	Response
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type FirewallAllowRequest struct {
	CocoonID        string `protobuf:"bytes,1,opt,name=cocoonID" json:"cocoonID,omitempty"`
	Destination     string `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
	DestinationPort string `protobuf:"bytes,3,opt,name=destinationPort" json:"destinationPort,omitempty"`
	Protocol        string `protobuf:"bytes,4,opt,name=protocol" json:"protocol,omitempty"`
}

func (m *FirewallAllowRequest) Reset()                    { *m = FirewallAllowRequest{} }
func (m *FirewallAllowRequest) String() string            { return proto1.CompactTextString(m) }
func (*FirewallAllowRequest) ProtoMessage()               {}
func (*FirewallAllowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FirewallAllowRequest) GetCocoonID() string {
	if m != nil {
		return m.CocoonID
	}
	return ""
}

func (m *FirewallAllowRequest) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *FirewallAllowRequest) GetDestinationPort() string {
	if m != nil {
		return m.DestinationPort
	}
	return ""
}

func (m *FirewallAllowRequest) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type FirewallRule struct {
	Destination     string `protobuf:"bytes,1,opt,name=destination" json:"destination,omitempty"`
	DestinationPort string `protobuf:"bytes,2,opt,name=destinationPort" json:"destinationPort,omitempty"`
	Protocol        string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
}

func (m *FirewallRule) Reset()                    { *m = FirewallRule{} }
func (m *FirewallRule) String() string            { return proto1.CompactTextString(m) }
func (*FirewallRule) ProtoMessage()               {}
func (*FirewallRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FirewallRule) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *FirewallRule) GetDestinationPort() string {
	if m != nil {
		return m.DestinationPort
	}
	return ""
}

func (m *FirewallRule) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type LoginRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto1.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LoginRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AddSignatoriesRequest struct {
	CocoonID string   `protobuf:"bytes,1,opt,name=cocoonID" json:"cocoonID,omitempty"`
	IDs      []string `protobuf:"bytes,2,rep,name=IDs" json:"IDs,omitempty"`
}

func (m *AddSignatoriesRequest) Reset()                    { *m = AddSignatoriesRequest{} }
func (m *AddSignatoriesRequest) String() string            { return proto1.CompactTextString(m) }
func (*AddSignatoriesRequest) ProtoMessage()               {}
func (*AddSignatoriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddSignatoriesRequest) GetCocoonID() string {
	if m != nil {
		return m.CocoonID
	}
	return ""
}

func (m *AddSignatoriesRequest) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

type RemoveSignatoriesRequest struct {
	CocoonID string   `protobuf:"bytes,1,opt,name=cocoonID" json:"cocoonID,omitempty"`
	IDs      []string `protobuf:"bytes,2,rep,name=IDs" json:"IDs,omitempty"`
}

func (m *RemoveSignatoriesRequest) Reset()                    { *m = RemoveSignatoriesRequest{} }
func (m *RemoveSignatoriesRequest) String() string            { return proto1.CompactTextString(m) }
func (*RemoveSignatoriesRequest) ProtoMessage()               {}
func (*RemoveSignatoriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RemoveSignatoriesRequest) GetCocoonID() string {
	if m != nil {
		return m.CocoonID
	}
	return ""
}

func (m *RemoveSignatoriesRequest) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

type AddVoteRequest struct {
	ReleaseID string `protobuf:"bytes,1,opt,name=releaseID" json:"releaseID,omitempty"`
	Vote      string `protobuf:"bytes,2,opt,name=vote" json:"vote,omitempty"`
}

func (m *AddVoteRequest) Reset()                    { *m = AddVoteRequest{} }
func (m *AddVoteRequest) String() string            { return proto1.CompactTextString(m) }
func (*AddVoteRequest) ProtoMessage()               {}
func (*AddVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddVoteRequest) GetReleaseID() string {
	if m != nil {
		return m.ReleaseID
	}
	return ""
}

func (m *AddVoteRequest) GetVote() string {
	if m != nil {
		return m.Vote
	}
	return ""
}

type CocoonPayloadRequest struct {
	ID             string          `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	URL            string          `protobuf:"bytes,2,opt,name=URL" json:"URL,omitempty"`
	Language       string          `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	Version     string          `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
	BuildParam     string          `protobuf:"bytes,5,opt,name=buildParam" json:"buildParam,omitempty"`
	Firewall       []*FirewallRule `protobuf:"bytes,6,rep,name=firewall" json:"firewall,omitempty"`
	ACL            []byte          `protobuf:"bytes,7,opt,name=ACL,proto3" json:"ACL,omitempty"`
	Memory         string          `protobuf:"bytes,8,opt,name=memory" json:"memory,omitempty"`
	CPUShares      string          `protobuf:"bytes,9,opt,name=CPUShares" json:"CPUShares,omitempty"`
	Link           string          `protobuf:"bytes,10,opt,name=link" json:"link,omitempty"`
	NumSignatories int32           `protobuf:"varint,11,opt,name=numSignatories" json:"numSignatories,omitempty"`
	SigThreshold   int32           `protobuf:"varint,12,opt,name=sigThreshold" json:"sigThreshold,omitempty"`
}

func (m *CocoonPayloadRequest) Reset()                    { *m = CocoonPayloadRequest{} }
func (m *CocoonPayloadRequest) String() string            { return proto1.CompactTextString(m) }
func (*CocoonPayloadRequest) ProtoMessage()               {}
func (*CocoonPayloadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CocoonPayloadRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CocoonPayloadRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *CocoonPayloadRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *CocoonPayloadRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CocoonPayloadRequest) GetBuildParam() string {
	if m != nil {
		return m.BuildParam
	}
	return ""
}

func (m *CocoonPayloadRequest) GetFirewall() []*FirewallRule {
	if m != nil {
		return m.Firewall
	}
	return nil
}

func (m *CocoonPayloadRequest) GetACL() []byte {
	if m != nil {
		return m.ACL
	}
	return nil
}

func (m *CocoonPayloadRequest) GetMemory() string {
	if m != nil {
		return m.Memory
	}
	return ""
}

func (m *CocoonPayloadRequest) GetCPUShares() string {
	if m != nil {
		return m.CPUShares
	}
	return ""
}

func (m *CocoonPayloadRequest) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CocoonPayloadRequest) GetNumSignatories() int32 {
	if m != nil {
		return m.NumSignatories
	}
	return 0
}

func (m *CocoonPayloadRequest) GetSigThreshold() int32 {
	if m != nil {
		return m.SigThreshold
	}
	return 0
}

type GetCocoonRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *GetCocoonRequest) Reset()                    { *m = GetCocoonRequest{} }
func (m *GetCocoonRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetCocoonRequest) ProtoMessage()               {}
func (*GetCocoonRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetCocoonRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetIdentityRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	ID    string `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *GetIdentityRequest) Reset()                    { *m = GetIdentityRequest{} }
func (m *GetIdentityRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetIdentityRequest) ProtoMessage()               {}
func (*GetIdentityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetIdentityRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GetIdentityRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type CreateReleaseRequest struct {
	ID         string          `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	CocoonID   string          `protobuf:"bytes,2,opt,name=cocoonID" json:"cocoonID,omitempty"`
	URL        string          `protobuf:"bytes,3,opt,name=URL" json:"URL,omitempty"`
	Language   string          `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	Version string          `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
	BuildParam string          `protobuf:"bytes,6,opt,name=buildParam" json:"buildParam,omitempty"`
	Link       string          `protobuf:"bytes,7,opt,name=link" json:"link,omitempty"`
	Firewall   []*FirewallRule `protobuf:"bytes,8,rep,name=firewall" json:"firewall,omitempty"`
	ACL        []byte          `protobuf:"bytes,9,opt,name=ACL,proto3" json:"ACL,omitempty"`
}

func (m *CreateReleaseRequest) Reset()                    { *m = CreateReleaseRequest{} }
func (m *CreateReleaseRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateReleaseRequest) ProtoMessage()               {}
func (*CreateReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateReleaseRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CreateReleaseRequest) GetCocoonID() string {
	if m != nil {
		return m.CocoonID
	}
	return ""
}

func (m *CreateReleaseRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *CreateReleaseRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *CreateReleaseRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CreateReleaseRequest) GetBuildParam() string {
	if m != nil {
		return m.BuildParam
	}
	return ""
}

func (m *CreateReleaseRequest) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CreateReleaseRequest) GetFirewall() []*FirewallRule {
	if m != nil {
		return m.Firewall
	}
	return nil
}

func (m *CreateReleaseRequest) GetACL() []byte {
	if m != nil {
		return m.ACL
	}
	return nil
}

type GetReleaseRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *GetReleaseRequest) Reset()                    { *m = GetReleaseRequest{} }
func (m *GetReleaseRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetReleaseRequest) ProtoMessage()               {}
func (*GetReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetReleaseRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type DeployRequest struct {
	CocoonID               string `protobuf:"bytes,1,opt,name=cocoonID" json:"cocoonID,omitempty"`
	UseLastDeployedRelease bool   `protobuf:"varint,2,opt,name=useLastDeployedRelease" json:"useLastDeployedRelease,omitempty"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto1.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeployRequest) GetCocoonID() string {
	if m != nil {
		return m.CocoonID
	}
	return ""
}

func (m *DeployRequest) GetUseLastDeployedRelease() bool {
	if m != nil {
		return m.UseLastDeployedRelease
	}
	return false
}

type CreateIdentityRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *CreateIdentityRequest) Reset()                    { *m = CreateIdentityRequest{} }
func (m *CreateIdentityRequest) String() string            { return proto1.CompactTextString(m) }
func (*CreateIdentityRequest) ProtoMessage()               {}
func (*CreateIdentityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateIdentityRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateIdentityRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type StopCocoonRequest struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *StopCocoonRequest) Reset()                    { *m = StopCocoonRequest{} }
func (m *StopCocoonRequest) String() string            { return proto1.CompactTextString(m) }
func (*StopCocoonRequest) ProtoMessage()               {}
func (*StopCocoonRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *StopCocoonRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Response struct {
	Status int32  `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	Body   []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto1.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Response) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Response) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto1.RegisterType((*FirewallAllowRequest)(nil), "proto.FirewallAllowRequest")
	proto1.RegisterType((*FirewallRule)(nil), "proto.FirewallRule")
	proto1.RegisterType((*LoginRequest)(nil), "proto.LoginRequest")
	proto1.RegisterType((*AddSignatoriesRequest)(nil), "proto.AddSignatoriesRequest")
	proto1.RegisterType((*RemoveSignatoriesRequest)(nil), "proto.RemoveSignatoriesRequest")
	proto1.RegisterType((*AddVoteRequest)(nil), "proto.AddVoteRequest")
	proto1.RegisterType((*CocoonPayloadRequest)(nil), "proto.CocoonPayloadRequest")
	proto1.RegisterType((*GetCocoonRequest)(nil), "proto.GetCocoonRequest")
	proto1.RegisterType((*GetIdentityRequest)(nil), "proto.GetIdentityRequest")
	proto1.RegisterType((*CreateReleaseRequest)(nil), "proto.CreateReleaseRequest")
	proto1.RegisterType((*GetReleaseRequest)(nil), "proto.GetReleaseRequest")
	proto1.RegisterType((*DeployRequest)(nil), "proto.DeployRequest")
	proto1.RegisterType((*CreateIdentityRequest)(nil), "proto.CreateIdentityRequest")
	proto1.RegisterType((*StopCocoonRequest)(nil), "proto.StopCocoonRequest")
	proto1.RegisterType((*Response)(nil), "proto.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error)
	CreateCocoon(ctx context.Context, in *CocoonPayloadRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateCocoon(ctx context.Context, in *CocoonPayloadRequest, opts ...grpc.CallOption) (*Response, error)
	CreateRelease(ctx context.Context, in *CreateReleaseRequest, opts ...grpc.CallOption) (*Response, error)
	GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*Response, error)
	CreateIdentity(ctx context.Context, in *CreateIdentityRequest, opts ...grpc.CallOption) (*Response, error)
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*Response, error)
	GetCocoon(ctx context.Context, in *GetCocoonRequest, opts ...grpc.CallOption) (*Response, error)
	GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*Response, error)
	StopCocoon(ctx context.Context, in *StopCocoonRequest, opts ...grpc.CallOption) (*Response, error)
	AddSignatories(ctx context.Context, in *AddSignatoriesRequest, opts ...grpc.CallOption) (*Response, error)
	AddVote(ctx context.Context, in *AddVoteRequest, opts ...grpc.CallOption) (*Response, error)
	RemoveSignatories(ctx context.Context, in *RemoveSignatoriesRequest, opts ...grpc.CallOption) (*Response, error)
	FirewallAllow(ctx context.Context, in *FirewallAllowRequest, opts ...grpc.CallOption) (*Response, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateCocoon(ctx context.Context, in *CocoonPayloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/CreateCocoon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateCocoon(ctx context.Context, in *CocoonPayloadRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/UpdateCocoon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateRelease(ctx context.Context, in *CreateReleaseRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/CreateRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetRelease(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/GetRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateIdentity(ctx context.Context, in *CreateIdentityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/CreateIdentity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetCocoon(ctx context.Context, in *GetCocoonRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/GetCocoon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/GetIdentity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) StopCocoon(ctx context.Context, in *StopCocoonRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/StopCocoon", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddSignatories(ctx context.Context, in *AddSignatoriesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/AddSignatories", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddVote(ctx context.Context, in *AddVoteRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/AddVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) RemoveSignatories(ctx context.Context, in *RemoveSignatoriesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/RemoveSignatories", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) FirewallAllow(ctx context.Context, in *FirewallAllowRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.API/FirewallAllow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Login(context.Context, *LoginRequest) (*Response, error)
	CreateCocoon(context.Context, *CocoonPayloadRequest) (*Response, error)
	UpdateCocoon(context.Context, *CocoonPayloadRequest) (*Response, error)
	CreateRelease(context.Context, *CreateReleaseRequest) (*Response, error)
	GetRelease(context.Context, *GetReleaseRequest) (*Response, error)
	CreateIdentity(context.Context, *CreateIdentityRequest) (*Response, error)
	Deploy(context.Context, *DeployRequest) (*Response, error)
	GetCocoon(context.Context, *GetCocoonRequest) (*Response, error)
	GetIdentity(context.Context, *GetIdentityRequest) (*Response, error)
	StopCocoon(context.Context, *StopCocoonRequest) (*Response, error)
	AddSignatories(context.Context, *AddSignatoriesRequest) (*Response, error)
	AddVote(context.Context, *AddVoteRequest) (*Response, error)
	RemoveSignatories(context.Context, *RemoveSignatoriesRequest) (*Response, error)
	FirewallAllow(context.Context, *FirewallAllowRequest) (*Response, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateCocoon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CocoonPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateCocoon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CreateCocoon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateCocoon(ctx, req.(*CocoonPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateCocoon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CocoonPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateCocoon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/UpdateCocoon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateCocoon(ctx, req.(*CocoonPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CreateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateRelease(ctx, req.(*CreateReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetRelease(ctx, req.(*GetReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/CreateIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateIdentity(ctx, req.(*CreateIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetCocoon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCocoonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetCocoon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetCocoon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetCocoon(ctx, req.(*GetCocoonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/GetIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetIdentity(ctx, req.(*GetIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_StopCocoon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCocoonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).StopCocoon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/StopCocoon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).StopCocoon(ctx, req.(*StopCocoonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddSignatories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSignatoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddSignatories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/AddSignatories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddSignatories(ctx, req.(*AddSignatoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/AddVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddVote(ctx, req.(*AddVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_RemoveSignatories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSignatoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).RemoveSignatories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/RemoveSignatories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).RemoveSignatories(ctx, req.(*RemoveSignatoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_FirewallAllow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirewallAllowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).FirewallAllow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.API/FirewallAllow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).FirewallAllow(ctx, req.(*FirewallAllowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _API_Login_Handler,
		},
		{
			MethodName: "CreateCocoon",
			Handler:    _API_CreateCocoon_Handler,
		},
		{
			MethodName: "UpdateCocoon",
			Handler:    _API_UpdateCocoon_Handler,
		},
		{
			MethodName: "CreateRelease",
			Handler:    _API_CreateRelease_Handler,
		},
		{
			MethodName: "GetRelease",
			Handler:    _API_GetRelease_Handler,
		},
		{
			MethodName: "CreateIdentity",
			Handler:    _API_CreateIdentity_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _API_Deploy_Handler,
		},
		{
			MethodName: "GetCocoon",
			Handler:    _API_GetCocoon_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _API_GetIdentity_Handler,
		},
		{
			MethodName: "StopCocoon",
			Handler:    _API_StopCocoon_Handler,
		},
		{
			MethodName: "AddSignatories",
			Handler:    _API_AddSignatories_Handler,
		},
		{
			MethodName: "AddVote",
			Handler:    _API_AddVote_Handler,
		},
		{
			MethodName: "RemoveSignatories",
			Handler:    _API_RemoveSignatories_Handler,
		},
		{
			MethodName: "FirewallAllow",
			Handler:    _API_FirewallAllow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto1.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 798 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x4e, 0xdb, 0x48,
	0x14, 0x56, 0x1c, 0x12, 0x92, 0x13, 0x13, 0x60, 0x36, 0xb0, 0x5e, 0x16, 0xed, 0x46, 0x46, 0x5a,
	0xe5, 0x66, 0x41, 0xa5, 0x2a, 0xa8, 0x55, 0xab, 0x36, 0x05, 0x4a, 0x23, 0xe5, 0x22, 0x32, 0xd0,
	0xfb, 0x21, 0x3e, 0x0d, 0x56, 0x1d, 0x4f, 0xea, 0x99, 0x04, 0xe5, 0x09, 0xfa, 0x0e, 0x7d, 0x99,
	0x3e, 0x51, 0xdf, 0xa1, 0xf2, 0x78, 0xfc, 0x17, 0x9b, 0x90, 0xb6, 0x57, 0x99, 0x73, 0x66, 0xbe,
	0x73, 0x26, 0xdf, 0xf7, 0xcd, 0x8c, 0x41, 0xe7, 0xe8, 0xcf, 0xd0, 0x3f, 0x9c, 0xf8, 0x4c, 0x30,
	0x52, 0x91, 0x3f, 0xe6, 0xd7, 0x12, 0xb4, 0xde, 0x39, 0x3e, 0xde, 0x53, 0xd7, 0xed, 0xba, 0x2e,
	0xbb, 0xb7, 0xf0, 0xf3, 0x14, 0xb9, 0x20, 0x7b, 0x50, 0x1b, 0xb2, 0x21, 0x63, 0x5e, 0xef, 0xdc,
	0x28, 0xb5, 0x4b, 0x9d, 0xba, 0x15, 0xc7, 0xa4, 0x0d, 0x0d, 0x1b, 0xb9, 0x70, 0x3c, 0x2a, 0x1c,
	0xe6, 0x19, 0x9a, 0x9c, 0x4e, 0xa7, 0x48, 0x07, 0x36, 0x53, 0xe1, 0x80, 0xf9, 0xc2, 0x28, 0xcb,
	0x55, 0x8b, 0xe9, 0xa0, 0x8f, 0xdc, 0xc9, 0x90, 0xb9, 0xc6, 0x5a, 0xd8, 0x27, 0x8a, 0xcd, 0x19,
	0xe8, 0xd1, 0xde, 0xac, 0xa9, 0x8b, 0x8b, 0x7d, 0x4b, 0x2b, 0xf5, 0xd5, 0x1e, 0xef, 0x5b, 0x5e,
	0xe8, 0xfb, 0x06, 0xf4, 0x3e, 0x1b, 0x39, 0x5e, 0xc4, 0x45, 0x0b, 0x2a, 0x38, 0xa6, 0x8e, 0xab,
	0x3a, 0x86, 0x81, 0xac, 0x40, 0x39, 0xbf, 0x67, 0xbe, 0xad, 0x9a, 0xc4, 0xb1, 0x79, 0x01, 0x3b,
	0x5d, 0xdb, 0xbe, 0x72, 0x46, 0x1e, 0x15, 0xcc, 0x77, 0x90, 0xaf, 0x42, 0xeb, 0x16, 0x94, 0x7b,
	0xe7, 0xdc, 0xd0, 0xda, 0xe5, 0x4e, 0xdd, 0x0a, 0x86, 0xe6, 0x7b, 0x30, 0x2c, 0x1c, 0xb3, 0x19,
	0xfe, 0x76, 0xa5, 0xb7, 0xd0, 0xec, 0xda, 0xf6, 0x07, 0x26, 0x30, 0xc2, 0xef, 0x43, 0xdd, 0x47,
	0x17, 0x29, 0xc7, 0xb8, 0x40, 0x92, 0x20, 0x04, 0xd6, 0x66, 0x4c, 0xa0, 0xfa, 0x63, 0x72, 0x6c,
	0x7e, 0xd7, 0xa0, 0x75, 0x26, 0x5b, 0x0c, 0xe8, 0xdc, 0x65, 0xd4, 0x8e, 0x4a, 0x35, 0x41, 0x8b,
	0x6b, 0x68, 0x61, 0xfb, 0x1b, 0xab, 0xaf, 0xb0, 0xc1, 0x30, 0xd8, 0xac, 0x4b, 0xbd, 0xd1, 0x94,
	0x8e, 0x30, 0x62, 0x3b, 0x8a, 0xc9, 0x3f, 0x00, 0xaa, 0xef, 0x35, 0x1d, 0x29, 0x0f, 0xa4, 0x32,
	0xc1, 0xfc, 0xed, 0xd4, 0x71, 0xed, 0x01, 0xf5, 0xe9, 0xd8, 0xa8, 0x84, 0xf3, 0x49, 0x86, 0x1c,
	0x41, 0xed, 0xa3, 0x72, 0x89, 0x51, 0x6d, 0x97, 0x3b, 0x8d, 0xe3, 0x3f, 0x42, 0x8f, 0x1f, 0xa6,
	0xcd, 0x63, 0xc5, 0x8b, 0x82, 0xed, 0x75, 0xcf, 0xfa, 0xc6, 0x7a, 0xbb, 0xd4, 0xd1, 0xad, 0x60,
	0x48, 0x76, 0xa1, 0x3a, 0xc6, 0x31, 0xf3, 0xe7, 0x46, 0x4d, 0x96, 0x57, 0x51, 0xc0, 0xd1, 0xd9,
	0xe0, 0xe6, 0xea, 0x8e, 0xfa, 0xc8, 0x8d, 0x7a, 0xc8, 0x51, 0x9c, 0x08, 0x38, 0x72, 0x1d, 0xef,
	0x93, 0x01, 0x21, 0x47, 0xc1, 0x98, 0xfc, 0x07, 0x4d, 0x6f, 0x3a, 0x4e, 0xc9, 0x65, 0x34, 0xda,
	0xa5, 0x4e, 0xc5, 0x5a, 0xc8, 0x12, 0x13, 0x74, 0xee, 0x8c, 0xae, 0xef, 0x7c, 0xe4, 0x77, 0xcc,
	0xb5, 0x0d, 0x5d, 0xae, 0xca, 0xe4, 0x4c, 0x13, 0xb6, 0x2e, 0x51, 0x84, 0x8c, 0x3f, 0x40, 0xb5,
	0xf9, 0x02, 0xc8, 0x25, 0x8a, 0x9e, 0x8d, 0x9e, 0x70, 0xc4, 0x7c, 0xb9, 0x61, 0x43, 0xac, 0x16,
	0x63, 0xbf, 0x04, 0x7a, 0xfa, 0x48, 0x03, 0x4f, 0x48, 0xb6, 0x1f, 0xd2, 0x33, 0x6d, 0x35, 0x2d,
	0x6f, 0xb5, 0x40, 0xeb, 0x72, 0xb1, 0xd6, 0x6b, 0x4b, 0xb5, 0xae, 0x3c, 0xa2, 0x75, 0x35, 0xa7,
	0x75, 0x44, 0xf9, 0x7a, 0x8a, 0xf2, 0xb4, 0xfe, 0xb5, 0x9f, 0xd0, 0xbf, 0x1e, 0xeb, 0x6f, 0x1e,
	0xc0, 0xf6, 0x25, 0x8a, 0xe5, 0x2c, 0x98, 0x43, 0xd8, 0x38, 0xc7, 0x89, 0xcb, 0xe6, 0xab, 0x9c,
	0xc0, 0x13, 0xd8, 0x9d, 0x72, 0xec, 0x53, 0x2e, 0x42, 0x0c, 0xda, 0xaa, 0xba, 0x24, 0xb0, 0x66,
	0x3d, 0x30, 0x6b, 0xf6, 0x60, 0x27, 0x94, 0x64, 0x35, 0x49, 0x97, 0xdd, 0x41, 0x07, 0xb0, 0x7d,
	0x25, 0xd8, 0x64, 0xb9, 0x7f, 0x4e, 0xa0, 0x66, 0x21, 0x9f, 0x30, 0x8f, 0x63, 0x70, 0x0a, 0xb8,
	0xa0, 0x62, 0xca, 0xe5, 0x7c, 0xc5, 0x52, 0x51, 0x40, 0xfa, 0x2d, 0xb3, 0xe7, 0xb2, 0x81, 0x6e,
	0xc9, 0xf1, 0xf1, 0xb7, 0x2a, 0x94, 0xbb, 0x83, 0x1e, 0xf9, 0x1f, 0x2a, 0xf2, 0xaa, 0x24, 0x11,
	0xe7, 0xe9, 0x8b, 0x73, 0x6f, 0x53, 0x25, 0xe3, 0x16, 0x2f, 0x41, 0x0f, 0xff, 0x5e, 0xb8, 0x2b,
	0xf2, 0xb7, 0x5a, 0x50, 0x74, 0xad, 0x14, 0xa2, 0x6f, 0x26, 0xf6, 0xaf, 0xa2, 0x5f, 0xc1, 0x46,
	0xc6, 0xed, 0x09, 0xbc, 0xe0, 0x0c, 0xe4, 0xe1, 0xa7, 0x00, 0x89, 0x47, 0x88, 0xa1, 0xa6, 0x73,
	0xb6, 0xc9, 0x03, 0x5f, 0x43, 0x33, 0x2b, 0x29, 0xd9, 0xcf, 0x34, 0x5e, 0x50, 0x3a, 0x5f, 0xe0,
	0x08, 0xaa, 0xa1, 0x4d, 0x48, 0x4b, 0x4d, 0x65, 0x7c, 0x98, 0x07, 0x3c, 0x83, 0x7a, 0x7c, 0x71,
	0x90, 0x3f, 0x93, 0x9d, 0x66, 0xac, 0x90, 0x87, 0x3d, 0x87, 0x46, 0xea, 0x2e, 0x21, 0x7f, 0x25,
	0xc0, 0x47, 0xb7, 0x78, 0x0a, 0x90, 0x78, 0x2d, 0x26, 0x27, 0x67, 0xbf, 0x42, 0x72, 0xb2, 0x0f,
	0x65, 0x4c, 0x4e, 0xe1, 0xfb, 0x99, 0x2f, 0xf0, 0x04, 0xd6, 0xd5, 0xc3, 0x46, 0x76, 0x12, 0x64,
	0xea, 0xa1, 0xcb, 0x43, 0x2e, 0x60, 0x3b, 0xf7, 0xaa, 0x92, 0x7f, 0xe3, 0x55, 0xc5, 0xef, 0x6d,
	0xa1, 0x9f, 0x32, 0x5f, 0x4e, 0xb1, 0x9f, 0x8a, 0xbe, 0xa7, 0x72, 0xf0, 0xdb, 0xaa, 0x8c, 0x9f,
	0xfe, 0x08, 0x00, 0x00, 0xff, 0xff, 0x75, 0x09, 0x33, 0x75, 0x97, 0x09, 0x00, 0x00,
}
