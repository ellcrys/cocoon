// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1488387202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x5d\x6f\xab\x38\x13\xbe\xef\xaf\xb0\xac\x73\xf9\xb6\x49\xfb\xea\x48\xab\x48\x7b\x41\x43\xb7\xca\x2a\x1f\x28\x1f\x17\xab\x55\x85\xa6\xc6\xa5\x56\x8c\x8d\xec\x21\xe7\x64\x11\xff\x7d\x65\x20\xa7\x80\x49\xbb\xb9\xa9\x3b\xf3\xcc\xd7\x33\x9e\x31\xe5\x0d\x21\xf4\x4f\xfd\x4a\x67\xc4\x1d\x09\xa1\x5b\x9e\x0a\xad\xe8\x8c\xd0\x54\xea\x57\x90\xf4\x7f\x8d\x7c\x11\x3a\x59\x59\x2e\xc2\xaa\xba\xc8\xd6\x90\x71\x5f\xba\x3f\xe7\xb5\xd4\x72\x73\x12\x8c\x5f\xc4\x91\x11\xda\x08\x3c\xd3\x19\xf9\x3e\x6d\x65\x81\x94\x01\x6e\x14\x73\xf8\x37\x90\x96\xb7\xf2\x10\x10\x18\x57\xc8\x8d\xa5\x33\xf2\x77\x2d\x24\x84\x26\xec\x9e\xd6\xe7\x97\x16\x37\xd7\xca\xa2\x01\xa1\xb0\x8b\x2b\xdb\xbf\x84\xd0\xe5\x1e\x4c\xca\xd1\xa5\xf3\xad\x04\x44\x73\x77\xe4\x46\x71\x79\xa7\x20\xe3\x97\x8c\x9b\xba\x3f\x90\x52\xa8\xe2\x67\x57\xb7\xc9\xb9\x01\x95\x38\xdd\xef\xb4\x15\x57\xbd\x44\xf6\x60\x8f\xcf\x46\x17\xf9\x95\x3c\x46\x99\x6a\x4b\x28\x94\x8b\x5a\x96\xf5\xa9\xaa\x7a\xba\x6e\x79\xaa\x90\xb2\xa3\x74\x21\xbb\xd1\xfa\x11\x7b\x51\x11\xec\xf1\xd6\x0b\xdd\x30\x6d\xc4\x89\x1b\x07\x4a\x34\x3b\x72\x33\xd4\xcf\xb5\x7a\x13\xe9\xaf\xeb\xd1\xd1\x88\x0c\xd2\x4b\x4d\xee\xe8\xf9\x26\x84\xbe\x69\xc3\x78\x9c\x17\x52\xd2\x19\x41\x53\x70\x0f\xc1\x74\x96\xb5\xd4\xbe\x82\x7d\xf7\x5d\x28\x8e\x3f\xb4\x39\xc6\x99\x4e\xea\x68\xef\xda\xa2\x8f\x02\x93\xd6\x5c\xd0\x6f\xe5\x7a\xb3\x0a\xc2\x78\xf5\xb4\x0f\xe2\xdd\x7c\xbb\x88\xf6\xbb\x38\x5c\x6c\xab\x49\x4f\x13\x3e\x45\xcb\xcd\x5f\x2d\x20\x5e\x07\xab\xa7\x8a\xbe\x78\x5e\x73\x23\x4e\x42\xf2\x94\x27\xd7\xd2\xcf\xb5\xc1\x38\x83\xdc\xc5\x1e\x32\x54\x57\xa7\x14\x67\xa8\xcd\x2d\xe4\x82\xce\xc8\x6f\xd3\xe9\xc3\x00\x55\xbd\xf4\x04\xd5\x80\xff\x27\x75\x1a\x23\x7f\xbe\x99\x6f\x36\xeb\x78\x64\x28\x7d\xd0\x7c\x13\x3e\xc5\x87\xed\xb2\x81\xce\x35\xd3\x5a\xcd\x75\xc2\x0f\xdb\xe5\x57\x56\xfb\xe0\x79\x68\xb5\x87\xf4\x2b\xab\x65\xb0\xf6\xcc\x96\xa0\x3e\xb3\x7b\x3c\x2c\x96\x61\x1c\x05\xdb\x60\xb5\xeb\x9a\x3e\x16\x42\x26\x11\x18\xc8\x6c\x55\xd1\x4f\x99\xda\x35\xeb\xc6\x8e\xb5\xe2\xfa\xfc\xb5\xfa\x3d\xb4\xf7\xa7\x05\xf8\x77\x21\xd2\x06\x97\xf0\xca\xdd\x4d\x1e\xf4\x95\x10\xd2\xcf\x6c\x60\x4d\x57\x1c\x61\xac\x8b\xfe\x2d\x74\xce\x4d\xa1\x6e\x7f\x05\xb8\x1b\x9b\x89\xce\xbd\x76\x06\x13\xa9\x19\xc8\x89\x65\x46\xe4\x68\x3f\x67\x69\xa9\xd3\xeb\x23\xbd\x82\x9f\x7f\x08\x59\x53\x78\x3f\xf5\xa2\xb6\xda\x9d\xf8\x87\xaf\x1e\x6b\xc8\xa7\x91\xf6\x3c\xcb\x25\x60\xd3\x90\x21\x23\x81\x41\xf1\x06\x0c\x47\xbb\x45\x08\x7d\xe6\x88\xdc\xec\x74\x61\x58\x33\xf5\x88\xb9\x9d\x4d\x26\x06\x7e\xdc\xa5\x02\xdf\x8b\xd7\xc2\x72\xc3\xb4\x42\xae\xf0\x8e\xe9\x6c\xa2\x98\x4e\xb8\x9d\xb0\xfa\xda\x4c\x32\xb0\xc8\xcd\x85\x92\xaf\x67\x7f\x58\x6c\xfd\x10\x4a\x40\x71\xe2\x21\xb7\xf8\x25\xcb\xc3\xfa\xb6\xdc\xd6\xb9\xdb\xd1\xe1\x8d\x0e\xcd\xc2\x8f\x0e\x55\xe5\xd3\xcc\x33\x6d\xce\x35\xc3\x65\x79\xf9\x67\x04\xb7\xd8\x44\x6e\x54\xfc\x3e\xad\x9b\x8d\x39\x7c\x1b\x9a\x9f\xcf\xb5\x0b\xf9\x28\xea\x4e\x3c\x4c\x3d\x6f\xb5\x3e\x3c\x2b\xc8\x04\x73\x23\x60\xe9\xcc\x77\x5a\x3b\x26\xb4\x1d\x8f\xc1\x74\x54\x23\xf0\x17\x4f\x36\x44\x7d\xbe\x15\x43\x61\x73\x40\xf6\x1e\xc1\x59\x6a\x70\xdb\xb9\xec\x3a\xf8\x38\xbf\x74\x5f\xf8\x2b\x3d\xb9\xde\x8f\xff\xd2\x0b\x97\xcb\xb1\x45\x34\xc7\x81\x7e\xac\x4f\xbd\x1e\x7d\x94\x5a\xf5\xb3\x45\x30\x18\x69\x29\xd8\x79\x98\xf1\xc2\x7d\x1a\x9d\xc0\xed\xa2\xff\x4f\x3f\x7e\xbd\x10\x01\x22\xcf\x72\xf4\x87\x99\x86\x5c\x82\x73\xf9\xf0\x7d\xdc\x72\xd5\x3e\xb5\x49\x8d\x1b\xcd\xee\xb2\xd1\xaa\xd1\xaf\xa1\x43\x9e\x00\xf2\x4e\xd2\x74\x87\x90\xa6\xf5\x77\xc6\xbd\x9f\xae\xdb\x2c\x6e\xc7\x4b\x59\x6f\xd7\xfb\x9b\x8b\xc7\xea\xa6\xfa\x37\x00\x00\xff\xff\x6b\xef\xf3\xbd\xa1\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2721, mode: os.FileMode(420), modTime: time.Unix(1488387199, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

