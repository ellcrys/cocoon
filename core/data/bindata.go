// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487165117, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\xcb\x8e\xeb\x36\x0c\xdd\xcf\x57\x08\x42\x97\x9d\x3c\x5a\xdc\x4d\x80\x2e\x52\xfb\x76\x90\x22\x2f\x4c\x92\x55\x11\x04\xbc\x32\xc7\x23\x44\x96\x0c\x89\x49\x6f\x6a\xf8\xdf\x0b\xc9\xce\xc4\x8f\x64\x26\x9b\xd0\x3c\xa4\x78\x78\x44\xb1\x78\x62\x8c\xff\x6d\x7e\xf0\x09\xf3\x26\x63\xfc\x15\x53\x69\x34\x9f\x30\x9e\x2a\xf3\x03\x14\xff\xb5\xf2\xcf\x62\xef\x13\x46\x18\xa3\x9f\x8b\x62\x16\x97\xe5\x15\x5a\x42\x86\x0f\xc1\xed\x25\x0f\xa0\x43\x7b\x96\x02\xaf\xee\xb5\x95\xc6\x4a\xba\xf0\x09\xfb\x36\xaa\x7d\x53\xa5\xa6\xb4\xd2\xc2\xc7\xbf\x81\x72\x58\xfb\x63\x20\x10\xa8\x09\xad\xe3\x13\xf6\x4f\x70\x32\xc6\x13\x31\xe6\xc1\xde\xd7\x71\x91\xd1\x8e\x2c\x48\x4d\xcd\xb8\xa2\xfe\x67\x8c\xcf\xb7\x60\x53\x24\x4f\xe7\x97\x02\x88\xec\xe0\x88\x56\xa3\x1a\x68\xc8\xf0\xca\xb8\x52\xe1\x16\xa9\xa4\x3e\xfd\x6c\x62\xab\x1c\x2d\xe8\xc4\x63\x7f\xf0\xda\x5d\xb6\x88\x6c\xc1\x1d\x5f\xac\x39\xe5\x0f\x78\x7c\x26\x58\xdd\xc9\x49\xfb\xe2\x45\x11\xac\xb2\x6c\x61\xcd\x2e\xf5\x49\xa9\x06\xe8\x2b\x37\x8b\xb6\x0b\xdf\x2b\x4e\xe0\x8e\x7d\x06\x95\xee\x56\x9e\xd1\xfa\xd8\xc4\x88\x23\xda\x2e\x1e\x19\xfd\x26\xd3\x8f\xd1\x69\x20\x32\x83\x34\x14\x29\x8a\x99\x37\x7b\x67\x33\x5f\x3f\xcb\x6a\x19\x05\x50\x1f\x07\x9b\x86\x4e\xf8\x50\x19\x01\x6a\xe8\x84\x95\x39\xb9\xc3\xe8\x30\x3a\x8c\x87\x09\x9e\x9f\x13\xcc\x95\xb9\x3c\x0b\xa3\x35\x0a\x32\x76\xe0\xde\xf9\xbe\x75\x4c\xd9\x61\xfc\x5d\x9f\xef\xd1\x8d\x56\xd1\x6a\xb5\x3c\x3c\x1e\xf1\x7e\x6c\xb4\x8a\xbf\x1f\x76\xaf\xf3\xaa\xc9\x28\xe4\x44\x26\xc1\xdd\xeb\xfc\xab\xac\xed\xf4\xa5\x9b\xb5\x85\xf4\xab\xac\xf9\x74\xd9\x4b\x9b\x83\xf6\x79\x9f\xb6\xbc\xa9\xde\x5d\x90\x72\xdf\xc1\x16\x48\xe0\xf5\xe8\xe6\xcc\x4d\xfa\xf8\x6e\x17\xf0\xf3\x2f\xa9\xc2\x81\xe3\x51\x8f\x72\x8d\x6e\xe4\x7f\xb8\xf8\x33\x84\x7c\xca\x6e\x8b\x59\xae\x80\xee\xd3\x9b\x5a\x92\x6f\x20\xaa\xd7\xdc\xe5\xc1\x18\x7f\x41\x22\xb4\x1b\x73\xb2\x61\x65\xf0\x77\xa2\xdc\x4d\x86\x43\x47\xc6\x42\x8a\x83\xd4\x98\x54\x21\xe4\xd2\x0d\x84\xc9\x86\x47\x6b\x52\xd0\x0f\x27\xa7\xdb\x4a\xd8\x85\x0a\x48\x9e\x31\x46\x17\x56\xc1\xbd\x49\xec\xa8\xdf\xed\x21\x96\x2e\x07\x12\xef\x6b\xb8\x28\x03\x49\x50\xbb\x11\x71\xb3\xf7\xcd\xed\x83\x2e\x34\xe5\x3a\xfa\xf3\x68\xbd\xab\xb6\xc2\x7a\x57\xb6\xa4\xe4\x0b\xcc\x8c\xbd\x04\xc9\x8b\xe2\xfa\xd1\x89\x89\xa5\x3b\xd6\x11\x95\xd9\xc1\x67\xab\xf5\x86\x4f\x58\xeb\x52\xf9\x12\xe9\x5f\x63\xab\xa5\x72\x7b\x5c\x65\x9b\x2d\x81\xa5\xb5\x51\x52\x5c\xba\x8c\x67\x7e\x6d\x9f\x41\xf1\x09\xfb\x7d\x74\xfb\xb5\x4a\x4c\x89\x30\xcb\xa9\x3f\x51\x3c\x46\x05\xfe\xc8\xdf\xbe\xdd\xcf\x5c\x98\x24\xdc\x7c\x12\xe2\xee\xb2\xfb\x98\xf1\xbb\x9b\x7a\x97\x27\x40\xd8\x20\xcd\x37\x04\x69\x1a\xb6\xde\xb8\x4f\xd7\x8f\xf7\x1a\x2c\x28\x85\xbe\xa3\xf1\xd3\xf5\xc4\xf2\xa9\xfc\x3f\x00\x00\xff\xff\xa4\x0e\x88\x4e\x4b\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1867, mode: os.FileMode(420), modTime: time.Unix(1487165097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

