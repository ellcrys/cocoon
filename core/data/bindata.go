// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487172695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\xc9\x6e\xdb\x30\x10\xbd\xfb\x2b\x08\xa2\xc7\x7a\x6b\x90\x8b\x81\x1e\x5c\x2b\x0d\x5c\x78\x11\xbc\x9c\x8a\x20\x98\x50\x13\x99\x30\x45\x0a\x24\xed\xc6\x15\xf4\xef\x05\x29\xb9\x96\x25\xd9\xc9\x25\xe3\x79\x6f\x38\x6f\x16\x4d\xd6\x21\x84\xfe\x52\x6f\x74\x44\x9c\x49\x08\x5d\x61\xcc\x95\xa4\x23\x42\x63\xa1\xde\x40\xd0\xaf\x85\x7f\x1a\x38\x1f\x53\x4c\x29\xd9\xcd\xb2\x69\x90\xe7\x67\x68\x01\x09\xde\x04\x37\xa7\xd4\x83\x06\xf5\x91\x33\x3c\xbb\x43\xcd\x95\xe6\xf6\x44\x47\xe4\x71\x50\xfa\xc6\x42\x8c\xed\x52\x32\xc7\x7f\x07\x61\xb0\xf4\x07\x60\x81\xa1\xb4\xa8\x0d\x1d\x91\xdf\xde\x49\x08\x8d\xd8\x90\x7a\xfb\xa5\xe4\x4d\x94\x34\x56\x03\x97\xb6\xca\xcb\xca\xff\x84\xd0\xd9\x06\x74\x8c\xd6\xc9\xf9\x92\x81\xb5\xba\xb7\x47\x2d\x51\xf4\x24\x24\x78\x56\x5c\x74\xe1\xc2\x14\x5c\x1e\x3e\xaa\xd8\x32\x45\x0d\x32\x72\xd8\x77\x5a\xba\xf3\x2b\x21\x1b\x30\xfb\x67\xad\x0e\xe9\x0d\x1d\xf7\x1a\x56\x56\x72\x90\x2e\x79\x96\x79\x2b\xcf\xaf\xb0\x6a\x95\xf2\x20\x44\x05\x74\x99\xab\x49\xaf\x13\xb7\x25\xb7\x60\xf6\x4d\x05\x45\xdf\x35\x3f\xa2\x76\xdc\x48\xb1\x3d\xea\x3a\x3e\x51\xf2\x9d\xc7\xff\x57\xa7\x82\xf0\x04\x62\x9f\x24\xcb\xa6\xce\x6c\xbc\x4d\x5c\xfe\x24\x29\xdb\xf8\x06\x66\xd7\x24\x80\x8e\x7d\x29\xb4\x2f\x14\x03\xd1\x37\x4c\xf3\xd4\x9a\x7e\x84\xc7\x6e\x84\xa9\x50\xa7\x2e\x53\x52\x22\xb3\x4a\x77\x07\xbd\x41\xef\xa1\x67\x76\xf4\xe5\xea\x99\xbc\x26\xf9\x49\x1e\xdb\xf4\x4e\x96\x93\xe5\x72\xf1\x7a\x7b\xc7\x9b\xdc\xc9\x32\x78\x7a\xdd\xae\x66\x45\x95\x13\x1f\x33\x51\x11\x6e\x57\xb3\xcf\xa2\x36\xe3\xe7\x7a\xd4\x06\xe2\xcf\xa2\x66\xe3\x45\x23\x6c\x06\xd2\xc5\xdd\x2d\x79\x85\x46\x1d\x34\x43\xd3\x5a\x78\xb8\x2d\xd6\x2c\xdc\xe6\x79\x23\xfd\x1c\x13\xa5\x4f\xf3\x1f\x9e\x72\xfe\xd1\xc2\x0b\xb8\xd9\x97\xac\xc2\x6c\xe1\x4c\x97\xe1\x9a\x8e\xc8\xa0\x01\x2c\xd0\xfe\x51\xba\xd8\xda\xfb\xc3\x5b\x17\x27\xa4\x60\xd6\xb0\x39\x5a\x70\x02\xea\x31\x33\x15\xdf\x5e\xd3\x39\x7c\xfc\xe4\xc2\x3f\x38\x6c\x0a\x2b\xd1\x35\xff\x8b\xbe\xb8\xe1\xe0\xae\xba\x0d\x26\xa9\x00\xdb\x2e\x6f\xac\x2d\x7f\x07\x56\x1c\xa6\xba\x0e\x42\xe8\x33\x5a\x8b\x7a\xed\x07\xe5\x86\xbc\xb3\x36\x35\xa3\x7e\xdf\x58\xa5\x21\xc6\x5e\xac\x54\x2c\x10\x52\x6e\x7a\x4c\x25\xfd\xbd\x56\x31\xc8\x4f\xbe\x84\x7a\x41\x7e\x17\x04\x58\x7e\xc4\x00\x8d\xbf\x6d\xd7\x5f\x56\x6d\x8f\xea\x35\x04\xdc\xa4\x60\xd9\x2e\x84\x93\x50\x10\xf9\x6e\x57\x18\x17\xfb\xa5\x7a\x48\xd1\x58\xd0\x36\x54\x82\xb3\x53\x6d\x06\x74\xea\x6e\xfa\x11\x04\x1d\x91\x87\xc1\xe5\xaf\x9a\x97\x8e\xad\xc5\x24\xb5\xcd\x19\xd1\x00\x05\xb8\x27\xbf\x3d\xb6\x47\xce\x55\xe4\x7b\x19\x79\x5e\xa7\x65\x6e\x97\xad\x69\x3d\xe3\xdb\x34\x02\x8b\x15\xd1\x74\x6d\x21\x8e\xfd\x49\x1c\x36\xe5\xba\x85\x09\x41\x83\x10\xe8\x2a\x1a\x76\xce\x2f\xe6\x9d\xfc\x5f\x00\x00\x00\xff\xff\xf9\x8d\x5c\x37\x68\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1896, mode: os.FileMode(420), modTime: time.Unix(1487172548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

