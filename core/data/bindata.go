// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1488731745, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4b\x6f\xe3\x36\x10\xbe\xe7\x57\x10\xc4\x1e\xbb\x71\xd2\x62\x2f\x06\x7a\x50\xac\x34\x70\xe1\x87\xe0\xc7\xa1\x28\x02\x61\x42\x31\x0a\x61\x8a\x14\xc8\x91\x77\x5d\x41\xff\xbd\xa0\x24\x6f\x24\x51\xb6\xd7\x97\x30\x33\xdf\x3c\xf8\xcd\x83\x2a\xef\x08\xa1\x7f\xeb\x37\x3a\x25\xee\x48\x08\xdd\xf0\x54\x68\x45\xa7\x84\xa6\x52\xbf\x81\xa4\xbf\x35\xf2\x79\xe8\x64\x65\x39\x0f\xab\xea\x2c\x5b\x41\xc6\x7d\xe9\xee\x94\xd7\x52\xcb\xcd\x51\x30\x7e\x16\x47\x46\x68\x23\xf0\x44\xa7\xe4\xdb\x43\x2b\x0b\xa4\x0c\x70\xad\x98\xc3\xbf\x83\xb4\xbc\x95\x87\x80\xc0\xb8\x42\x6e\x2c\x9d\x92\x7f\x6b\x21\x21\x34\x61\x8f\xb4\x3e\xbf\xb6\xb8\x99\x56\x16\x0d\x08\x85\x5d\x5c\xd9\xfe\x25\x84\x2e\x76\x60\x52\x8e\x2e\x9d\x2f\x25\x20\x9a\xfb\x03\x37\x8a\xcb\x7b\x05\x19\x3f\x67\xdc\xdc\xfb\x13\x29\x85\x2a\x7e\x74\x75\xeb\x9c\x1b\x50\x89\xd3\xfd\x49\x5b\x71\xd5\x4b\x64\x07\xf6\xf0\x62\x74\x91\x5f\xc8\x63\x94\xa9\xf6\x0a\x85\x72\x51\xcb\xb2\x3e\x55\x55\x4f\xd7\xbd\x9e\x2a\xa4\xec\x28\x5d\xc8\x6e\xb4\x7e\xc4\x5e\x54\x04\x7b\xf8\xea\x85\x6e\x98\x36\xe2\xc8\x8d\x03\x25\x9a\x1d\xb8\x19\xea\x67\x5a\xbd\x8b\xf4\x67\x7b\x74\x34\x22\x83\xf4\x7c\x27\x77\xf4\x7c\x13\x42\xdf\xb5\x61\x3c\xce\x0b\x29\xe9\x94\xa0\x29\xb8\x87\x60\x3a\xcb\x5a\x6a\xdf\xc0\x7e\xf8\x2e\x14\xc7\xef\xda\x1c\xe2\x4c\x27\x75\xb4\x0f\x6d\xd1\x47\x81\x49\x6b\x2e\xe8\x97\x72\xb5\x5e\x06\x61\xbc\x7c\xde\x05\xf1\x76\xb6\x99\x47\xbb\x6d\x1c\xce\x37\xd5\xa4\xa7\x09\x9f\xa3\xc5\xfa\x9f\x16\x10\xaf\x82\xe5\x73\x45\x5f\x3d\xaf\xb9\x11\x47\x21\x79\xca\x93\x4b\xe9\xe7\xda\x60\x9c\x41\xee\x62\xbf\xf6\x94\xd5\x80\xc8\x67\x75\x1c\x63\x71\xb6\x9e\xad\xd7\xab\x78\x64\xba\x7c\xd0\x6c\x1d\x3e\xc7\xfb\xcd\xa2\x81\xce\x34\xd3\x5a\xcd\x74\xc2\xf7\x9b\xc5\x2d\xab\x5d\xf0\x32\xb4\xda\x41\x7a\xcb\x6a\x11\xac\x3c\xb3\x05\xa8\x6b\x76\x4f\xfb\xf9\x22\x8c\xa3\x60\x13\x2c\xb7\x5d\xd3\xa7\x42\xc8\x24\x02\x03\x99\xad\x2a\x7a\x95\xa9\x6d\xb3\x37\xea\x7a\x7a\x7c\x5d\x1c\xa4\x56\xbf\x83\xb6\x11\x5a\x80\x5f\xd4\x48\x1b\x5c\xc0\x1b\x77\x2d\x49\x99\x56\x8a\x33\xd4\x86\x12\x42\xfa\x59\x0d\x2c\xe9\x92\x23\x8c\x55\xd0\x6f\x25\xe7\xd8\x14\xea\xeb\x4f\xe7\xf7\x63\x8d\xdd\x69\x4e\x67\x30\x91\x9a\x81\x9c\x58\x66\x44\x8e\xf6\x3a\x43\x0b\x9d\x5e\x9e\xcb\x25\xfc\xf8\x4b\xc8\x9a\xbe\xc7\x07\x2f\x6a\xab\xdd\x8a\xff\xf8\xf2\xa9\x86\x5c\x8d\xb4\xe3\x59\x2e\x01\x9b\x62\x0c\x19\x09\x0c\x8a\x77\x60\x38\x5a\x29\x42\xe8\x0b\x47\xe4\x66\xab\x0b\xc3\x9a\xd1\x45\xcc\xed\x74\x32\x31\xf0\xfd\x3e\x15\xf8\x51\xbc\x15\x96\x1b\xa6\x15\x72\x85\xf7\x4c\x67\x13\xc5\x74\xc2\xed\x84\xd5\x2d\x33\xc9\xc0\x22\x37\x67\x4a\x6e\x0f\xf0\xf0\xb2\xf5\x6b\x26\x01\xc5\x91\x87\xdc\xe2\x4d\x96\x87\xf7\xdb\x70\x5b\xe7\x6e\x47\x07\x37\xda\x37\x5b\x3b\xda\x57\x95\x4f\x33\xcf\xb4\x39\xd5\x0c\x97\xe5\xf9\x9f\x11\x5c\x28\xec\xa1\x45\x35\xc7\x11\xcc\x7c\x1d\xb9\x51\xf2\x6b\xb9\x6a\x56\xe3\xf0\x11\x68\x7e\x7e\x3d\x5c\x5a\x4f\xa2\xae\x56\x59\xd6\x27\x3f\x58\x93\xd4\x49\x41\x26\x98\x1b\x14\x4b\xa7\xbe\xeb\xda\x3d\xa1\xed\x10\x75\x66\xa8\x1a\x81\xbe\x7a\xb2\x21\xea\xfa\xde\x0c\x85\xcd\x01\xd9\x47\x04\x27\xa9\xc1\x2d\xe2\xb2\xeb\xe0\xf3\xfc\xda\x7d\xcc\x2f\x54\xee\x72\xd5\x7e\xa5\x62\xb7\xaa\x35\x5a\xa9\x5e\x95\x3e\xaf\x5a\xf5\xb3\x45\x30\x18\x69\x29\xd8\x69\x98\xf1\xdc\x7d\x05\x1d\xc1\x6d\xab\x3f\x1e\x3e\x7f\xbd\x10\x01\x22\xcf\x72\xf4\x47\x9e\x86\x5c\x82\x73\xf9\xfb\xb7\x71\xcb\x65\xfb\xaa\x26\x35\x6e\x34\xbb\xf3\xde\xab\x46\x3f\x7c\xf6\x79\x02\xc8\x3b\x49\xd3\x2d\x42\x9a\xd6\x9f\x14\x8f\x7e\xba\x6e\xff\xb8\x57\x40\xca\x7a\xff\x3e\xde\x9d\x3d\x56\x77\xd5\xff\x01\x00\x00\xff\xff\x10\xce\xcc\xf6\x8c\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2700, mode: os.FileMode(420), modTime: time.Unix(1488731643, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

