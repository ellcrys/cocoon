// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1488009785, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4b\x6f\xe3\x36\x10\xbe\xef\xaf\x20\x88\x3d\x36\xb1\xb3\xc5\x5e\x0c\xf4\xe0\xb5\xd2\xc0\x85\x1f\x82\x1f\x87\xa2\x30\x8c\x31\xcd\xc8\x84\x29\x52\x20\x47\xde\x75\x05\xfd\xf7\x82\x94\x9c\x48\xa2\x9c\xd4\x97\x30\x33\xdf\xbc\xbe\xe1\x0c\x55\x7c\x21\x84\xfe\xa5\x0f\x74\x44\xdc\x91\x10\xba\xe2\x89\xd0\x8a\x8e\x08\x4d\xa4\x3e\x80\xa4\xbf\x55\xf2\x69\xe4\x64\x45\x31\x8d\xca\xf2\x26\x5b\x40\xca\x43\xe9\xe6\x9a\x79\xa9\xe5\xe6\x22\x18\xbf\x89\x63\x23\xb4\x11\x78\xa5\x23\xf2\x7d\x58\xcb\xc6\x52\x8e\x71\xa9\x98\xc3\xbf\x82\xb4\xbc\x96\x47\x80\xc0\xb8\x42\x6e\x2c\x1d\x91\x7f\xbc\x90\x10\x7a\x64\x4f\xd4\x9f\x77\x35\x6e\xa2\x95\x45\x03\x42\x61\x13\x57\xd4\x7f\x09\xa1\xb3\x0d\x98\x84\xa3\x4b\xe7\x6b\x01\x88\xe6\xf1\xcc\x8d\xe2\xf2\x51\x41\xca\x6f\x19\x57\x75\xbf\x23\xa5\x50\xf9\xaf\xa6\x6e\x99\x71\x03\xea\xe8\x74\x7f\xd0\x5a\x5c\xb6\x12\xd9\x80\x3d\xbf\x18\x9d\x67\x77\xf2\xe8\x65\xaa\x2e\x21\x57\x2e\x6a\x51\xf8\x53\x59\xb6\x74\xcd\xf2\x54\x2e\x65\x43\xe9\x42\x36\xa3\xb5\x23\xb6\xa2\x22\xd8\xf3\x43\x10\xba\x62\xda\x88\x0b\x37\x0e\x74\xd4\xec\xcc\x4d\x57\x3f\xd1\xea\x55\x24\x6f\xd7\xa3\xa1\x11\x29\x24\xb7\x9a\xdc\x31\xf0\x4d\x08\x7d\xd5\x86\xf1\x7d\x96\x4b\x49\x47\x04\x4d\xce\x03\x04\xd3\x69\x5a\x53\x7b\x00\x7b\x0a\x5d\x28\x8e\x3f\xb5\x39\xef\x53\x7d\xf4\xd1\x4e\xda\x62\x88\x02\x93\x78\x2e\xe8\xd7\x62\xb1\x9c\x8f\xa3\xfd\xfc\x79\x33\xde\xaf\x27\xab\x69\xbc\x59\xef\xa3\xe9\xaa\x1c\xb4\x34\xd1\x73\x3c\x5b\xfe\x5d\x03\xf6\x8b\xf1\xfc\xb9\xa4\xbb\xc0\x6b\x66\xc4\x45\x48\x9e\xf0\xe3\xbd\xf4\x33\x6d\x70\x9f\x42\xe6\x62\x77\x19\xf2\xd5\x29\xc5\x19\x6a\xf3\x70\x42\x74\xa0\xdf\x87\xc3\x61\x07\x56\xee\x5a\x82\xb2\xd3\x80\x67\x75\xe9\x63\x7f\xb2\x9c\x2c\x97\x8b\x7d\xcf\x54\x86\xa0\xc9\x32\x7a\xde\x6f\x57\xb3\x0a\x3a\xd1\x4c\x6b\x35\xd1\x47\xbe\x5d\xcd\x3e\xb3\xda\x8c\x5f\xba\x56\x1b\x48\x3e\xb3\x9a\x8d\x17\x81\xd9\x0c\x94\xb3\xfb\xb0\xd6\x75\xb5\x31\x6c\x1f\x9b\x6f\x97\x99\x79\x97\x36\xcc\x60\x03\xf5\x1d\xa8\xe9\x08\xfb\x19\x6b\x83\x33\x38\x70\x59\xf9\x69\xf5\x86\x10\xd2\xce\xad\x63\x4e\xe7\x1c\xa1\xaf\x13\xe1\x55\x72\xde\x4d\xae\x1e\xde\x22\x3c\xf6\x5d\xec\xc6\xe5\x74\x06\x03\xa9\x19\xc8\x81\x65\x46\x64\x68\x3f\xe6\x69\xa6\x93\xfb\x73\x39\x87\x5f\x7f\x0a\xe9\x49\x7c\x1a\x06\x51\x6b\xed\x5a\xfc\xcb\xe7\x3f\x3c\xe4\xc3\x48\x1b\x9e\x66\x12\xb0\x6a\x49\x97\x91\xb1\x41\xf1\x0a\x0c\x7b\xfb\x45\x08\x7d\xe1\x88\xdc\xac\x75\x6e\x58\x35\xba\x88\x99\x1d\x0d\x06\x06\x7e\x3e\x26\x02\x4f\xf9\x21\xb7\xdc\x30\xad\x90\x2b\x7c\x64\x3a\x1d\x28\xa6\x8f\xdc\x0e\xaa\x16\x0f\x52\xb0\xc8\xcd\x8d\x92\xcf\x07\xb8\x5b\xac\x7f\xcd\x24\xa0\xb8\xf0\x88\x5b\xfc\x94\xe5\x6e\x7d\x2b\x6e\x7d\xee\xb6\x77\x00\xe3\x6d\xb5\xb5\xe3\x6d\x59\x86\x34\xf3\x54\x9b\xab\x67\xb8\x28\x6e\xff\xf4\xe0\xa6\xcb\x78\x4d\x47\x24\xec\xd3\xa2\x5a\x7b\xdd\x05\x5f\xfd\x42\xae\x5d\xc8\x1f\xc2\x77\xe2\xdb\x30\xf0\xe6\xf5\xd1\x55\x41\x2a\x98\x9b\x01\x4b\x47\xa1\x53\xef\x98\xd0\x7a\x3e\xba\xe3\x51\xf6\xe0\x77\x81\xac\x8b\xfa\x78\xb5\x45\xc2\x66\x80\xec\x14\xc3\x55\x6a\x70\x3b\xb6\x68\x3a\x78\x3f\xef\x9a\xef\xf4\x9d\xa6\xdc\x6f\xc8\xff\x69\x86\xcb\xe5\x5c\x23\xaa\x63\x47\xdf\xd7\xa8\x56\x93\xde\x4b\x2d\xdb\xd9\x22\x18\x8c\xb5\x14\xec\xda\xcd\x78\xea\x3e\x70\x2e\x20\xeb\x77\xe1\xf6\x6b\x85\x18\x23\xf2\x34\xc3\x70\x9a\x69\xc4\x25\x38\x97\xdf\xbe\xf7\x5b\xce\xeb\x07\xf3\xe8\x71\xbd\xd9\xdd\x56\x5a\xd9\xfb\x4d\xb3\xcd\x8e\x80\xbc\x91\x34\x5d\x23\x24\x89\xff\x5a\x78\x0a\xd3\x75\xab\x25\x06\x03\x52\xfa\xfd\xfa\xf4\xe5\xe6\xb1\xfc\x52\xfe\x17\x00\x00\xff\xff\x2f\xc9\x1f\x52\x67\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2663, mode: os.FileMode(420), modTime: time.Unix(1488009757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

