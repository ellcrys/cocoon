// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487169984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\xcb\x6f\xfb\x36\x0c\xbe\xf7\xaf\x10\x84\x1d\x97\x57\x87\x5e\x02\xec\x90\xd9\x5d\x91\x21\x2f\x34\xc9\x69\x08\x0a\xd6\x66\x1d\x21\xb2\x64\x48\x4c\xd6\xcc\xf0\xff\xfe\x83\x64\xa7\xf1\x23\x69\x73\x09\xcd\xef\xa3\xf8\x91\xa2\x98\x3f\x30\xc6\xff\xd1\xef\x7c\xcc\x9c\xc9\x18\x7f\xc5\x44\x68\xc5\xc7\x8c\x27\x52\xbf\x83\xe4\xbf\x97\xfe\x69\xe8\x7c\x91\x8e\xb4\x56\xbd\x3c\x9f\x86\x45\x71\x81\x16\x90\xe2\x5d\x70\x73\xce\x3c\x68\xd1\x9c\x44\x84\x17\xf7\xca\x08\x6d\x04\x9d\xf9\x98\x3d\x0d\x2b\xdf\x44\xca\x09\x2d\x55\xe4\xf8\x1f\x20\x2d\x56\xfe\x10\x08\x22\x54\x84\xc6\xf2\x31\xfb\xd7\x3b\x19\xe3\x71\x34\xe2\xde\xde\x55\xbc\x40\x2b\x4b\x06\x84\xa2\x3a\x2f\xaf\xfe\x19\xe3\xb3\x0d\x98\x04\xc9\xc9\xf9\x2d\x07\x22\xd3\x3f\xa0\x51\x28\xfb\x0a\x52\xbc\x28\x2e\xbb\x70\x65\x4a\xa1\x8e\x9f\x75\x6c\x99\xa1\x01\x15\x3b\xec\x4f\x5e\xb9\x8b\x86\x90\x0d\xd8\xc3\x8b\xd1\xc7\xec\x8e\x8e\xef\x1a\x56\x55\x72\x54\x2e\x79\x9e\x7b\xab\x28\x1a\x58\xbd\x4a\x75\x94\xb2\x06\xba\xcc\xf5\xa4\xcd\xc4\xb7\x92\x13\xd8\x43\x57\x41\xd9\x77\x23\x4e\x68\x1c\x37\xd6\xd1\x01\x4d\x1b\x0f\xb4\xfa\x10\xc9\xd7\xe8\xd4\x10\x91\x42\xe2\x93\xe4\xf9\xd4\x99\x9d\xb3\x99\xcb\x9f\xa6\x55\x1b\xdf\xc1\xee\xbb\x04\x30\x89\x2f\x85\x0f\xa4\x8e\x40\x0e\x6c\x64\x44\x46\x76\x10\xe3\xa9\x17\x63\x26\xf5\xb9\x17\x69\xa5\x30\x22\x6d\x7a\xc3\xfe\xb0\xff\xd8\xb7\x7b\xbe\x6b\x1c\x53\xb4\x24\x3f\xab\xd3\x2d\xbd\xc1\x32\x58\x2e\x17\x6f\xf7\x67\xbc\xcb\x0d\x96\xe1\xf3\xdb\xf6\x75\x56\x56\x19\xf8\x98\x40\xc7\xb8\x7d\x9d\xfd\x14\xb5\x99\xbc\xb4\xa3\x36\x90\xfc\x14\x35\x9b\x2c\x3a\x61\x33\x50\x2e\xee\xdb\x92\xd7\xe5\xc3\xf3\xad\xdc\xb5\xb0\x39\x12\xb8\x7e\xb4\x63\x66\x3a\xb9\x7f\xb9\x73\xf8\xfc\x5b\x48\x7f\xe0\x68\xd8\x91\x5c\xa1\x6b\xf1\x3f\xce\xff\xf2\x94\x6f\xd5\x6d\x30\xcd\x24\xd0\x6d\x79\x13\x43\xe2\x03\xa2\xf2\x39\xb7\x75\x30\xc6\x5f\x90\x08\xcd\x5a\x1f\x8d\xdf\x19\x7c\x4f\x94\xd9\xf1\x60\x60\x49\x1b\x48\xb0\x9f\x68\x9d\x48\x84\x4c\xd8\x7e\xa4\xd3\xc1\xc1\xe8\x04\xd4\x0f\xf3\xd3\x2e\xc8\xaf\x44\x09\x24\x4e\x18\xa2\xf5\x1b\xa1\x39\x8f\xad\xee\xb7\x6b\x08\x85\xcd\x80\xa2\xfd\x0a\xce\x52\x43\xec\xbb\x5d\x63\x5c\xed\x5d\x7d\xfd\xa0\xf5\x45\xd9\x56\xff\x79\xb0\xda\x96\x6b\x61\xb5\x2d\x1a\xad\xe4\x73\x4c\xb5\x39\xfb\x96\xe7\xf9\xe5\xa3\xc5\x09\x85\x3d\x54\x8c\xd2\x6c\xe1\xd3\xe5\x6a\xcd\xc7\xac\x71\xa9\x7c\x81\xf4\x9f\x36\xe5\x56\xb9\x3e\xae\xa2\xa9\x96\xc0\xd0\x4a\x4b\x11\x9d\xdb\x8a\xa7\x6e\x6f\x9f\x40\xf2\x31\xfb\x63\x78\xfd\x35\x52\x4c\x88\x30\xcd\xa8\x3b\x51\x3c\x44\x09\xee\xc8\xc7\xa7\xdb\x91\x73\x1d\xfb\x9b\x8f\x3d\xef\xa6\xba\xaf\x19\xbf\xb9\xaa\xb7\x59\x0c\x84\x35\xd1\x7c\x4d\x90\x24\x7e\xed\x8d\xba\x72\xdd\x78\xaf\xc0\x80\x94\xe8\x2a\x1a\x3d\x5c\x4e\x2c\x1e\x8a\x5f\x01\x00\x00\xff\xff\xe5\xe5\x6f\x0e\x4c\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1868, mode: os.FileMode(420), modTime: time.Unix(1487169893, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

