// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487582231, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xcd\x6e\xe3\x36\x10\xbe\xe7\x29\x08\x62\x8f\x4d\xec\x6c\xb1\x17\x03\x3d\x68\x2d\x6f\xe0\x42\xb6\x05\xdb\x41\x51\x14\x81\x31\xa1\x19\x99\x30\x45\x0a\xe4\xc8\x59\x57\xd0\xbb\x17\x94\xe4\x8d\x24\xca\x49\x8b\x02\x9b\x4b\xe8\x99\x6f\xfe\xbe\x19\x0d\x59\xdc\x10\x42\x7f\xd7\xcf\x74\x42\xdc\x91\x10\xba\xe6\x89\xd0\x8a\x4e\x08\x4d\xa4\x7e\x06\x49\x7f\xa9\xe5\xf3\xd0\xc9\x8a\x62\x1e\x96\xe5\x45\xb6\x84\x94\xfb\xd2\xed\x39\xab\xa4\x96\x9b\x93\x60\xfc\x22\x8e\x8d\xd0\x46\xe0\x99\x4e\xc8\x97\x71\x23\x0b\xa4\x0c\x70\xa5\x98\xc3\xbf\x80\xb4\xbc\x91\x87\x80\xc0\xb8\x42\x6e\x2c\x9d\x90\xbf\x2a\x21\x21\x74\xcf\xee\x69\x75\x7e\x6a\x70\x53\xad\x2c\x1a\x10\x0a\xdb\xb8\xa2\xf9\x4f\x08\x8d\xb6\x60\x12\x8e\x2e\x9d\x4f\x05\x20\x9a\xbb\x23\x37\x8a\xcb\x3b\x05\x29\xbf\x64\x5c\xd7\xfd\x86\x94\x42\xe5\xdf\xdb\xba\x55\xc6\x0d\xa8\xbd\xd3\xfd\x46\x1b\x71\xd9\x49\x64\x0b\xf6\xf8\x60\x74\x9e\x5d\xc9\x63\x90\xa9\xa6\x84\x5c\xb9\xa8\x45\x51\x9d\xca\xb2\xa3\x6b\x97\xa7\x72\x29\x5b\x4a\x17\xb2\x1d\xad\x1b\xb1\x13\x15\xc1\x1e\x6f\xbd\xd0\x35\xd3\x46\x9c\xb8\x71\xa0\xbd\x66\x47\x6e\xfa\xfa\xa9\x56\x2f\x22\xf9\x31\x1e\x2d\x8d\x48\x21\xb9\xd4\xe4\x8e\x9e\x6f\x42\xe8\x8b\x36\x8c\xef\xb2\x5c\x4a\x3a\x21\x68\x72\xee\x21\x98\x4e\xd3\x86\xda\x67\xb0\x07\xdf\x85\xe2\xf8\xaa\xcd\x71\x97\xea\x7d\x15\xed\xa0\x2d\xfa\x28\x30\x49\xc5\x05\xfd\x54\x2c\x57\x8b\x20\xdc\x2d\x66\xdb\x60\xb7\x99\xae\xe7\xf1\x76\xb3\x0b\xe7\xeb\x72\xd4\xd1\x84\xb3\x38\x5a\xfd\xd9\x00\x76\xcb\x60\x31\x2b\xe9\x93\xe7\x35\x33\xe2\x24\x24\x4f\xf8\xfe\x5a\xfa\x99\x36\xb8\x4b\x21\x73\xb1\xfb\x0c\x55\xd5\x29\xc5\x19\x6a\x73\x7b\x40\x74\xa0\x5f\xc7\xe3\x71\x0f\x56\x3e\x75\x04\x65\xaf\x01\x33\x75\x1a\x62\x7f\xba\x9a\xae\x56\xcb\xdd\xc0\x57\xe9\x83\xa6\xab\x70\xb6\x7b\x5c\x47\x35\x74\xaa\x99\xd6\x6a\xaa\xf7\xfc\x71\x1d\x7d\x64\xb5\x0d\x1e\xfa\x56\x5b\x48\x3e\xb2\x8a\x82\xa5\x67\x16\x81\x72\x76\xef\xd6\xba\xa9\x37\x86\x1d\x62\xf3\xc7\x30\xb3\xca\xa5\xf5\x33\xd8\x42\x33\x03\x0d\x1d\x7e\x3f\x63\x6d\x30\x82\x67\x2e\x6b\x3f\x9d\xde\x10\x42\xba\xb9\xf5\xcc\xe9\x82\x23\x0c\x75\xc2\x1f\x25\xe7\xdd\xe4\xea\x56\x42\xae\xd8\x81\x9b\xbb\xa1\xb9\x6e\xf8\xfa\x36\x5f\xcf\xfe\x08\xa2\xa8\x6f\x5f\x57\x79\xfb\xf2\x3a\x68\xdc\x1a\x6c\x07\x1e\x49\xcd\x40\x8e\x2c\x33\x22\x43\xfb\x3e\xc7\x91\x4e\xae\x7f\xd3\x0b\xf8\xfe\x4d\xc8\xaa\x01\xf7\x63\x2f\x6a\xa3\xdd\x88\xbf\xf9\xe2\x6b\x05\x79\x37\xd2\x96\xa7\x99\x04\xac\xdb\xd9\x67\x33\x30\x28\x5e\x80\xe1\x60\xaf\x09\xa1\x0f\x1c\x91\x9b\x8d\xce\x0d\xab\x3f\x7b\xc4\xcc\x4e\x46\x23\x03\xaf\x77\x89\xc0\x43\xfe\x9c\x5b\x6e\x98\x56\xc8\x15\xde\x31\x9d\x8e\x14\xd3\x7b\x6e\x47\x35\x71\xa3\x14\x2c\x72\x73\xa1\xe4\xe3\x8f\xbf\x5f\x6c\x75\x13\x4a\x40\x71\xe2\x21\xb7\xf8\x1f\x59\xfe\xc9\x05\xbd\x33\x4b\xff\xbf\xb2\x7e\xe7\xd6\xdc\x56\x45\xd8\xc1\xb5\x14\x3f\xd6\x77\x59\xfc\x58\x96\xfe\x00\xf1\x54\x9b\x73\x35\x3b\x45\x71\xf9\x31\x80\x9b\xaf\xe2\x0d\x9d\x10\x7f\x02\x97\xf5\x65\xd0\xbf\xf6\xae\x91\xee\x42\x7e\x15\xd5\x8c\x7d\x1e\x7b\xde\x2a\x7d\x78\x56\x90\x0a\xe6\x36\x83\xa5\x13\xdf\x69\xe5\x98\xd0\x66\x6b\xf4\x97\x46\x39\x80\x7f\xf2\x64\x7d\xd4\xfb\x0b\x3f\x14\x36\x03\x64\x87\x18\xce\x52\x83\xbb\x79\x8a\xb6\x83\xb7\xf3\x53\xfb\xf5\x72\xa5\x29\xd7\x1b\xf2\x6f\x9a\xe1\x72\x39\x36\x88\xfa\xd8\xd3\x0f\x35\xaa\xd3\xa4\xb7\x52\xcb\x6e\xb6\x08\x06\x63\x2d\x05\x3b\xf7\x33\x9e\xbb\x67\xdf\x09\x64\x73\x5b\x5e\xfe\x3a\x21\x02\x44\x9e\x66\xe8\xef\x29\x1a\x72\x09\xce\xe5\xe7\x2f\xc3\x96\x8b\xe6\x19\xb1\xaf\x70\x83\xd9\x5d\x16\x7d\x39\xf8\xd2\x7b\xcc\xf6\x80\xbc\x95\x34\xdd\x20\x24\x49\xf5\x86\xba\xf7\xd3\x75\x4b\x33\x06\x03\x52\x56\xb7\xce\xfd\xcd\xc5\x63\x79\x53\xfe\x13\x00\x00\xff\xff\x68\x49\x50\x10\x7d\x0b\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2941, mode: os.FileMode(420), modTime: time.Unix(1487581931, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

