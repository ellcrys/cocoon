// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487435421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xdd\x8f\xe2\x36\x10\x7f\xbf\xbf\xc2\xb2\xee\xb1\xbb\xb0\x57\xdd\x0b\x52\x1f\x38\x42\x57\x54\x40\x22\x3e\x1e\xaa\x0a\xa1\xc1\xcc\x06\x0b\xc7\x8e\x6c\x87\x3b\x1a\xe5\x7f\xaf\xec\x84\x6e\xbe\x60\x5b\x55\xea\xbe\xac\x99\xf9\xcd\xe7\x6f\x32\x76\xfe\x89\x10\xfa\x9b\x3a\xd0\x11\x71\x47\x42\xe8\x0a\x63\xae\x24\x1d\x11\x1a\x0b\x75\x00\x41\x7f\x2a\xe5\xb3\xc0\xc9\x98\x62\x4a\xc9\xa7\x3c\x9f\x05\x45\x71\x53\x2d\x21\xc1\xbb\xca\xcd\x35\xf5\x4a\x83\xfa\xc2\x19\xde\xc4\x91\xe6\x4a\x73\x7b\xa5\x23\xf2\x75\x58\xc9\xc6\x42\x8c\x6d\x28\x99\xc3\xbf\x81\x30\x58\xc9\x03\xb0\xc0\x50\x5a\xd4\x86\x8e\xc8\x1f\x5e\x48\x08\x3d\xb2\x17\xea\xcf\xbb\x0a\x37\x51\xd2\x58\x0d\x5c\xda\x3a\x2e\xaf\xfe\x13\x42\xe7\x1b\xd0\x31\x5a\x97\xce\xe7\x1c\xac\xd5\xcf\x67\xd4\x12\xc5\xb3\x84\x04\x6f\x19\x97\x5d\x78\x47\x0a\x2e\xb3\x1f\x75\x5d\x98\xa2\x06\x79\x74\xba\x5f\x68\x25\x2e\x1a\x89\x6c\xc0\x9c\x5f\xb5\xca\xd2\x3b\x79\x3c\x6a\x58\x55\x49\x26\x5d\xf0\x3c\xf7\xa7\xa2\x68\xe8\xea\x55\xca\x4c\x88\x9a\xd2\x45\xae\x07\x6d\x06\xee\x0b\x6e\xc1\x9c\xbb\x19\x94\x7d\xd7\xfc\x82\xda\x61\x8f\x8a\x9d\x51\xb7\xf5\x13\x25\xdf\x78\xfc\xf7\xe8\xd4\x34\x3c\x81\xd8\x07\xc9\xf3\x99\x3b\x76\x7c\x13\x42\xdf\x94\x66\xb8\x4f\x33\x21\xe8\x88\x58\x9d\x61\x07\xc1\x54\x92\x54\x8d\x3e\x80\x39\x75\x5d\x80\x8e\x7d\xb1\xf4\x73\xbe\x0c\x17\xe3\x60\xbf\x98\x6e\xc6\xfb\xf5\x64\x35\x8b\x36\xeb\x7d\x30\x5b\x15\x83\x86\x26\x98\x46\xf3\xf0\xf7\x0a\xb0\x5f\x8e\x17\xd3\x82\xee\x3a\x5e\x53\xcd\x2f\x5c\x60\x8c\xc7\x7b\x89\xa5\x4a\xdb\x7d\x02\xa9\x8b\xdd\xae\xdd\xe7\x2d\x25\x32\xab\xf4\xd3\xc9\x5a\x07\xfa\x79\x38\x1c\xb6\x60\xc5\xae\x21\x28\x5a\xad\x9d\xca\x4b\x5f\x5f\x27\xe1\x24\x0c\x97\xfb\xfb\xdf\x62\x17\x3b\x09\x83\xe9\x7e\xbb\x9a\x97\x6c\x4c\xbc\xcd\x44\x1d\x71\xbb\x9a\x7f\x64\xb5\x19\xbf\xb6\xad\x36\x10\x7f\x64\x35\x1f\x2f\x3b\x66\x73\x90\xce\xee\x61\xc9\xeb\x72\x41\x98\xbe\xa6\xb6\x86\xd6\x74\x33\xd8\x40\x35\x0a\x55\x3b\xba\xb4\x46\x4a\xdb\x39\x1c\x50\x94\x7e\x1a\x14\x11\x42\x9a\xb9\xb5\xcc\xe9\x02\x2d\xf4\x11\xd2\x9d\x28\xe7\x5d\x67\xf2\x49\x40\x26\xd9\x09\xf5\x73\xdf\xe0\x56\xfd\x7a\x5d\x85\xdb\x68\xdd\xb6\xae\x78\x8d\xfd\x02\xe9\x35\xaf\x4d\xb8\x33\x18\x08\xc5\x40\x0c\x0c\xd3\x3c\xb5\xe6\x71\x97\xe7\x2a\xbe\xff\xd9\x2e\xe0\xc7\xaf\x5c\x78\x0a\x5e\x86\x9d\xa8\x95\x76\xcd\xff\xc4\xc5\x37\x0f\x79\x18\x69\x83\x49\x2a\xc0\x96\x84\xb6\xfb\x39\xd6\x96\xbf\x01\xb3\xbd\x6c\x13\x42\x5f\xd1\x5a\xd4\x6b\x95\x69\x7f\x1b\x50\xc7\x92\x19\x0d\x06\x1a\xbe\x3f\xc7\xdc\x9e\xb2\x43\x66\x50\x33\x25\x2d\x4a\xfb\xcc\x54\x32\x90\x4c\x1d\xd1\x0c\xca\xe6\x0d\x12\x30\x16\xf5\xad\x25\x1f\x6f\x81\x76\xb1\xfe\x22\x14\x60\xf9\x05\x03\x34\xf6\x5f\x76\xf9\x7f\x2e\xe8\xee\x34\xfd\xf7\xba\xda\xbc\xad\xd0\xf8\x12\x4c\xef\x76\x8a\xb6\xe5\x9d\x15\x6d\x8b\xa2\x3b\x3e\x98\x28\x7d\xf5\x93\x93\xe7\xb7\x1f\x3d\xb8\x59\x18\xad\xe9\x88\x74\xe7\x6f\x89\xf6\xbb\xd2\x9d\xeb\xed\x5e\xcb\x5d\xc8\x6f\xdc\x4f\xd8\x97\x61\xc7\x9b\xd7\x07\x57\x09\x09\x67\x6e\x33\x18\x3a\xea\x3a\xf5\x8e\x09\xad\xb6\x46\x7b\x69\x14\x3d\xf8\x5d\x47\xd6\x46\x3d\xde\xfb\x01\x37\x29\x58\x76\x8a\xe0\x2a\x14\xb8\x0b\x28\xaf\x3b\x78\x3f\xef\xea\x8f\x95\x3b\xa4\xdc\x27\xe4\x9f\x90\xe1\x72\x39\x57\x88\xf2\xd8\xd2\xf7\x11\xd5\x20\xe9\xbd\xd4\xa2\x99\xad\x05\x6d\x23\x25\x38\xbb\xb6\x33\x9e\xb9\x57\xde\x05\x44\x75\x69\xde\xfe\x1a\x21\xc6\xd6\x62\x92\xda\xee\x96\xa2\x01\x0a\x70\x2e\xbf\x7c\xed\xb7\x5c\xa8\xa3\xff\xf8\x8e\x1e\xd7\x9b\xdd\x6d\xd1\x17\xbd\x0f\xbb\x6d\x7a\x04\x8b\xb5\xa4\xe9\xda\x42\x1c\xfb\x47\xd2\x4b\x37\x5d\xb7\x32\x23\xd0\x20\x84\xbf\x75\x5e\x3e\xdd\x3c\x16\x9f\x8a\xbf\x02\x00\x00\xff\xff\xe7\x1f\xcd\xdf\x7a\x0b\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2938, mode: os.FileMode(420), modTime: time.Unix(1487435415, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

