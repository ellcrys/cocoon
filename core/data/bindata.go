// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487173809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\xcb\x6e\xdb\x30\x10\xbc\xe7\x2b\x08\xa2\xc7\xfa\xd5\x20\x17\x03\x3d\xb8\x76\x1a\xb8\xf0\x0b\x7e\x9c\x0a\x23\xd8\x48\x1b\x99\x30\x45\x0a\xe4\xda\x8d\x2b\xe8\xdf\x0b\x52\x72\x22\x4b\xb2\x53\x5f\x4c\xed\xcc\x72\x67\x56\x4b\x2a\xbd\x63\x8c\xff\xd2\x2f\xbc\xcf\xdc\x92\x31\xbe\xc4\x48\x68\xc5\xfb\x8c\x47\x52\xbf\x80\xe4\x5f\xf3\xf8\x78\xe4\x62\x81\x0e\xb4\x56\xad\x34\x1d\x8f\xb2\xec\x0c\xcd\x20\xc6\xab\xe0\xfa\x94\x78\xd0\xa2\x39\x8a\x00\xcf\xe1\x85\x11\xda\x08\x3a\xf1\x3e\x7b\xe8\x16\xb1\x81\x94\x03\x9a\xab\xc0\xf1\x5f\x41\x5a\x2c\xe2\x23\x20\x08\x50\x11\x1a\xcb\xfb\xec\xb7\x0f\x32\xc6\xc3\xa0\xc7\xfd\x7a\x5b\xf0\x86\x5a\x59\x32\x20\x14\x95\x79\x69\xf1\xcf\x18\x9f\xac\xc1\x44\x48\x4e\xce\x97\x14\x88\x4c\x7b\x8f\x46\xa1\x6c\x2b\x88\xf1\xac\x38\xef\xc2\x07\x53\x0a\x75\x78\x2b\x63\xf3\x04\x0d\xa8\xd0\x61\xdf\x79\x11\xce\x2e\x84\xac\xc1\xee\x9f\x8c\x3e\x24\x57\x74\xdc\x6a\x58\xe1\xe4\xa0\x5c\xf1\x34\xf5\xab\x2c\xbb\xc0\xca\x2e\xd5\x41\xca\x12\xe8\x2a\x97\x8b\x5e\x16\x6e\x2a\x4e\x60\xf7\x75\x05\x79\xdf\x8d\x38\xa2\x71\xdc\x50\x07\x7b\x34\x55\x7c\xa8\xd5\xab\x88\xde\x47\xa7\x84\x88\x18\x22\x5f\x24\x4d\xc7\x6e\x59\xdb\x9b\xb9\xfa\x71\x5c\xb4\xf1\x05\xec\xae\x4e\x00\x13\x79\x2b\xbc\x23\x75\x00\xb2\x63\x03\x23\x12\xb2\x9d\x10\x8f\xad\x10\x13\xa9\x4f\xad\x40\x2b\x85\x01\x69\xd3\xea\xb6\xbb\xed\xfb\xb6\xdd\xf1\xed\xc5\x36\x59\x45\xf2\xa3\x3a\x36\xe9\x1d\xce\x87\xf3\xf9\xec\xf9\xfa\x8c\xd7\xb9\xc3\xf9\xe8\xf1\x79\xb3\x9c\xe4\x2e\x87\x3e\x67\xa8\x43\xdc\x2c\x27\x9f\x65\xad\x07\x4f\xd5\xac\x35\x44\x9f\x65\x4d\x06\xb3\x5a\xda\x04\x94\xcb\xbb\x69\x79\x95\x1f\x3c\xdf\xca\x6d\x05\x9b\x22\x81\xeb\x47\x35\x67\xa2\xa3\xeb\x2f\x77\x0a\x6f\x3f\x85\xf4\x1b\xf6\xba\x35\xc9\x05\xba\x12\x7f\x71\xfa\xc3\x53\x6e\xaa\x5b\x63\x9c\x48\xa0\x66\x79\x03\x43\xe2\x15\x82\xfc\x38\x57\x75\x30\xc6\x9f\x90\x08\xcd\x4a\x1f\x8c\xbf\x33\xf8\x8e\x28\xb1\xfd\x4e\xc7\x92\x36\x10\x61\x3b\xd2\x3a\x92\x08\x89\xb0\xed\x40\xc7\x9d\xbd\xd1\x11\xa8\x4f\xe6\xa7\x6a\xc8\x5f\x89\x12\x48\x1c\x71\x84\xd6\xdf\x08\x97\xf3\x58\xe9\x7e\xd5\xc3\x12\xad\xd7\x67\x1b\xe7\x6e\xb1\xc9\x4f\xf9\x62\x93\x65\xf5\x56\x62\xac\xcd\xc9\x77\x31\x4d\xcf\x0f\x0d\xbc\xf1\x7c\xb1\xe2\x7d\x56\x7f\x17\x33\xa4\x3f\xda\xe4\x17\xc2\xed\x73\x31\x12\x36\x01\x0a\x76\x0b\x38\x49\x0d\xa1\x9f\x89\x12\xe3\x63\xbd\x2d\x5f\x92\x57\xac\x5d\xb7\xf5\x3f\x96\x9c\x96\x7d\xc1\xc8\x97\x15\xbc\xc9\xee\x15\xab\xd9\xa5\x5a\x02\x43\x0b\x2d\x45\x70\xaa\x2a\x1e\xbb\xaf\xcb\x11\x24\xef\xb3\xfb\xee\xc7\xef\xa2\xc4\x80\x08\xe3\x84\xea\x73\xcf\x47\x28\xc1\x6d\xf9\xed\xa1\x39\x73\xaa\x43\x3f\x9f\xa1\xe7\x35\xaa\x7b\x3f\x89\x8d\x1f\x94\x4d\x12\x02\x61\x49\x34\x5f\x11\x44\x91\xbf\x9c\x7b\x75\xb9\xee\x10\x2e\xc0\x80\x94\xe8\x1c\xf5\xee\xce\x3b\x66\x77\xd9\xbf\x00\x00\x00\xff\xff\xc3\xcd\x93\x3f\xf2\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2034, mode: os.FileMode(420), modTime: time.Unix(1487173792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

