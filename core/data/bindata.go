// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487097670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x6f\xdb\x30\x0c\xbd\xf7\x57\x08\xc2\x8e\x6b\xd2\x6c\xe8\x25\xc0\x0e\x99\xdd\x15\x19\xf2\x85\x26\x39\x0d\x41\xc1\xda\xac\x23\x44\x96\x0c\x89\xc9\x9a\x19\xfe\xef\x83\x64\xa7\xf1\x47\xd2\xe6\x12\x9a\xef\x51\x7c\xa4\x28\xe6\x37\x8c\xf1\xdf\xfa\x85\x0f\x99\x33\x19\xe3\x4f\x98\x08\xad\xf8\x90\xf1\x44\xea\x17\x90\xfc\x6b\xe9\x1f\x87\xce\x17\xe9\x48\x6b\x75\x9b\xe7\xe3\xb0\x28\x4e\xd0\x0c\x52\xbc\x0a\xae\x8e\x99\x07\x2d\x9a\x83\x88\xf0\xe4\x5e\x18\xa1\x8d\xa0\x23\x1f\xb2\xfb\xbb\xca\x37\x92\x72\x44\x73\x15\x39\xfe\x2b\x48\x8b\x95\x3f\x04\x82\x08\x15\xa1\xb1\x7c\xc8\xfe\x78\x27\x63\x3c\x8e\x06\xdc\xdb\x9b\x8a\x17\x68\x65\xc9\x80\x50\x54\xe7\xe5\xd5\x3f\x63\x7c\xb2\x02\x93\x20\x39\x39\x5f\x72\x20\x32\xbd\x1d\x1a\x85\xb2\xa7\x20\xc5\x93\xe2\xb2\x0b\x67\xa6\x14\x6a\xff\x56\xc7\xe6\x19\x1a\x50\xb1\xc3\x7e\xf0\xca\x5d\x34\x84\xac\xc0\xee\x1e\x8d\xde\x67\x57\x74\x7c\xd4\xb0\xaa\x92\xbd\x72\xc9\xf3\xdc\x5b\x45\xd1\xc0\xea\x55\xaa\xbd\x94\x35\xd0\x65\xae\x27\x6d\x26\xbe\x94\x9c\xc0\xee\xba\x0a\xca\xbe\x1b\x71\x40\xe3\xb8\xb1\x8e\x76\x68\xda\x78\xa0\xd5\xab\x48\xde\x47\xa7\x86\x88\x14\x12\x9f\x24\xcf\xc7\xce\xec\x9c\xcd\x5c\xfe\x34\xad\xda\xf8\x02\x76\xdb\x25\x80\x49\x7c\x29\xbc\x2f\x75\x04\xb2\x1f\xe3\xe1\x36\xc6\x4c\xea\xe3\x6d\xa4\x95\xc2\x88\xb4\xe9\xd9\x2d\xdf\x34\x02\x8b\x96\xc8\x07\x75\xb8\xa4\x30\x98\x07\xf3\xf9\xec\xf9\xfa\x54\x77\xb9\xc1\x3c\x7c\x78\x5e\x3f\x4d\xca\xba\x02\x1f\x13\xe8\x18\xd7\x4f\x93\xcf\xa2\x56\xa3\xc7\x76\xd4\x0a\x92\xcf\xa2\x26\xa3\x59\x27\x6c\x02\xca\xc5\x7d\x58\xf2\xb2\x7c\x6a\xbe\x79\x9b\x16\x36\x45\x02\xd7\x8f\x76\xcc\x44\x27\xd7\xaf\x73\x0a\x6f\xbf\x84\xf4\x07\x0e\xee\x3a\x92\x2b\x74\x29\xfe\xe1\xf4\xa7\xa7\x7c\xa8\x6e\x85\x69\x26\x81\x2e\xcb\x1b\x19\x12\xaf\x10\x95\x0f\xb8\xad\x83\x31\xfe\x88\x44\x68\x96\x7a\x6f\xfc\x96\xe0\x5b\xa2\xcc\x0e\xfb\x7d\x4b\xda\x40\x82\xbd\x44\xeb\x44\x22\x64\xc2\xf6\x22\x9d\xf6\x77\x46\x27\xa0\xae\x4e\x4e\xbb\x14\xbf\xfe\x24\x90\x38\x60\x88\xd6\xbf\xfe\x72\xf6\x5a\xfd\x6e\xab\x0e\x85\xcd\x80\xa2\xed\x02\x8e\x52\x43\xec\xfb\x5b\x63\x9c\xed\x4d\x7d\xc5\xa0\xf5\x65\xd8\x56\xc7\x79\xb0\x58\x97\x4f\x7f\xb1\x2e\x1a\xcd\xe3\x53\x4c\xb5\x39\xfa\x26\xe7\xf9\xe9\xa3\xc5\x09\x85\xdd\x55\x8c\xd2\x6c\xe1\xe3\xf9\x62\xc9\x87\xac\x71\x8d\x7c\x86\xf4\x57\x9b\x72\x73\x9c\x9f\x53\xd1\x54\x4b\x60\x68\xa1\xa5\x88\x8e\x6d\xc5\x63\xb7\x9b\x0f\x20\xf9\x90\x7d\xbf\x3b\xff\x1a\x29\x46\x44\x98\x66\xd4\x9d\x21\x1e\xa2\x04\x77\xe4\xb7\xfb\xcb\x91\x53\x1d\xfb\xbb\x8e\x3d\xef\xa2\xba\xf7\xa9\xbe\xb8\x8e\xd7\x59\x0c\x84\x35\xd1\x7c\x49\x90\x24\x7e\xb5\x0d\xba\x72\xdd\x40\x2f\xc0\x80\x94\xe8\x2a\x1a\xdc\x9c\x4e\x2c\x6e\x8a\xff\x01\x00\x00\xff\xff\x2d\xe1\xf3\x05\x30\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1840, mode: os.FileMode(420), modTime: time.Unix(1487097192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

