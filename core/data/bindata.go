// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1486894730, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\xc1\x8e\xda\x30\x10\xbd\xf3\x15\x96\xd5\x63\x85\xa0\xd5\x5e\x22\xf5\x40\x49\x5b\x51\x2d\x4b\x54\xe0\x54\x71\x98\x4d\x86\xd4\xc2\xb1\x23\x67\x60\x97\x5a\xf9\xf7\x95\x9d\xb0\x38\x21\x2c\x17\x86\x79\xcf\x7e\x6f\x86\x67\x3b\x62\x8c\xff\xd6\xcf\x3c\x62\xae\x64\x8c\xff\xc1\x5c\x68\xc5\x23\xc6\x73\xa9\x9f\x41\xf2\xcf\x4d\x7f\x11\xbb\x5e\xaa\x53\xad\xd5\xd8\xda\x45\x5c\xd7\x17\xe8\x09\x0a\xbc\x0b\x6e\xce\xa5\x07\x2b\x34\x27\x91\xe2\xa5\x9d\x18\xa1\x8d\xa0\x33\x8f\xd8\xc3\xa4\xed\xcd\xa4\x9c\xd1\x4a\xa5\x8e\xbf\x07\x59\x61\xdb\x8f\x81\x20\x45\x45\x68\x2a\x1e\xb1\xbf\xbe\xc9\x18\xcf\xd2\x29\xf7\xf5\xae\xe5\xcd\xb5\xaa\xc8\x80\x50\x14\xf2\x6c\xfb\xcd\x18\x7f\xdc\x80\xc9\x91\x9c\x9d\x4f\x16\x88\xcc\xf8\x80\x46\xa1\x1c\x2b\x28\xf0\xe2\xb8\xd9\xc2\x95\x29\x85\x3a\xbe\x86\xd8\xaa\x44\x03\x2a\x73\xd8\x37\xde\xb6\xeb\x8e\x91\x0d\x54\x87\x5f\x46\x1f\xcb\x3b\x3e\x3e\x5a\x58\x3b\xc9\x51\x39\x71\x6b\x7d\x55\xd7\x1d\x2c\x9c\x52\x1d\xa5\x0c\x40\xa7\x1c\x8a\x76\x85\x3b\xe2\x20\x4b\xa1\x30\x50\x6d\x76\x6d\xc4\x09\x8d\xc3\x33\x9d\x1e\xd0\xf4\xf1\xb9\x56\x7b\x91\xbf\xc7\x25\x40\x44\x01\xb9\xbf\xd8\xda\x85\x2b\x3b\x13\xb5\x9c\x54\x17\x45\xbb\xba\xf2\x25\xe3\x1d\xb8\xee\x29\xfd\x50\x27\x27\xd3\x6f\xaf\x9b\x1c\xf9\x21\x77\x3d\x6c\x89\x04\x43\x67\x1e\x75\x7e\xdf\xf7\x12\x5e\x7f\x0a\xe9\x2f\x9c\x4e\x6e\x1c\xb7\xe8\x5a\xfc\xc7\xe5\x77\x4f\xf9\xd0\xf4\x06\x8b\x52\x02\x0d\xdb\x9b\x19\x12\x7b\x48\x69\x10\x8c\x45\x55\x02\xa5\xff\x12\x38\x4b\x0d\x99\x1f\x23\x60\x5c\xeb\x5d\x18\x53\xac\xf4\xd1\x34\xdb\x08\x07\xe3\xf3\x64\xdb\xc4\x27\xd9\xd6\x1d\x8f\x7c\x89\x85\x36\x67\x3f\x8b\xb5\x97\x1f\x3d\x4e\x2c\xaa\x43\xcb\x68\xca\x1e\xbe\x58\x25\x6b\x1e\xb1\xce\xb6\xf8\x13\xd2\x8b\x36\x4d\xfa\x76\xa3\x81\x05\x39\xb7\x04\x86\x12\x2d\x45\x7a\xee\x3b\x5e\xb8\xf7\x7d\x02\xc9\x23\xf6\x75\x72\xfd\x74\x24\x66\x44\x58\x94\x74\xfb\x57\xf1\x18\x25\xb8\x2b\xbf\x3c\x0c\x9f\x5c\xea\xcc\x67\x33\xf3\xbc\x41\x77\xef\xe1\x19\x7c\xd2\xdb\x32\x03\xc2\xc0\x34\x5f\x13\xe4\xb9\x7f\x2a\xd3\x5b\xbb\x2e\x37\x09\x18\x90\x12\xdd\x44\xd3\xd1\xe5\xc6\x7a\x54\xbf\x05\x00\x00\xff\xff\xcf\xb7\xc3\xa4\x74\x05\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1396, mode: os.FileMode(420), modTime: time.Unix(1486894682, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

