// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1486981760, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4f\x8f\xda\x3e\x10\xbd\xf3\x29\x2c\xeb\x27\x2e\xbf\x2e\x2c\xad\xf6\x82\xd4\x03\x85\x6d\x45\x05\x4b\xc4\x9f\x53\x85\x56\x83\x33\x1b\x2c\x1c\x3b\xb2\x07\xba\x34\xca\x77\xaf\x9c\x84\xdd\x24\x64\x69\x2e\x0c\xf3\x9e\x67\xde\x3c\xff\x49\x3b\x8c\xf1\x9f\x66\xc7\x87\xcc\x87\x8c\xf1\x25\x46\xd2\x68\x3e\x64\x3c\x52\x66\x07\x8a\x7f\x2a\xf2\xd3\x89\xcf\x09\x23\x8c\xd1\xbd\x34\x9d\x4e\xb2\xec\x02\x3d\x41\x8c\x1f\x82\xeb\x73\x92\x83\x0e\xed\x49\x0a\xbc\xa4\x03\x2b\x8d\x95\x74\xe6\x43\xf6\x70\x5f\xe6\x46\x4a\x8d\x68\xa1\x85\xe7\xbf\x80\x72\x58\xe6\x27\x40\x20\x50\x13\x5a\xc7\x87\xec\x57\x9e\x64\x8c\x87\x62\xc0\xf3\x78\x5b\xf2\xc6\x46\x3b\xb2\x20\x35\x55\x79\x69\xf9\xcb\x18\x9f\xad\xc1\x46\x48\x5e\xce\x7f\x29\x10\xd9\xde\x01\xad\x46\xd5\xd3\x10\xe3\x45\x71\xe1\xc2\x3b\x53\x49\x7d\x7c\xad\x62\x8b\x04\x2d\xe8\xd0\x63\x5f\x79\x99\xce\x6a\x42\xd6\xe0\x0e\x3f\xac\x39\x26\x1f\xe8\xb8\x65\x58\x39\xc9\x51\xfb\xe6\x69\x9a\x47\x59\x56\xc3\xaa\x53\xea\xa3\x52\x15\xd0\x77\xae\x36\xad\x37\x6e\x6b\x4e\xe0\x0e\xd7\x0a\x0a\xdf\xad\x3c\xa1\xf5\xdc\xd0\x88\x03\xda\x26\x3e\x36\xfa\x45\x46\x6f\x47\xa7\x82\xc8\x18\xa2\xbc\x49\x9a\x4e\x7d\x78\x55\x9b\xf9\xfe\x71\x5c\xda\x18\x49\x62\x42\x19\x8d\x6c\x4f\x94\xb8\x61\xbf\x1f\x49\xda\x1f\x77\x3d\x61\xe2\xbe\x16\x26\x44\xd7\x2f\xe4\xb2\xbb\x1d\x8b\xc1\x11\x5a\xd6\xed\x36\x2a\x56\x3f\xb1\x8f\x4d\xc8\xfe\x7f\x65\xc5\xb2\xbe\x13\x56\x26\xe4\xfa\x91\xb9\x2b\x32\x77\x21\x26\xca\x9c\x7b\x6e\xcf\xba\x5d\x76\xa3\x52\xaf\xff\xef\x12\xbc\xb6\x3e\x6b\xd8\xf4\xa8\x4f\x6d\x1e\x8d\x17\xe3\xc5\xe2\xe9\x79\xf9\x18\x2c\x9e\x37\xcb\xd9\xaa\xb0\x6b\x9c\x97\x5e\x62\x62\x36\xcb\x59\x96\xdd\xae\xbc\x2a\xee\x54\xbe\xe1\xdb\x06\x36\x47\x02\xdf\xb6\xb9\x66\x66\xa2\x8f\xf7\x6d\x0e\xaf\xdf\xa5\xca\x0b\x0e\xee\xaf\x76\xac\x44\x57\xf2\x0f\xce\xbf\xe5\x94\x9b\xea\xd6\x18\x27\x0a\xa8\x5d\xde\xc8\x92\x7c\x01\x41\xad\xe0\x44\xba\x04\x48\xec\x03\x38\x2b\x03\x61\x3e\x46\x85\xf1\x1e\x6f\xab\x57\x16\x9d\x39\xda\xc2\x8d\xea\x60\x7c\x1c\x6c\x8a\xab\x14\x6c\xb2\x9a\x46\x3e\xc7\xd8\xd8\x73\x3e\x4b\x9a\x5e\xfe\x34\x38\x13\xe9\x0e\x25\xa3\x08\x1b\xf8\x74\x11\xf8\xad\xab\xb9\xc5\x9f\x90\x7e\x1b\x5b\xdc\xc4\x6d\xa7\xc5\x20\xaf\x96\xc0\x52\x60\x94\x14\xe7\xa6\xe2\xa9\x7f\xeb\x4e\xa0\xf8\x90\x7d\xb9\x7f\xff\x6a\x2d\x46\x44\x18\x27\x74\xbd\x55\x7c\x82\x0a\x7c\xc9\xcf\x0f\xed\x2b\xe7\x26\xcc\xef\x66\x98\xf3\x5a\xd5\xbd\x1d\x9e\xd6\xe7\x6d\x93\x84\x40\x58\x11\xcd\x57\x04\x51\x94\x3f\x15\x83\x6b\xb9\xfe\xdc\x04\x60\x41\x29\xf4\x13\x0d\x3a\x97\x8a\x59\x27\xfb\x1b\x00\x00\xff\xff\x48\xd8\xba\x60\x80\x06\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1664, mode: os.FileMode(420), modTime: time.Unix(1486981755, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

