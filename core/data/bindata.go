// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487162056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x5d\x6f\xe2\x3a\x10\x7d\xef\xaf\xb0\xac\xfb\x78\x0b\xe5\x5e\xf5\x05\x69\x1f\xd8\xd0\xad\x58\xf1\xa5\x02\x4f\x2b\x54\x4d\x93\xa9\x6b\xe1\xd8\x91\x3d\xb0\x65\xa3\xfc\xf7\x95\x9d\x50\xf2\x01\x2d\x2f\x4c\xe6\x9c\xf1\x9c\x39\xfe\xc8\x6f\x18\xe3\x3f\xcd\x0b\x1f\x32\x1f\x32\xc6\x9f\x50\x48\xa3\xf9\x90\x71\xa1\xcc\x0b\x28\xfe\x6f\x99\x9f\x8c\x7d\x2e\x36\xb1\x31\xfa\x36\xcf\x27\xe3\xa2\x38\x41\x73\x48\xf1\x2a\xb8\x3e\x66\x01\x74\x68\x0f\x32\xc6\x53\x7a\x69\xa5\xb1\x92\x8e\x7c\xc8\xee\xef\xaa\xdc\x48\xa9\x11\x2d\x74\xec\xf9\xaf\xa0\x1c\x56\xf9\x31\x10\xc4\xa8\x09\xad\xe3\x43\xf6\x2b\x24\x19\xe3\x49\x3c\xe0\x21\xde\x56\xbc\xc8\x68\x47\x16\xa4\xa6\x3a\x2f\xaf\xfe\x19\xe3\xd3\x35\x58\x81\xe4\xe5\xfc\x93\x03\x91\xed\xed\xd0\x6a\x54\x3d\x0d\x29\x9e\x14\x97\x2e\x9c\x99\x4a\xea\xfd\x7b\x1d\x5b\x64\x68\x41\x27\x1e\xfb\xc6\xab\x74\xd1\x10\xb2\x06\xb7\x7b\xb4\x66\x9f\x5d\xd1\xf1\x99\x61\xd5\x24\x7b\xed\x9b\xe7\x79\x88\x8a\xa2\x81\xd5\xa7\xd4\x7b\xa5\x6a\xa0\xef\x5c\x6f\xda\x6c\x7c\xa9\x39\x81\xdb\x75\x15\x94\xbe\x5b\x79\x40\xeb\xb9\x89\x89\x77\x68\xdb\x78\x64\xf4\xab\x14\x1f\x47\xa7\x86\xc8\x14\x44\x68\x92\xe7\x13\x1f\x76\xd6\x66\xbe\x7f\x9a\x56\x36\x2a\xd7\x85\xc1\x8a\x30\x08\xef\x83\x52\x26\xee\x27\x40\xc0\xb7\x0d\x56\xd1\xd2\xf3\xa0\x0f\x97\xc4\x44\x8b\x68\xb1\x98\x3f\x5f\x3f\xc0\x5d\x6e\xb4\x18\x3f\x3c\x6f\x9e\xa6\xe5\x08\x51\xa8\x89\x4c\x82\x9b\xa7\xe9\x57\x55\xeb\xd1\x63\xbb\x6a\x0d\xe2\xab\xaa\xe9\x68\xde\x29\x9b\x82\xf6\x75\x9f\x8e\xbc\x2a\x6f\x55\x70\x6a\xdb\xc2\x66\x48\xe0\xfd\x68\xd7\x4c\x8d\xb8\xbe\x73\x33\x78\xff\x21\x55\x58\x70\x70\xd7\x91\x5c\xa1\x2b\xf9\x07\x67\xdf\x03\xe5\x53\x75\x6b\x4c\x33\x05\x74\x59\xde\xc8\x92\x7c\x85\xb8\xbc\xab\x6d\x1d\x8c\xf1\x47\x24\x42\xbb\x32\x7b\x1b\x1e\x04\xfe\x46\x94\xb9\x61\xbf\xef\xc8\x58\x10\xd8\x13\xc6\x08\x85\x90\x49\xd7\x8b\x4d\xda\xdf\x59\x23\x40\xf7\x13\x3c\xdc\x26\x98\x29\x73\xbc\x8d\x8d\xd6\x18\x93\xb1\x3d\xf7\xd6\x72\xb1\xad\x65\x2c\x5d\x06\x14\xbf\x2d\xe1\xa8\x0c\x24\xc1\xb5\x1a\xe3\x1c\x6f\xeb\x6f\x04\xba\x20\xce\xb5\x7c\xe4\xd1\x72\x53\xde\xdd\xe5\xa6\x68\x58\xc2\x67\x98\x1a\x7b\x0c\xd6\xe5\xf9\xe9\xa3\xc5\x19\x4b\xb7\xab\x18\x65\xd8\xc2\x27\x8b\xe5\x8a\x0f\x59\x63\x73\xf8\x1c\xe9\xb7\xb1\xe5\xd5\x3f\x5f\x92\xa2\xa9\x96\xc0\xd2\xd2\x28\x19\x1f\xdb\x8a\x27\xfe\x71\x3d\x80\xe2\x43\xf6\xff\xdd\xf9\xd7\x68\x31\x22\xc2\x34\xa3\xee\xc9\xe0\x63\x54\xe0\x97\xfc\xef\xfe\x72\xe5\xcc\x24\x61\x07\x93\xc0\xbb\xa8\xee\xe3\xac\x5e\x7c\x4f\x37\x59\x02\x84\x35\xd1\x7c\x45\x20\x44\x78\x9b\x06\x5d\xb9\xfe\x98\x2e\xc1\x82\x52\xe8\x27\x1a\xdc\x9c\x56\x2c\x6e\x8a\xbf\x01\x00\x00\xff\xff\x22\xd4\x1c\x7e\xf1\x06\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1777, mode: os.FileMode(420), modTime: time.Unix(1487162037, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

