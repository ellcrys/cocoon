// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487406283, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4b\x8f\xe2\x38\x10\xbe\xf7\xaf\xb0\xac\x39\x6e\x03\x3d\xab\xb9\x20\xed\x81\x21\x6c\x8b\x15\x8f\x88\xc7\x61\xb5\x42\xa8\x30\xd5\x69\x0b\xc7\x8e\x6c\xc3\x0c\x1b\xe5\xbf\xaf\xec\x84\xe9\x24\x0e\xf4\xe6\x82\xa9\xe7\x57\x5f\xb9\x2a\xc9\x9f\x08\xa1\x7f\xa9\x03\x1d\x12\x77\x24\x84\xae\x30\xe1\x4a\xd2\x21\xa1\x89\x50\x07\x10\xf4\xb7\x52\x3e\x8d\x9c\x8c\x29\xa6\x94\x7c\xce\xf3\x69\x54\x14\x37\xd5\x02\x52\xbc\xab\xdc\x5c\x33\xaf\x34\xa8\x2f\x9c\xe1\x4d\x1c\x6b\xae\x34\xb7\x57\x3a\x24\xdf\x06\x95\x6c\x24\xc4\xc8\x2e\x25\x73\xf6\x6f\x20\x0c\x56\xf2\x08\x2c\x30\x94\x16\xb5\xa1\x43\xf2\x8f\x17\x12\x42\x8f\xec\x85\xfa\xf3\xae\xb2\x1b\x2b\x69\xac\x06\x2e\x6d\xdd\x2e\xaf\x7e\x09\xa1\xb3\x0d\xe8\x04\xad\x83\xf3\x25\x07\x6b\x75\xef\x84\x5a\xa2\xe8\x49\x48\xf1\x86\xb8\x64\xe1\xc3\x52\x70\x79\xfe\x59\xd7\x2d\x33\xd4\x20\x8f\x4e\xf7\x07\xad\xc4\x45\x03\xc8\x06\xcc\xe9\x55\xab\x73\x76\x07\xc7\x23\xc2\xaa\x4a\xce\xd2\x25\xcf\x73\x7f\x2a\x8a\x86\xae\x5e\xa5\x3c\x0b\x51\x53\xba\xcc\xf5\xa4\xcd\xc4\x5d\xc9\x2d\x98\x53\x88\xa0\xe4\x5d\xf3\x0b\x6a\x67\x7b\x54\xec\x84\xba\xad\x1f\x2b\xf9\xc6\x93\x5f\x57\xa7\xa6\xe1\x29\x24\x3e\x49\x9e\x4f\xdd\x31\x88\x4d\x08\x7d\x53\x9a\xe1\x3e\x3b\x0b\x41\x87\xc4\xea\x33\x06\x16\x4c\xa5\x69\x45\xf4\x01\xcc\x7b\x18\x02\x74\xe2\x8b\xa5\x5f\xf2\xc5\x72\x3e\x8a\xf6\xf3\xc9\x66\xb4\x5f\x8f\x57\xd3\x78\xb3\xde\x47\xd3\x55\xd1\x6f\x68\xa2\x49\x3c\x5b\xfe\x5d\x19\xec\x17\xa3\xf9\xa4\xa0\xbb\x20\x6a\xa6\xf9\x85\x0b\x4c\xf0\x78\x0f\x58\xa6\xb4\xdd\xa7\x90\xb9\xdc\xed\xda\x3d\x6e\x29\x91\x59\xa5\x9f\xdf\xad\x75\x46\xbf\x0f\x06\x83\x96\x59\xb1\x6b\x08\x8a\x16\xb5\x13\x79\xe9\xe2\x75\xbc\x1c\x2f\x97\x8b\xfd\xfd\x59\x0c\x6d\xc7\xcb\x68\xb2\xdf\xae\x66\x65\x37\xc6\xde\x67\xac\x8e\xb8\x5d\xcd\x3e\xf3\xda\x8c\x5e\xdb\x5e\x1b\x48\x3e\xf3\x9a\x8d\x16\x81\xdb\x0c\xa4\xf3\x7b\x58\xf2\xba\x5c\x10\xa6\x8b\xd4\xd6\xa5\x35\x21\x82\x0d\x54\x57\xa1\xa2\x23\x6c\x6b\xac\xb4\x9d\xc1\x01\x45\x19\xa7\xd1\x22\x42\x48\x13\x5b\xcb\x9d\xce\xd1\x42\x57\x43\xc2\x1b\xe5\xc7\x05\x2f\xcf\x47\xcc\x84\xba\x3e\xff\x4a\xd4\xeb\xba\xc0\xb5\xab\xea\xfc\xfa\x42\x31\x10\x7d\xc3\x34\xcf\xac\x79\x4c\xd7\x4c\x25\xf7\xe7\x6f\x0e\x3f\xff\xe4\xc2\x73\xf9\x32\x08\xb2\x56\xda\x35\xff\x17\xe7\xdf\xbd\xc9\xc3\x4c\x1b\x4c\x33\x01\xb6\xec\x4c\x9b\x98\x91\xb6\xfc\x0d\x98\xed\x6c\x1b\x21\xf4\x15\xad\x45\xbd\x56\x67\xed\xd7\x3a\x75\x74\x9b\x61\xbf\xaf\xe1\x47\x2f\xe1\xf6\xfd\x7c\x38\x1b\xd4\x4c\x49\x8b\xd2\xf6\x98\x4a\xfb\x92\xa9\x23\x9a\x7e\xd9\xe9\x7e\x0a\xc6\xa2\xbe\x51\xf2\xf9\x38\xb7\x8b\xf5\x6f\x34\x01\x96\x5f\x30\x42\x63\x3f\x65\xb9\x5d\xdf\x0a\x8d\xc7\x6e\x3a\xc7\x31\xde\x96\x4b\x3a\xde\x16\x45\x48\x33\xa6\x4a\x5f\x3d\xc3\x79\x7e\xfb\xd3\x61\x37\x5d\xc6\x6b\x3a\x24\x61\x9f\x16\x68\x7f\x28\x1d\xec\xf3\xf2\x09\xb9\x76\x29\xbf\x73\xdf\x89\xaf\x83\x20\x9a\xd7\x47\x57\x09\x29\x67\x6e\x14\x0c\x1d\x86\x41\x7d\x60\x42\xab\x31\x69\x4f\x49\xd1\x61\xbf\x0b\x64\x6d\xab\xc7\x8b\x2e\xe2\x26\x03\xcb\xde\x63\xb8\x0a\x05\x6e\xe3\xe6\xf5\x00\x1f\xe7\x5d\xfd\xed\x7c\xa7\x29\xf7\x1b\xf2\x7f\x9a\xe1\xb0\x9c\x2a\x8b\xf2\xd8\xd2\x77\x35\xaa\xd1\xa4\x8f\x52\x8b\x26\x5a\x0b\xda\xc6\x4a\x70\x76\x6d\x23\x9e\xba\xcf\x9a\x0b\x88\xea\x2d\x71\x7b\x1a\x29\x46\xd6\x62\x9a\xd9\x70\x9a\x69\x84\x02\x5c\xc8\xaf\xdf\xba\x3d\xe7\xea\x88\xe5\x42\x72\x76\x9d\xe8\x6e\x9b\xad\xe8\xfc\x92\xd9\x66\x47\xb0\x58\x03\x4d\xd7\x16\x92\xc4\x7f\x15\xbc\x84\x70\xdd\x6a\x89\x41\x83\x10\x7e\xcd\xbe\x3c\xdd\x22\x16\x4f\xc5\x7f\x01\x00\x00\xff\xff\x1d\xfd\x93\xfc\x6b\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2667, mode: os.FileMode(420), modTime: time.Unix(1487406278, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

