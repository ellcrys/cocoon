// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487161450, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x8f\xe3\x36\x0c\xbd\xcf\xaf\x10\x84\x1e\x3b\xf1\x4c\x8b\xbd\x04\xe8\x21\xb5\xb7\x83\x14\xf9\xc2\x24\x39\x15\xc1\x82\x63\x33\x8a\x10\x59\x32\x24\x26\xdd\xd4\xf0\x7f\x2f\x24\x3b\x1b\x7f\x24\xb3\xb9\x44\xe6\x7b\x24\x1f\x29\x8a\xe5\x13\x63\xfc\x6f\xf3\xc1\xc7\xcc\x1f\x19\xe3\xef\x28\xa4\xd1\x7c\xcc\xb8\x50\xe6\x03\x14\xff\xb5\xb6\x4f\x13\x6f\x4b\x4d\x6a\x8c\x7e\x2e\xcb\x69\x52\x55\x57\x68\x01\x39\x3e\x04\x37\x97\x22\x80\x0e\xed\x59\xa6\x78\x35\xaf\xac\x34\x56\xd2\x85\x8f\xd9\x97\x97\xc6\x36\x51\x6a\x42\x4b\x9d\x7a\xfe\x1e\x94\xc3\xc6\x9e\x00\x41\x8a\x9a\xd0\x3a\x3e\x66\xff\x04\x23\x63\x3c\x4b\x5f\x79\x38\xef\x1a\x5e\x6c\xb4\x23\x0b\x52\x53\x9b\x57\x36\xff\x8c\xf1\xd9\x06\xac\x40\xf2\x72\x7e\x29\x81\xc8\x8e\x8e\x68\x35\xaa\x91\x86\x1c\xaf\x8a\xeb\x2e\xdc\x98\x4a\xea\xd3\xf7\x36\xb6\x2c\xd0\x82\xce\x3c\xf6\x07\x6f\xcc\x55\x47\xc8\x06\xdc\xf1\xcd\x9a\x53\xf1\x40\xc7\x67\x0d\x6b\x2a\x39\x69\x9f\xbc\x2c\xc3\xa9\xaa\x3a\x58\xbb\x4a\x7d\x52\xaa\x05\xfa\xcc\xed\xa4\xdd\xc4\xf7\x92\x13\xb8\xe3\x50\x41\xdd\x77\x2b\xcf\x68\x3d\x37\x33\xe9\x11\x6d\x1f\x8f\x8d\xde\x4b\xf1\x63\x74\x5a\x88\xcc\x41\x84\x24\x65\x39\xf5\xc7\x41\x6c\xe6\xf3\xe7\x79\xd3\x46\xe5\x86\x30\x58\x11\x0a\xe1\x23\xbe\xeb\x60\x55\x4f\xc5\x57\x7d\xbe\x27\x21\x5e\xc6\xcb\xe5\xe2\xdb\xe3\xb1\x1d\x72\xe3\x65\xf2\xf5\xdb\xf6\x7d\x56\x0b\x8f\x83\x4f\x6c\x32\xdc\xbe\xcf\x7e\xe6\xb5\x99\xbc\xf5\xbd\x36\x20\x7e\xe6\x35\x9b\x2c\x06\x6e\x33\xd0\xde\xef\xd3\x92\xd7\xf5\x5b\x0a\xfd\xd9\xf5\xb0\x39\x12\xf8\x7e\xf4\x7d\x66\x46\x3c\xbe\xaf\x39\x7c\xff\x4b\xaa\x10\xf0\xf5\x65\x20\xb9\x41\xd7\xf2\x3f\x9c\xff\x19\x28\x9f\xaa\xdb\x60\x5e\x28\xa0\xfb\xf2\x26\x96\xe4\x1e\xd2\xfa\x85\xf6\x75\x30\xc6\xdf\x90\x08\xed\xda\x9c\x6c\x58\x03\xfc\x40\x54\xb8\x71\x14\x39\x32\x16\x04\x8e\x84\x31\x42\x21\x14\xd2\x8d\x52\x93\x47\x47\x6b\x04\xe8\x28\xc3\xf3\x73\x86\x85\x32\x97\xe7\xd4\x68\x8d\x29\x19\x3b\x72\x87\x41\xf7\xc3\x7e\x53\x40\xf2\x8c\x09\xba\xf0\xbc\x23\x61\x22\x67\xd3\x48\x48\x3a\x9c\x3e\x42\x50\x9d\x9a\x0c\x5d\xe4\xe8\xb4\xdf\xfb\x28\xdd\x6a\xfb\x15\x25\xd2\x15\x40\xe9\x61\x05\x17\x65\x20\x0b\xbd\x6f\x31\x6e\xe7\x5d\x7b\xbf\xa0\x0b\x25\xba\xde\x6d\xf0\x78\xb5\xad\xdf\xfd\x6a\x5b\x75\x1a\xcb\xe7\x98\x1b\x7b\x09\x17\x50\x96\xd7\x8f\x1e\x27\x91\xee\xd8\x30\xea\x63\x0f\x9f\x2e\x57\x6b\x3e\x66\x9d\x2b\xe6\x0b\xa4\x7f\x8d\xad\xd7\xc6\xed\xa9\x55\x5d\xb5\x04\x96\x56\x46\xc9\xf4\xd2\x57\x3c\xf5\x8b\xf9\x0c\x8a\x8f\xd9\xef\x2f\xb7\x5f\x27\xc5\x84\x08\xf3\x82\x86\xf3\xc5\x13\x54\xe0\x43\xfe\xf6\xe5\xbe\xe7\xdc\x64\x61\x0e\xb2\xc0\xbb\xab\xee\xc7\xc4\xdf\xdd\xc5\xdb\x22\x03\xc2\x96\x68\xbe\x26\x10\x22\xec\xb5\xd7\xa1\x5c\x3f\xec\x2b\xb0\xa0\x14\xfa\x8a\x5e\x9f\xae\x11\xab\xa7\xea\xff\x00\x00\x00\xff\xff\xb2\x15\x57\x24\x2d\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1837, mode: os.FileMode(420), modTime: time.Unix(1487161425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

