// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487175651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x5d\x8f\xea\x36\x10\x7d\xdf\x5f\x61\x59\xf7\xb1\x0b\x6c\xdb\xfb\x82\xd4\x87\x94\xd0\x15\x2d\x90\x08\xc2\x43\x55\xad\xd0\x6c\x98\xcd\x5a\x38\x76\x64\x0f\xdc\x4b\xa3\xfc\xf7\xca\x49\xb8\x1b\xf2\xc1\x76\x5f\xd6\xf8\x9c\xf1\x9c\x33\xf6\x4c\xf2\x07\xc6\xf8\x9f\xfa\x95\x4f\x99\x5b\x32\xc6\x37\x98\x08\xad\xf8\x94\xf1\x44\xea\x57\x90\xfc\xa7\x6a\x7f\xe1\xbb\xbd\x58\xc7\x5a\xab\xc7\x3c\x5f\xf8\x45\x71\x85\xd6\x90\xe2\x20\x18\x5d\xb2\x12\xb4\x68\xce\x22\xc6\xeb\x76\x68\x84\x36\x82\x2e\x7c\xca\xbe\x4e\xea\x3d\x4f\x4a\x8f\x02\x15\x3b\xfe\x1b\x48\x8b\xf5\xbe\x0f\x04\x31\x2a\x42\x63\xf9\x94\xfd\x53\x6e\x32\xc6\x0f\xf1\x13\x2f\xd7\x2f\x35\x6f\xa6\x95\x25\x03\x42\x51\x93\x97\xd7\xff\x19\xe3\xcb\x08\x4c\x82\xe4\xe4\x7c\xc9\x81\xc8\x8c\x8e\x68\x14\xca\x91\x82\x14\xaf\x8a\xab\x2a\x7c\x30\xa5\x50\xa7\xef\x4d\x2c\xc8\xd0\x80\x3a\x38\xec\x37\x5e\x6f\x17\x37\x42\x22\xb0\xc7\x67\xa3\x4f\xd9\x80\x8e\x7b\x05\xab\x9d\x9c\x94\x4b\x9e\xe7\xe5\xaa\x28\x6e\xb0\xa6\x4b\x75\x92\xb2\x01\xba\xcc\xcd\xa4\xb7\x89\xfb\x92\x13\xd8\x63\x57\x41\x55\x77\x23\xce\x68\x1c\xf7\xa0\xe3\x23\x9a\x36\x3e\xd3\xea\x4d\x24\x3f\x9e\x4e\x03\x11\x29\x24\x65\x92\x3c\x5f\xb8\x65\xe7\x6c\xe6\xf2\xa7\x69\x5d\xc6\x57\xb0\xef\x5d\x02\x98\xa4\xb4\xc2\xbf\xe4\xeb\x60\xe5\xf9\xfb\xd5\x3c\xf2\xf6\xdb\xd9\x66\x11\x46\xdb\xbd\xbf\xd8\x14\xe3\x1b\xc4\x9f\x87\xcb\xe0\xef\x9a\xb0\x5f\x7b\xab\x79\xc1\x5f\x6e\x0e\x2d\x5a\x06\xe6\xea\xdc\xa7\x7e\x16\xcc\x82\x60\xbd\x1f\x7e\xf1\x5d\xee\x2c\xf0\xe7\xfb\xdd\x66\x59\x79\x9e\x95\x31\x33\x7d\xc0\xdd\x66\xf9\x59\x54\xe4\x3d\xb7\xa3\x22\x48\x3e\x8b\x5a\x7a\xeb\x4e\xd8\x12\x94\x8b\xbb\x6b\x79\x5b\xb5\x61\x59\xd8\x97\x16\xb6\x42\x82\xbe\x7a\x74\x0b\x5b\xbe\x09\x3c\x3f\x1e\x30\x93\xfa\xf2\x18\x6b\xa5\x30\x26\x6d\x1e\x27\xa3\xc9\xe8\xd7\x51\xdf\x6d\x36\xee\xcd\x45\xff\xb8\xba\xc8\xdb\xfe\x55\x5d\xa6\x8d\x8d\xc8\xc8\xde\xd7\xbf\xd4\xc9\xf0\xb3\x5b\xc1\xf7\x3f\x84\x2c\xcd\x3d\x4d\x3a\x0a\x6a\x74\x2b\xfe\xc5\xd5\xef\x25\xe5\x6e\xa6\x08\xd3\x4c\x02\xf5\x97\xca\x33\x24\xde\x20\xae\x06\x4d\x5b\x07\x63\xfc\x19\x89\xd0\x6c\xf5\xc9\x94\xd3\x8c\xbf\x13\x65\x76\x3a\x1e\x1b\xf8\x36\x4a\x04\xbd\x9f\x5e\x4f\x16\x4d\xac\x15\xa1\xa2\x51\xac\xd3\xb1\x8a\xf5\x01\xed\xb8\x7a\x6e\xe3\x14\x2c\xa1\xb9\x96\xe4\xf3\x77\xde\x36\x5b\x0e\x72\x09\x24\xce\xe8\xa3\xad\x27\xde\x40\x17\xb5\x0a\xde\xb6\xba\x41\x5b\xda\xb0\xbd\xad\x12\xee\xaa\x31\x15\xee\x8a\xa2\x5b\x71\x4c\xb5\xb9\x94\xc5\xce\xf3\xeb\x8f\x1e\xde\x22\x08\xb7\x7c\xca\xba\x57\xb6\x46\xfa\xa6\x4d\x35\xd1\xee\xb7\xb2\x2f\x6c\x06\x14\xbf\x87\x70\x91\x1a\xdc\x54\xc9\x8b\x06\xe3\x63\xfd\xd2\x9c\xf2\x03\xd6\x86\x6d\xfd\x1f\x4b\x4e\xcb\xb1\x66\x54\xcb\x16\xde\x67\x77\xc0\x6a\x71\xab\x96\xc0\x50\xa8\xa5\x88\x2f\x6d\xc5\x0b\xf7\x79\x3c\x83\xe4\x53\xf6\xcb\xe4\xe3\xef\x26\x85\x47\x84\x69\x46\xdd\xf6\xe0\x3e\x4a\x70\x47\xfe\xfc\xb5\x3f\x72\xa5\x0f\x58\xf5\xbc\xe3\xf5\xaa\xbb\x0e\x8f\xa2\xf7\x8b\xb8\xcb\x0e\x40\xd8\x10\xcd\xb7\x04\x49\x52\x7e\x5d\x9e\xba\x72\x5d\xaf\x86\x60\x40\x4a\x74\x8e\x9e\x1e\xae\x27\x16\x0f\xc5\x7f\x01\x00\x00\xff\xff\xae\xaa\x54\x29\xb3\x08\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2227, mode: os.FileMode(420), modTime: time.Unix(1487175442, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

