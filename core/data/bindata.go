// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487251296, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x5b\x8f\xea\x36\x10\x7e\xdf\x5f\x61\x59\xe7\xb1\x0b\x6c\xab\xa3\x4a\x48\x7d\xa0\x84\xae\xa8\xb8\x44\x5c\x1e\xaa\x0a\xa1\xc1\xcc\x66\x23\x1c\x3b\x72\x26\x9c\xa5\x51\xfe\x7b\xe5\x24\xec\x26\x71\x80\xc3\x0b\xce\xcc\x37\xb7\x6f\x3c\x93\x64\x4f\x8c\xf1\xbf\xf5\x81\x0f\x99\x3d\x32\xc6\x57\x18\x84\x5a\xf1\x21\xe3\x81\xd4\x07\x90\xfc\x97\x52\x3e\xf5\xac\x4c\x68\xa1\xb5\x7a\xce\xb2\xa9\x97\xe7\x57\xd5\x02\x22\xbc\xa9\xdc\x5c\xe2\x42\x99\xa0\x39\x87\x02\xaf\x62\xdf\x84\xda\x84\x74\xe1\x43\xf6\x7d\x50\xc9\x46\x52\x8e\x68\xa9\x84\xc5\xbf\x81\x4c\xb0\x92\x7b\x40\x20\x50\x11\x9a\x84\x0f\xd9\xbf\x85\x90\x31\x7e\x14\x2f\xbc\x38\xef\x2a\xdc\x58\xab\x84\x0c\x84\x8a\xea\xb8\xac\xfa\x67\x8c\xcf\x36\x60\x02\x24\x9b\xce\xb7\x0c\x88\x4c\xef\x84\x46\xa1\xec\x29\x88\xf0\x9a\x71\xc9\xc2\x17\x52\x86\x2a\xfd\xa8\xeb\x96\x31\x1a\x50\x47\xab\xfb\x83\x57\xe2\xbc\x91\xc8\x06\x92\xd3\xab\xd1\x69\x7c\x23\x8f\x7b\x84\x55\x95\xa4\xca\x06\xcf\xb2\xe2\x94\xe7\x0d\x5d\xbd\x4a\x95\x4a\x59\x53\xda\xc8\xf5\xa0\xcd\xc0\x5d\xc1\x09\x92\x93\x9b\x41\xc9\xbb\x09\xcf\x68\x2c\xf6\xa8\xc5\x09\x4d\x5b\x3f\xd6\xea\x2d\x0c\x3e\xaf\x4e\x4d\x13\x46\x10\x14\x41\xb2\x6c\x6a\x8f\x8e\x6f\xc6\xf8\x9b\x36\x02\xf7\x71\x2a\x25\x1f\x32\x32\x29\x3a\x08\xa1\xa3\xa8\x22\xfa\x00\xc9\xbb\xeb\x02\x4c\x50\x14\xcb\xbf\x65\x8b\xe5\x7c\xe4\xed\xe7\x93\xcd\x68\xbf\x1e\xaf\xa6\xfe\x66\xbd\xf7\xa6\xab\xbc\xdf\xd0\x78\x13\x7f\xb6\xfc\xa7\x02\xec\x17\xa3\xf9\x24\xe7\x3b\xc7\x6b\xac\x0d\xed\x23\x88\xad\xe7\x5d\x43\x99\xb7\x08\x98\xa8\x73\x57\xf5\xe3\xe5\x78\xb9\x5c\xec\x6f\x4f\x8c\x8b\x1d\x2f\xbd\xc9\x7e\xbb\x9a\x95\x9c\x8d\x0b\x9b\xb1\x3e\xe2\x76\x35\x7b\x64\xb5\x19\xbd\xb6\xad\x36\x10\x3c\xb2\x9a\x8d\x16\x8e\xd9\x0c\x94\xb5\xbb\x5b\xf2\xba\x1c\xe3\x82\x76\xa7\xf0\x47\xf7\xba\x82\x6d\xa0\x6a\x5b\x13\xe7\x76\xc2\xd7\x86\x66\x70\x40\x59\x3a\x55\x0a\x05\x69\xc3\x19\x63\xcd\x1c\x5b\x96\x7c\x8e\x04\x5d\x8d\x71\xfb\x5f\x5c\x6e\x3c\x3f\x1f\x31\x96\xfa\xf2\xfc\x19\xe3\x79\xd0\x1b\xf4\x7e\xef\x75\x5d\xba\xda\xf5\xb2\xd6\x7d\xa9\x05\xc8\x7e\x22\x4c\x18\x53\x72\x9f\xbc\x99\x0e\x6e\xcf\xcc\x1c\x3e\xfe\x0a\x65\xc1\xec\xcb\xc0\x89\x5a\x69\xd7\xe1\x7f\x38\xff\xb3\x80\xdc\x8d\xb4\xc1\x28\x96\x40\x65\x9f\xda\xf4\x8c\x0c\x85\x6f\x20\xa8\xb3\x89\x8c\xf1\x57\x24\x42\xb3\xd6\xa9\x29\x56\x31\x7f\x27\x8a\x93\x61\xbf\x6f\xe0\x47\x2f\x08\xe9\x3d\x3d\xa4\x09\x1a\xa1\x15\xa1\xa2\x9e\xd0\x51\x5f\x09\x7d\xc4\xa4\x5f\xf6\xb3\x1f\x41\x42\x68\xae\x94\x3c\x1e\xc1\x76\xb1\xc5\x5b\x48\x02\x85\x67\xf4\x30\xa1\x87\x2c\xb7\xeb\x5b\x61\x52\xe4\x9e\x74\x0e\xa7\xbf\x2d\x17\xab\xbf\xcd\x73\x97\x66\x8c\xb4\xb9\x14\x0c\x67\xd9\xf5\xa1\x03\x37\x5d\xfa\x6b\x3e\x64\x6e\x9f\x16\x48\x3f\xb4\x71\x76\x70\xa5\xf5\x2e\x0a\xa2\x50\xd8\x7b\x9d\xf0\xa1\x0b\x68\x2f\xeb\x4f\xc3\x6a\x0a\x6a\x43\xd0\x81\xcb\x1d\xd9\xee\xe9\xde\x73\xfb\xd2\x78\x61\x12\x03\x89\x77\x1f\x2e\x52\x83\xdd\xbb\x59\xdd\xe5\xd7\x79\x57\x7f\x53\xde\x20\xfb\x36\xd1\x3f\x43\xb2\xcd\xe5\x54\x21\xca\x63\x4b\xdf\xd5\x80\x06\xf9\x5f\xa5\xe6\xcd\x6c\x09\x0c\xf9\x5a\x86\xe2\xd2\xce\x78\x6a\x3f\x31\xce\x60\xb7\xcd\x6f\x83\xaf\x5f\x23\xc4\x88\x08\xa3\x98\xdc\x29\xe5\x1e\x4a\xb0\x2e\x7f\xfd\xde\x6d\x39\xd7\x47\x2c\xd7\x8d\xc5\x75\x66\x77\xdd\x5b\x79\xe7\x57\xc5\x36\x3e\x02\x61\x2d\x69\xbe\x26\x08\x82\xe2\x0d\xfd\xe2\xa6\x6b\x57\x86\x0f\x06\xa4\x2c\xf6\xe7\xcb\xd3\xd5\x63\xfe\x94\xff\x1f\x00\x00\xff\xff\x61\xff\x6f\x7b\xf7\x09\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2551, mode: os.FileMode(420), modTime: time.Unix(1487251294, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

