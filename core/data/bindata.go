// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1490029066, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x08\xc4\x1e\x9b\x38\xd9\x62\x2f\x06\x7a\x50\xac\x34\x50\x6b\xd9\x82\x3f\x0e\x45\x11\x08\x0c\x3d\x91\x09\x53\xa4\x40\x52\xde\x75\x05\xfd\xf7\x82\x94\xb4\x91\x4d\xca\xde\x5c\x42\x0f\xdf\x7c\x70\x86\xef\x51\xf5\x5d\x10\xa0\xbf\xc4\x3b\x9a\x06\x66\x19\x04\x68\x05\x39\x15\x1c\x4d\x03\x94\x33\xf1\x8e\x19\xfa\xad\xb5\xc7\x91\xb1\xd5\x75\x1c\x35\x4d\x6f\x5b\xe0\x02\x5c\xeb\xe6\x54\x5a\xab\x02\x79\xa4\x04\x7a\x73\x2a\xa9\x90\x54\x9f\xd0\x34\xf8\xf6\xd8\xd9\x42\xc6\x42\xbd\xe4\xc4\xe0\x3f\x30\x53\xd0\xd9\x23\xac\x31\x01\xae\x41\x2a\x34\x0d\xfe\xb5\xc6\x20\x40\x3b\xf2\x84\xec\xfa\xad\xc3\xcd\x04\x57\x5a\x62\xca\xf5\x10\x57\x77\xff\x83\x00\xcd\x37\x58\xe6\xa0\x4d\x39\x5f\x6a\xac\xb5\x7c\x38\x80\xe4\xc0\x1e\x38\x2e\xa0\xaf\xb8\x3d\xf7\x27\x92\x51\x5e\xfd\x18\xee\x2d\x4b\x90\x98\xef\xcc\xde\x1f\xa8\x33\x37\x67\x85\x6c\xb0\x3a\xbc\x4a\x51\x95\x23\x75\x78\x3b\xd5\x1d\xa1\xe2\x26\x6b\x5d\xdb\x55\xd3\x9c\xed\x0d\x8f\xc7\x2b\xc6\x06\x9b\x26\xe5\x30\xdb\x79\xc6\xb3\xac\x1a\xab\xc3\xbd\x93\xba\xed\xb4\xa4\x47\x90\x06\xb4\x13\xe4\x00\xf2\x72\x7f\x26\xf8\x07\xcd\x7f\x5e\x8f\xc1\x0e\x2d\x70\xde\x9f\xc9\x2c\x9d\xd8\x41\x80\x3e\x84\x24\x90\x95\x15\x63\x68\x1a\x68\x59\x81\x83\x20\xa2\x28\xba\xd6\xbe\x63\xb5\x77\x43\x70\xd0\xdf\x85\x3c\x64\x85\xd8\xd9\x6c\x7b\xa1\xb4\x8b\xc2\x32\xb7\xbd\x40\x5f\xea\xc5\x32\x09\xa3\x2c\x79\xd9\x84\xd9\x7a\xb6\x8a\xd3\xcd\x3a\x8b\xe2\x55\x33\x39\xdb\x89\x5e\xd2\xf9\xf2\x9f\x0e\x90\x2d\xc2\xe4\xa5\x41\x6f\x4e\xd4\x52\xd2\x23\x65\x90\xc3\x6e\xac\xfc\x52\x48\x9d\x15\xb8\x34\xb9\xdf\xce\x36\x9b\x8b\x46\xbe\xf0\xa3\xaf\x8b\xb3\xe5\x6c\xb9\x5c\x64\x1e\x76\xb9\xa0\xd9\x32\x7a\xc9\xb6\xab\x79\x0b\x9d\x09\x22\x04\x9f\x89\x1d\x6c\x57\xf3\x5b\x5e\x9b\xf0\xf5\xd2\x6b\x83\xf3\x5b\x5e\xf3\x70\xe1\xb8\xcd\x31\xbf\xe6\xf7\xbc\x8d\xe7\x51\x96\x86\xab\x30\x59\x0f\x5d\x9f\x2b\xca\x76\x29\x96\xb8\x50\x57\xbc\xa3\x78\xfd\x77\x36\x8f\x93\x78\xd3\xfa\x46\x54\x1d\x92\xe7\xa6\x41\x57\x5b\xbb\x6e\x85\xe6\x92\x0c\x81\x43\x88\x60\x48\x0a\x62\xeb\x52\x7e\x5e\x04\x2d\xc3\xba\x4b\xd5\x41\x9c\x0b\x62\x54\x4d\x48\x3d\xc7\xef\xc0\xda\x90\x9c\x03\xd1\x42\xde\xe7\xb2\x24\xbe\x90\xb3\x3d\x10\x87\xb5\xe3\xc5\x5a\x9f\xd8\xb2\xc3\x13\xed\xec\x38\x98\xd1\x23\x8c\x81\x7a\x49\xd6\xa4\x1c\x83\xa4\x58\xef\x0d\x64\x22\x0e\xa3\x10\x21\xf5\xf9\x31\xf7\x5a\x8f\x06\xdc\xd0\x02\x44\x65\x1c\xbe\x3e\xf6\x7f\x23\xd0\xd8\x28\xfd\x11\x9b\x1e\x3e\x3d\xde\x02\xa7\x52\x68\x41\x84\x6d\xb8\xcd\xef\x81\x35\x8e\xed\xed\xee\x1a\xe2\x62\xb2\x28\x01\x8d\x7d\x6c\x75\x65\xc3\x54\x21\x2b\x7e\xff\xb3\x27\x0f\x3e\x11\x1b\x08\x91\xed\x31\x13\x04\xb3\x89\x22\x92\x96\x5a\x5d\xbf\xdc\x73\x91\x8f\x6b\x70\x82\x7f\xfc\x49\x99\xbd\xf9\x4f\x4e\xbf\xfa\xdd\x35\xfd\x0f\x92\x67\x0b\xb9\x9a\x69\x03\x45\xc9\xb0\x6e\x79\x74\xd9\x91\x50\x6a\xfa\x81\x49\xfb\xce\x7a\x58\xf5\x0a\x5a\x83\x5c\x8b\x4a\x12\xe8\x27\xa3\xa6\x93\x89\xc4\xdf\x1f\x72\xaa\xf7\xd5\x7b\xa5\x40\x12\xc1\x35\x70\xfd\x40\x44\x31\xe1\x44\xec\x40\x4d\x5a\x1a\x4e\x0a\xac\x34\xc8\xbe\x25\xb7\xc5\xda\xc3\xad\x15\x30\xac\xe9\x11\x22\x50\xfa\x66\x97\x2f\xcf\xb7\x02\x65\x6b\x57\x5e\x91\x4e\xb7\xed\x0b\x9d\x6e\x9b\xc6\x6d\x33\x14\x42\x9e\x6c\x87\xeb\xba\xff\xe1\xc1\xc5\xcb\xd4\x48\xa2\x3b\xa7\x45\xfb\xc4\xf9\x65\xc1\x27\x0a\x28\x79\xa6\x76\x12\x75\x6d\x57\x6e\x32\x8b\x8a\x4e\x1c\x17\x94\x18\xda\x2a\x34\xf5\x29\x4e\x10\xd4\x01\xea\xe4\xeb\x52\xbd\xbc\x31\x47\x1c\x2c\x0f\x5d\xd2\xb9\xb4\x73\xa9\x79\xfd\xd5\x8c\xa8\x2a\xb1\x26\xfb\x14\x9f\x98\xc0\x46\x08\xeb\x61\x80\xcf\xf5\xdb\xf0\x53\x6e\x64\x96\xe3\x73\xfc\x95\x19\x7a\xe7\x77\x36\xbb\xcf\xa3\x34\xe7\xd5\x68\x2c\x75\x2a\x18\x25\xa7\xcb\x8a\x06\xca\xf7\xfb\xa3\x5f\xfa\x50\xa8\x35\x14\xa5\x76\x49\x8e\x22\x60\xd8\x84\xfc\xfa\xcd\xef\x99\x74\xdf\x4c\x3b\x8b\xf3\x56\xd7\x2b\x5d\xe3\xfd\xac\xdd\x96\x3b\xac\x61\x50\x34\x5a\x6b\x9c\xe7\xf6\x83\xd1\xa3\xd4\x46\x71\xcc\x1b\xcf\x98\x7d\x0f\x9f\xee\xfa\x88\xcd\x5d\xf3\x7f\x00\x00\x00\xff\xff\xd3\xc0\xc4\x89\x6a\x0c\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 3178, mode: os.FileMode(420), modTime: time.Unix(1490029015, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

