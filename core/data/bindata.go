// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487180264, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x5d\x6f\xea\x46\x10\x7d\xcf\xaf\x58\xad\xee\x63\x03\xa4\xd5\x55\x25\xa4\x3e\x50\x4c\x23\x2a\xc0\x16\x1f\x0f\x55\x15\xa1\xc9\x32\x71\x56\xac\x77\xad\xdd\x31\x37\xd4\xf2\x7f\xaf\xd6\x36\x8d\xb1\x0d\x69\x5e\xb2\xcc\x9c\xf1\x9c\x73\xbc\x33\xce\x1f\x18\xe3\x7f\x9a\x57\x3e\x66\xfe\xc8\x18\x5f\x63\x2c\x8d\xe6\x63\xc6\x63\x65\x5e\x41\xf1\x9f\xaa\xf8\x3c\xf0\x31\x61\x84\x31\xfa\x31\xcf\xe7\x41\x51\x5c\x52\x2b\x48\xf0\x66\x72\x7b\x4e\xcb\xa4\x43\x7b\x92\x02\x2f\xe1\xc8\x4a\x63\x25\x9d\xf9\x98\x7d\x1f\xd5\xb1\x89\x52\x13\x0a\xb5\xf0\xf8\x37\x50\x0e\xeb\x78\x00\x04\x02\x35\xa1\x75\x7c\xcc\xfe\x2e\x83\x8c\xf1\x83\x78\xe2\xe5\xf9\xa5\xc6\x4d\x8d\x76\x64\x41\x6a\x6a\xe2\xf2\xfa\x3f\x63\x7c\xb1\x05\x1b\x23\x79\x3a\xdf\x72\x20\xb2\x83\x23\x5a\x8d\x6a\xa0\x21\xc1\x0b\xe3\xca\x85\x4f\xa4\x92\x3a\xfb\x68\xe6\xc2\x14\x2d\xe8\x83\xcf\xfd\xc6\xeb\x70\x71\x45\x64\x0b\xee\xf8\x6c\x4d\x96\xde\xe0\x71\xcf\xb0\x5a\x49\xa6\x7d\xf3\x3c\x2f\x4f\x45\x71\x95\x6b\xaa\xd4\x99\x52\x8d\xa4\xef\xdc\x6c\x7a\xdd\xb8\xaf\x39\x81\x3b\x76\x19\x54\xbe\x5b\x79\x42\xeb\xb1\x07\x23\x8e\x68\xdb\xf9\xa9\xd1\x6f\x32\xfe\xef\xea\x34\x32\x32\x81\xb8\x6c\x92\xe7\x73\x7f\xec\x3c\x9b\x31\xfe\x66\xac\xc0\x7d\x9a\x29\xe5\x81\x64\x33\xec\x62\x84\x49\x92\xda\xea\x57\x70\xef\x5d\x00\xd8\xb8\x94\xcb\xbf\xe5\xab\x70\x39\x09\xf6\xcb\xd9\x76\xb2\xdf\x4c\xd7\xf3\x68\xbb\xd9\x07\xf3\x75\x31\xbc\xca\x04\xb3\x68\x11\xfe\x55\x03\xf6\xab\xc9\x72\x56\xf0\x97\xab\x87\x16\x2d\x91\x33\x7d\xea\x53\x38\x0d\xa7\x61\xb8\xda\xdf\x9e\x8a\x2e\x76\x1a\x06\xb3\xfd\x6e\xbd\xa8\x7c\x99\x96\x35\x53\x73\xc0\xdd\x7a\xf1\x55\xd5\x76\xf2\xdc\xae\xda\x42\xfc\x55\xd5\x62\xb2\xea\x94\x2d\x40\xfb\xba\xbb\x92\x37\xd5\xa8\x96\xc6\xbe\xb4\x72\x4b\x24\xe8\xf3\xa3\x6b\x6c\x79\x6f\xf0\xf4\x78\xc0\x54\x99\xf3\xa3\x30\x5a\xa3\x20\x63\x1f\x47\x83\xd1\xe0\xd7\x41\xdf\xdb\x6c\xbc\x37\x5f\x3d\x54\x46\x80\x1a\x3a\x61\x65\x4a\xee\x3e\xe7\x85\x89\x6f\x5f\xc7\x25\x7c\xfc\x21\x55\x29\xe8\x69\xd4\xe9\x5a\x67\x37\xf2\x1f\x5c\xfe\x5e\x42\xee\x76\xda\x62\x92\x2a\xa0\x7e\x7b\x26\x96\xe4\x1b\x88\x6a\x01\xb5\x79\x30\xc6\x9f\x91\x08\xed\xc6\x64\xb6\xdc\x72\xfc\x9d\x28\x75\xe3\xe1\xd0\xc2\x8f\x41\x2c\xe9\x3d\x7b\xcd\x1c\x5a\x61\x34\xa1\xa6\x81\x30\xc9\x50\x0b\x73\x40\x37\xac\xae\xd8\x30\x01\x47\x68\x2f\x96\x7c\x7d\xb7\xdb\x62\xcb\x05\xaf\x80\xe4\x09\x03\x74\xf4\xa5\xcb\x6d\x7d\x6b\x74\x25\x77\xd7\x3b\x13\xd1\xae\xda\x59\xd1\xae\x28\xba\x36\x63\x62\xec\xb9\x74\x38\xcf\x2f\x3f\x7a\x70\xf3\x30\xda\xf0\x31\xeb\xbe\xa7\x15\xd2\x0f\x63\xab\xf5\x76\x7f\x66\x03\xe9\x52\x20\xf1\x1e\xc1\x59\x19\xf0\xeb\x23\x2f\x1a\x88\xcf\xf3\x4b\x73\xe5\xdf\x90\x76\x5b\xd6\xff\x91\xe4\xb9\x1c\x6b\x44\x75\x6c\xe5\xfb\xe4\xde\x90\x5a\x5c\xb3\x25\xb0\x14\x19\x25\xc5\xb9\xcd\x78\xee\xbf\x95\x27\xf0\x8b\xf5\x97\xd1\xe7\xdf\x55\x8b\x09\x11\x26\x29\x75\x67\x82\x07\xa8\xc0\x3f\xf2\xe7\xef\xfd\x95\x4b\x73\xc0\x6a\xb8\x3d\xae\x97\xdd\x65\x4b\x14\xbd\x9f\xc7\x5d\x7a\x00\xc2\x06\x69\xbe\x21\x88\xe3\xf2\x53\xf3\xd4\xa5\xeb\x07\x34\x02\x0b\x4a\xa1\x57\xf4\xf4\x70\x79\x62\xf1\x50\xfc\x1b\x00\x00\xff\xff\x2b\xd2\x44\x2a\xc0\x08\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2240, mode: os.FileMode(420), modTime: time.Unix(1487180199, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

