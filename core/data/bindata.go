// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1486890424, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x53\xc1\x8e\xda\x30\x10\xbd\xf3\x15\x96\xd5\x63\x85\x96\xae\xb8\x44\xea\x81\x92\xb6\xa2\x5a\x96\xa8\xc0\xa9\xe2\x30\xeb\x0c\xa9\x85\x63\x47\xce\xc0\x2e\x8d\xf2\xef\x95\x9d\xb0\x38\x21\x2c\x17\x86\x79\xcf\x7e\x6f\x86\xe7\x6a\xc4\x18\xff\x65\x5e\x78\xc4\x5c\xc9\x18\xff\x8d\x99\x34\x9a\x47\x8c\x67\xca\xbc\x80\xe2\x9f\x9b\xfe\x22\x76\x3d\x61\x84\x31\x7a\x5c\x55\x8b\xb8\xae\x2f\xd0\x33\xe4\x78\x17\xdc\x9c\x0b\x0f\x96\x68\x4f\x52\xe0\xa5\x9d\x58\x69\xac\xa4\x33\x8f\xd8\xf4\xa1\xed\xcd\x94\x9a\xd1\x4a\x0b\xc7\xdf\x83\x2a\xb1\xed\xc7\x40\x20\x50\x13\xda\x92\x47\xec\x8f\x6f\x32\xc6\x53\x31\xe1\xbe\xde\xb5\xbc\xb9\xd1\x25\x59\x90\x9a\x42\x5e\xd5\x7e\x33\xc6\x9f\x36\x60\x33\x24\x67\xe7\x53\x05\x44\x76\x7c\x40\xab\x51\x8d\x35\xe4\x78\x71\xdc\x6c\xe1\xca\x54\x52\x1f\xdf\x42\x6c\x55\xa0\x05\x9d\x3a\xec\x2b\x6f\xdb\x75\xc7\xc8\x06\xca\xc3\x4f\x6b\x8e\xc5\x1d\x1f\x1f\x2d\xac\x9d\xe4\xa8\x9d\x78\x55\xf9\xaa\xae\x3b\x58\x38\xa5\x3e\x2a\x15\x80\x4e\x39\x14\xed\x0a\x77\xc4\x41\x15\x52\x63\xa0\xda\xec\xda\xca\x13\x5a\x87\xa7\x46\x1c\xd0\xf6\xf1\xb9\xd1\x7b\x99\xbd\xc7\x25\x40\x64\x0e\x59\x70\x71\xf4\x38\x9e\xf6\x0e\x33\x37\x71\x9e\xb7\xbb\x2b\x5e\x53\xde\x81\xeb\x9e\xd4\x77\x7d\x72\x3a\xfd\xf6\xba\x09\x92\x9f\x72\xd7\xc3\x96\x48\x30\x74\xe6\xc9\x64\xf7\x8d\x2f\xe1\xed\x87\x54\xfe\xc2\xc9\xc3\x8d\xe3\x16\x5d\xcb\x7f\xb8\xfc\xe6\x29\x1f\x9a\xde\x60\x5e\x28\xa0\x61\x7b\x33\x4b\x72\x0f\x82\x06\xc1\x58\x96\x05\x90\xf8\x9b\xc0\x59\x19\x48\xfd\x18\x01\xe3\x5a\xef\xc2\x9c\x62\x69\x8e\xb6\xd9\x46\x38\x18\x9f\x27\xdb\x26\x3f\xc9\xb6\xee\x78\xe4\x4b\xcc\x8d\x3d\xfb\x59\xaa\xea\xf2\xa3\xc7\x89\x65\x79\x68\x19\x4d\xd9\xc3\x17\xab\x64\xcd\x23\xd6\xd9\x16\x7f\x46\x7a\x35\xb6\x89\xdf\x6e\x34\xb0\x20\xe7\x96\xc0\x52\x62\x94\x14\xe7\xbe\xe3\x85\x7b\xe0\x27\x50\x3c\x62\x8f\x0f\xd7\x4f\x47\x62\x46\x84\x79\x41\xb7\x7f\x15\x8f\x51\x81\xbb\xf2\xcb\x74\xf8\xe4\xd2\xa4\x3e\x9c\xa9\xe7\x0d\xba\x7b\x0f\xcf\xe0\x9b\xde\x16\x29\x10\x06\xa6\xf9\x9a\x20\xcb\xfc\x5b\x99\xdc\xda\x75\xb9\x49\xc0\x82\x52\xe8\x26\x9a\x8c\x2e\x37\xd6\xa3\xfa\x7f\x00\x00\x00\xff\xff\xa4\x04\xa3\xce\x75\x05\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1397, mode: os.FileMode(420), modTime: time.Unix(1486890399, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

