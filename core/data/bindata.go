// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1488732058, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4b\x6f\xe3\x36\x10\xbe\xe7\x57\x10\xc4\x1e\xbb\x71\xd2\x62\x2f\x06\x7a\x50\xac\x34\x70\xe1\x87\xe0\xc7\xa1\x28\x02\x63\x42\x31\x0a\x61\x8a\x14\xc8\x91\x77\x5d\x41\xff\xbd\x20\x25\x6f\x24\x51\x4e\x56\x17\xd3\x33\xdf\x3c\xf8\xcd\x43\xaa\x6e\x08\xa1\x7f\xeb\x17\x3a\x25\xee\x48\x08\xdd\xf0\x4c\x68\x45\xa7\x84\x66\x52\xbf\x80\xa4\xbf\x35\xf2\x79\xec\x64\x55\x35\x8f\xeb\xfa\x22\x5b\x41\xce\x43\xe9\xee\x5c\x78\xa9\xe5\xe6\x24\x18\xbf\x88\x13\x23\xb4\x11\x78\xa6\x53\xf2\xed\xae\x95\x45\x52\x46\xb8\x56\xcc\xe1\x5f\x41\x5a\xde\xca\x63\x40\x60\x5c\x21\x37\x96\x4e\xc9\xbf\x5e\x48\x08\x4d\xd9\x3d\xf5\xe7\xe7\x16\x37\xd3\xca\xa2\x01\xa1\xb0\x8b\xab\xda\x5f\x42\xe8\x62\x07\x26\xe3\xe8\xd2\xf9\x52\x01\xa2\xb9\x3d\x72\xa3\xb8\xbc\x55\x90\xf3\x4b\xc6\xcd\xbd\xdf\x91\x52\xa8\xf2\x47\x57\xb7\x2e\xb8\x01\x95\x3a\xdd\x9f\xb4\x15\xd7\xbd\x44\x76\x60\x8f\x4f\x46\x97\xc5\x95\x3c\x46\x99\x6a\xaf\x50\x2a\x17\xb5\xaa\xfc\xa9\xae\x7b\xba\xee\xf5\x54\x29\x65\x47\xe9\x42\x76\xa3\xf5\x23\xf6\xa2\x22\xd8\xe3\xd7\x20\x74\xc3\xb4\x11\x27\x6e\x1c\x28\xd5\xec\xc8\xcd\x50\x3f\xd3\xea\x55\x64\x3f\xdb\xa3\xa3\x11\x39\x64\x97\x3b\xb9\x63\xe0\x9b\x10\xfa\xaa\x0d\xe3\x87\xa2\x94\x92\x4e\x09\x9a\x92\x07\x08\xa6\xf3\xbc\xa5\xf6\x05\xec\x5b\xe8\x42\x71\xfc\xae\xcd\xf1\x90\xeb\xd4\x47\x7b\xd3\x16\x43\x14\x98\xcc\x73\x41\xbf\x54\xab\xf5\x32\x8a\x0f\xcb\xc7\x5d\x74\xd8\xce\x36\xf3\x64\xb7\x3d\xc4\xf3\x4d\x3d\xe9\x69\xe2\xc7\x64\xb1\xfe\xa7\x05\x1c\x56\xd1\xf2\xb1\xa6\xcf\x81\xd7\xc2\x88\x93\x90\x3c\xe3\xe9\xb5\xf4\x0b\x6d\xf0\x90\x43\xe1\x62\x3f\xf7\x94\xf5\x80\xc8\x47\x75\x1a\x63\x71\xb6\x9e\xad\xd7\xab\xc3\xc8\x74\x85\xa0\xd9\x3a\x7e\x3c\xec\x37\x8b\x06\x3a\xd3\x4c\x6b\x35\xd3\x29\xdf\x6f\x16\x9f\x59\xed\xa2\xa7\xa1\xd5\x0e\xb2\xcf\xac\x16\xd1\x2a\x30\x5b\x80\xfa\xc8\xee\x61\x3f\x5f\xc4\x87\x24\xda\x44\xcb\x6d\xd7\xf4\xa1\x14\x32\x4d\xc0\x40\x6e\xeb\x9a\x7e\xc8\xd4\xb6\xd9\x1b\xbe\x9e\x01\x5f\x57\x07\xa9\xd5\xef\xa0\x6d\x84\x16\x10\x16\x35\xd1\x06\x17\xf0\xc2\x5d\x4b\x52\xa6\x95\xe2\x0c\xb5\xa1\x84\x90\x7e\x56\x03\x4b\xba\xe4\x08\x63\x15\x0c\x5b\xc9\x39\x36\xa5\xfa\xfa\xd3\xf9\xed\x58\x63\x77\x9a\xd3\x19\x4c\xa4\x66\x20\x27\x96\x19\x51\xa0\xfd\x98\xa1\x85\xce\xae\xcf\xe5\x12\x7e\xfc\x25\xa4\xa7\xef\xfe\x2e\x88\xda\x6a\xb7\xe2\x3f\xbe\x7c\xf0\x90\x0f\x23\xed\x78\x5e\x48\xc0\xa6\x18\x43\x46\x22\x83\xe2\x15\x18\x8e\x56\x8a\x10\xfa\xc4\x11\xb9\xd9\xea\xd2\xb0\x66\x74\x11\x0b\x3b\x9d\x4c\x0c\x7c\xbf\xcd\x04\xbe\x95\x2f\xa5\xe5\x86\x69\x85\x5c\xe1\x2d\xd3\xf9\x44\x31\x9d\x72\x3b\x61\xbe\x65\x26\x39\x58\xe4\xe6\x42\xc9\xe7\x03\x3c\xbc\xac\x7f\x9b\x49\x40\x71\xe2\x31\xb7\xf8\x29\xcb\xc3\xfb\x6d\xb8\xf5\xb9\xdb\xd1\xc1\x4d\xf6\xcd\xd6\x4e\xf6\x75\x1d\xd2\xcc\x73\x6d\xce\x9e\xe1\xaa\xba\xfc\x19\xc1\xcd\xd7\x89\x1b\x93\xb0\x4e\xab\x66\xed\x0d\x17\x7c\xf3\x84\x5c\xbb\x90\x0f\xc2\x57\xa2\xaa\xfc\x29\x0c\xe6\x51\xf1\x59\x41\x2e\x98\x1b\x02\x4b\xa7\xa1\x6b\xef\x9e\xd0\x76\x40\x3a\xf3\x51\x8f\x40\x9f\x03\xd9\x10\xf5\xf1\x4e\x8c\x85\x2d\x00\xd9\x5b\x02\x67\xa9\xc1\x2d\xd9\xaa\xeb\xe0\xfd\xfc\xdc\x7d\x51\x5f\xa9\xca\xf5\x8a\xfc\x4a\x35\x5c\x2e\xc7\x16\xd1\x1c\x07\xfa\xb1\x4a\xf5\xaa\xf4\x7e\xd5\xba\x9f\x2d\x82\xc1\x44\x4b\xc1\xce\xc3\x8c\xe7\xee\x0b\xe7\x04\x6e\x13\xfd\x71\xf7\xfe\xf4\x42\x44\x88\x3c\x2f\x30\x1c\x67\x1a\x73\x09\xce\xe5\xef\xdf\xc6\x2d\x97\xed\x1b\x33\xf5\xb8\xd1\xec\x2e\x3b\xad\x1e\xfd\xa8\xd9\x17\x29\x20\xef\x24\x4d\xb7\x08\x59\xe6\x3f\x17\xee\xc3\x74\xdd\x6e\x71\x1b\x5e\x4a\xbf\x5b\xef\x6f\x2e\x1e\xeb\x9b\xfa\xff\x00\x00\x00\xff\xff\x7e\xfc\xdb\xb9\x68\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2664, mode: os.FileMode(420), modTime: time.Unix(1488731955, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

