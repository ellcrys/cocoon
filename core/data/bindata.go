// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487177964, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x5d\x6f\xea\x38\x10\x7d\xef\xaf\xb0\xac\xfb\xb8\x05\xba\xab\xbe\x20\xed\x43\x96\xb0\x15\x2b\x20\x11\x1f\x0f\xab\x55\x85\xa6\x66\x9a\x5a\x38\x76\x64\x0f\xdc\xcb\x46\xf9\xef\x2b\x27\x61\x1b\x92\x40\x6f\x5f\x6a\xe6\x9c\xf1\x9c\x33\xb1\xc7\xf9\x03\x63\xfc\x2f\xf3\xc6\xc7\xcc\x2f\x19\xe3\x2b\x4c\xa4\xd1\x7c\xcc\x78\xa2\xcc\x1b\x28\xfe\x4b\x15\x9f\x85\x3e\x26\x8c\x30\x46\x3f\xe6\xf9\x2c\x2c\x8a\x0b\xb4\x84\x14\x6f\x82\x9b\x73\x56\x82\x0e\xed\x49\x0a\xbc\x84\x63\x2b\x8d\x95\x74\xe6\x63\xf6\x3c\xaa\x63\x81\x52\x01\x45\x5a\x78\xfe\x3b\x28\x87\x75\x3c\x04\x02\x81\x9a\xd0\x3a\x3e\x66\xff\x94\x41\xc6\xf8\x5e\x3c\xf1\x72\xfd\x5a\xf3\x26\x46\x3b\xb2\x20\x35\x35\x79\x79\xfd\x9f\x31\x3e\xdf\x80\x4d\x90\xbc\x9c\x6f\x39\x10\xd9\xc1\x01\xad\x46\x35\xd0\x90\xe2\x45\x71\xd5\x85\x4f\xa6\x92\xfa\xf8\xa3\x89\x45\x19\x5a\xd0\x7b\x8f\xfd\xce\xeb\x70\x71\x25\x64\x03\xee\xf0\x62\xcd\x31\xbb\xa1\xe3\x5e\xc3\x6a\x27\x47\xed\x8b\xe7\x79\xb9\x2a\x8a\x2b\xac\xe9\x52\x1f\x95\x6a\x80\xbe\x72\xb3\xe8\x75\xe1\xbe\xe2\x04\xee\xd0\x55\x50\xf5\xdd\xca\x13\x5a\xcf\xdd\x1b\x71\x40\xdb\xc6\x27\x46\xbf\xcb\xe4\xff\xa3\xd3\x40\x64\x0a\x49\x59\x24\xcf\x67\x7e\xd9\xd9\x9b\xf9\xfa\x69\x5a\xb7\xf1\x0d\xdc\x47\x97\x00\x36\x29\xad\xf0\x6f\xf9\x32\x5a\x04\xe1\x6e\x31\xdd\x04\xbb\xf5\x64\x35\x8b\x37\xeb\x5d\x38\x5b\x15\xc3\x2b\x24\x9c\xc6\xf3\xe8\xef\x9a\xb0\x5b\x06\x8b\x69\xc1\x5f\xaf\x36\x2d\x5a\x06\xa6\xfa\xd4\xa7\x7e\x12\x4d\xa2\x68\xb9\xbb\x7d\xe2\xbb\xdc\x49\x14\x4e\x77\xdb\xd5\xbc\xf2\x3c\x29\x73\x26\x66\x8f\xdb\xd5\xfc\xab\xac\x4d\xf0\xd2\xce\xda\x40\xf2\x55\xd6\x3c\x58\x76\xd2\xe6\xa0\x7d\xde\x5d\xcb\xeb\xea\x1a\x96\x8d\x7d\x6d\x61\x0b\x24\xe8\xeb\x47\xb7\xb1\xe5\x99\xc0\xd3\xe3\x1e\x33\x65\xce\x8f\xc2\x68\x8d\x82\x8c\x7d\x1c\x0d\x46\x83\xe7\x41\xdf\xd7\x6c\x7c\x37\x9f\x3d\x54\x46\x80\x1a\x3a\x61\x65\x46\xee\xbe\xe6\xb9\x49\x6e\x1f\xb5\x05\xfc\xf8\x53\xaa\xd2\xd0\xd3\xa8\x53\xb5\x46\xd7\xf2\x5f\x5c\xfc\x51\x52\xee\x56\xda\x60\x9a\x29\xa0\xfe\xf6\x04\x96\xe4\x3b\x88\x6a\xb8\xb4\x75\x30\xc6\x5f\x90\x08\xed\xda\x1c\x6d\x39\xc1\xf8\x07\x51\xe6\xc6\xc3\xa1\x85\xef\x83\x44\xd2\xc7\xf1\xed\xe8\xd0\x0a\xa3\x09\x35\x0d\x84\x49\x87\x5a\x98\x3d\xba\x61\x75\xc4\x86\x29\x38\x42\x7b\x69\xc9\xd7\x67\xbb\x6d\xb6\x1c\xde\x0a\x48\x9e\x30\x44\x47\x5f\x76\xb9\xed\x6f\x85\xae\xd4\xee\x7a\xef\x44\xbc\xad\xe6\x51\xbc\x2d\x8a\x6e\x9b\x31\x35\xf6\x5c\x76\x38\xcf\x2f\x3f\x7a\x78\xb3\x28\x5e\xf3\x31\xeb\x7e\xa7\x25\xd2\x77\x63\xab\xd1\x75\xff\xce\x86\xd2\x65\x40\xe2\x23\x86\xb3\x32\xe0\xc7\x47\x5e\x34\x18\x9f\xeb\xd7\xe6\x38\xbf\x61\xed\xb6\xad\x9f\xb1\xe4\xb5\x1c\x6a\x46\xb5\x6c\xe1\x7d\x76\x6f\x58\x2d\xae\xd5\x12\x58\x8a\x8d\x92\xe2\xdc\x56\x3c\xf3\xef\xe0\x09\x14\x1f\xb3\xdf\x46\x9f\x7f\x57\x25\x02\x22\x4c\x33\xea\xde\x09\x1e\xa2\x02\xbf\xe5\xaf\xcf\xfd\x99\x0b\xb3\xc7\xea\x72\x7b\x5e\xaf\xba\xcb\x94\x28\x7a\x9f\xbe\x6d\xb6\x07\xc2\x86\x68\xbe\x26\x48\x92\xf2\x19\x79\xea\xca\xf5\x17\x34\x06\x0b\x4a\xa1\x77\xf4\xf4\x70\xd9\xb1\x78\x28\xfe\x0b\x00\x00\xff\xff\x68\x2a\x7a\xbf\x9c\x08\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2204, mode: os.FileMode(420), modTime: time.Unix(1487177929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

