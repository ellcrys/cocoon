// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1490028425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4b\x6f\xe3\x36\x10\xbe\xe7\x57\x08\xc4\x1e\x9b\x38\xd9\x62\x2f\x06\x7a\x50\xac\x34\x70\xeb\x87\xe0\xc7\xa1\x28\x02\x81\xa6\x27\x32\x61\x8a\x14\xc8\x91\x77\x5d\x41\xff\xbd\x20\x25\x6d\x64\x89\x76\xd6\x97\x30\x33\xdf\x3c\xf8\x91\xf3\x51\xe5\x5d\x10\x90\xbf\xd4\x8e\x8c\x03\xbb\x0c\x02\xb2\x82\x94\x2b\x49\xc6\x01\x49\x85\xda\x51\x41\x7e\xab\xed\xd3\xc8\xda\xca\x72\x1a\x55\x55\x6b\x5b\xd0\x0c\x86\xd6\xcd\x39\x77\x56\x03\xfa\xc4\x19\xb4\xe6\x58\x73\xa5\x39\x9e\xc9\x38\xf8\xf6\xd8\xd8\x42\x21\x42\x5c\x4a\x66\xf1\xef\x54\x18\x68\xec\x11\x45\xca\x40\x22\x68\x43\xc6\xc1\xbf\xce\x18\x04\x64\xcf\x9e\x88\x5b\xbf\x35\xb8\x89\x92\x06\x35\xe5\x12\xbb\xb8\xb2\xf9\x1b\x04\x64\xb6\xa1\x3a\x05\xb4\xed\x7c\x29\x29\xa2\x7e\x38\x82\x96\x20\x1e\x24\xcd\xa0\xed\xb8\xde\xf7\x07\x52\x70\x59\xfc\xe8\xfa\x96\x39\x68\x2a\xf7\xd6\xf7\x07\x69\xcc\xd5\x45\x23\x1b\x6a\x8e\xaf\x5a\x15\xf9\x95\x3e\xbc\x4c\x35\x5b\x28\xa4\xad\x5a\x96\x6e\x55\x55\x17\xbe\xee\xf6\x64\x21\x44\xc7\x69\x4b\x76\xab\x5d\x56\xbc\xa8\x8a\xd4\x1c\xef\x07\xa5\x6b\xa6\x35\x3f\x81\xb6\xa0\xbd\x62\x47\xd0\x7d\xff\x44\xc9\x77\x9e\xfe\xbc\x1e\x1d\x0f\xcf\x68\xda\xee\xc9\x2e\x07\xb9\x83\x80\xbc\x2b\xcd\x20\xc9\x0b\x21\xc8\x38\x40\x5d\xc0\x00\xc1\x54\x96\x35\xd4\xee\xa8\x39\x0c\x53\x48\xc0\xef\x4a\x1f\x93\x4c\xed\x5d\xb5\x83\x32\x38\x44\x51\x9d\x3a\x2e\xc8\x97\x72\xb1\x9c\x87\x51\x32\x7f\xd9\x84\xc9\x7a\xb2\x9a\xc6\x9b\x75\x12\x4d\x57\xd5\xe8\xc2\x13\xbd\xc4\xb3\xe5\x3f\x0d\x20\x59\x84\xf3\x97\x8a\xbc\x0d\xb2\xe6\x9a\x9f\xb8\x80\x14\xf6\xd7\xda\xcf\x95\xc6\x24\xa3\xb9\xad\xfd\x76\xe1\xac\x7a\x44\xbe\xc8\x93\x8f\xc5\xc9\x72\xb2\x5c\x2e\x12\xcf\x74\x0d\x41\x93\x65\xf4\x92\x6c\x57\xb3\x1a\x3a\x51\x4c\x29\x39\x51\x7b\xd8\xae\x66\x9f\x45\x6d\xc2\xd7\x7e\xd4\x86\xa6\x9f\x45\xcd\xc2\xc5\x20\x6c\x46\xe5\xad\xb8\xe7\xed\x74\x16\x25\x71\xb8\x0a\xe7\xeb\x6e\xe8\x73\xc1\xc5\x3e\xa6\x9a\x66\xe6\x46\x74\x34\x5d\xff\x9d\xcc\xa6\xf3\xe9\xa6\x8e\x8d\xb8\x39\xce\x9f\xab\x8a\xdc\xa4\x76\x5d\x0b\x8d\xbb\x00\x03\x82\xdb\x19\x60\xae\x0d\xe3\x1f\x03\x37\x4e\xcd\x0d\x6a\x00\xc3\xdb\x10\x2b\x8d\x33\xba\x03\x51\xa7\x93\x12\x18\xaa\xfe\xc0\xd8\xbd\x1c\x80\x1d\xbd\xcd\x58\x19\x75\x57\x7d\x10\xd4\x69\x94\x0a\x7e\x02\x1f\xa0\xd5\x55\x64\xb9\xcf\x1d\x53\x3c\x58\xf7\x48\x1d\xbd\x6e\xa5\xf1\xa2\xf1\xfb\x03\xa2\x37\xd1\x86\x67\xa0\x0a\x0b\xfe\xfa\xd8\xfe\x3c\xb0\xa9\x95\xe7\x13\xb5\x6c\x3c\x3d\xde\x02\xc6\x5a\xa1\x62\xca\xd1\xe6\x6a\xf6\x20\xd5\xe5\xe0\xf4\x88\x27\x73\x40\xea\x9b\x9c\xe1\x08\xdb\x02\xba\x90\xf7\x3f\xb7\xf8\xe0\x13\x94\x8e\x28\x38\xba\x84\x62\x54\x8c\x0c\xd3\x3c\x47\x73\xfb\xa2\xcd\x54\x7a\x5d\x0f\xe7\xf4\xc7\x9f\x5c\xb8\x5b\xf8\x34\xa0\xa1\xf5\xae\xf9\x7f\x30\x7f\x76\x90\x9b\x95\x36\x90\xe5\x82\x62\x7d\xa7\xfb\x8c\x84\x1a\xf9\x3b\x65\x78\xed\x8e\xbd\x02\x22\xe8\xb5\x2a\x34\x83\x96\x74\x33\x1e\x8d\x34\xfd\xfe\x90\x72\x3c\x14\xbb\xc2\x80\x66\x4a\x22\x48\x7c\x60\x2a\x1b\x49\xa6\xf6\x60\x46\xf5\x8c\x8c\x32\x6a\x10\x74\x4b\xc9\xe7\xc2\xe9\x39\xf3\x15\x08\x8a\xfc\x04\x11\x18\xfc\x94\xe5\xfe\xfe\x56\x60\x5c\xef\xc6\x2b\x98\xf1\xb6\x7e\x2d\xe3\x6d\x55\x0d\x69\x86\x4c\xe9\xb3\x63\xb8\x2c\xdb\x7f\x3c\xb8\xe9\x32\xb6\xf2\x34\x3c\xa7\x45\xfd\xdc\xf4\x1f\xd6\xfa\x37\xe4\xda\x96\x7c\xe6\xee\x24\xca\xd2\xad\x86\xc5\x1c\x2a\x3a\x4b\x9a\x71\x66\xa7\xd0\x90\xf1\x30\xb5\x4b\x1f\x90\x46\x5f\x3a\xf2\x52\xfd\x32\xb4\x1e\x68\x1f\xfe\x6d\x60\xeb\xa3\x6e\xbf\x5d\x11\x37\x39\x45\x76\x88\xe9\x59\x28\x6a\x15\xac\xec\x26\xf8\x58\xbf\x75\x3f\xa8\xae\x9c\xe2\xf5\x13\xfc\x95\xd3\xf3\x9e\xdc\xc5\xa9\x7d\x6c\xa5\xba\xec\x06\xa9\xc6\x58\x09\xce\xce\xfd\x8e\x3a\x52\xf6\xfb\xa3\x5f\xcb\x48\x88\x08\x59\x8e\xc3\xf1\x26\x11\x08\x6a\x53\x7e\xfd\xe6\x8f\x9c\x37\x5f\x2e\x7b\x87\xf3\x76\xd7\x6a\x5c\xe5\xfd\xb8\xdc\xe6\x7b\x8a\xd0\x69\x9a\xac\x91\xa6\xa9\xfb\x6c\xf3\x48\xaf\xd5\x1a\xfb\xd2\x0a\xe1\x9e\xaa\xa7\xbb\x36\x63\x75\x57\xfd\x1f\x00\x00\xff\xff\xbf\xff\x40\x49\xf0\x0b\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 3056, mode: os.FileMode(420), modTime: time.Unix(1490028362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

