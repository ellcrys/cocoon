// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487439267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\xdd\x8f\xe2\x36\x10\x7f\xbf\xbf\xc2\xb2\xee\xb1\xbb\xb0\x57\xdd\x0b\x52\x1f\x38\x42\x57\x54\x40\x22\x3e\x1e\xaa\x0a\xa1\xc1\x78\x83\x85\x63\x47\xf6\x84\x3b\x1a\xe5\x7f\xaf\xec\x84\x6e\xbe\x60\x5b\x55\xea\xbe\xac\x99\xf9\xcd\xd7\x6f\x26\x63\xe7\x9f\x08\xa1\xbf\xe9\x03\x1d\x11\x77\x24\x84\xae\x78\x2c\xb4\xa2\x23\x42\x63\xa9\x0f\x20\xe9\x4f\xa5\x7c\x16\x38\x19\xd3\x4c\x6b\xf5\x94\xe7\xb3\xa0\x28\x6e\xaa\x25\x24\xfc\xae\x72\x73\x4d\xbd\xd2\x72\x73\x11\x8c\xdf\xc4\x91\x11\xda\x08\xbc\xd2\x11\xf9\x3a\xac\x64\x63\x29\xc7\x18\x2a\xe6\xf0\x6f\x20\x2d\xaf\xe4\x01\x20\x30\xae\x90\x1b\x4b\x47\xe4\x0f\x2f\x24\x84\x1e\xd9\x0b\xf5\xe7\x5d\x85\x9b\x68\x65\xd1\x80\x50\x58\xc7\xe5\xd5\x7f\x42\xe8\x7c\x03\x26\xe6\xe8\xd2\xf9\x9c\x03\xa2\x79\x3e\x73\xa3\xb8\x7c\x56\x90\xf0\x5b\xc6\x25\x0b\xef\x48\x29\x54\xf6\xa3\xae\x0b\x53\x6e\x40\x1d\x9d\xee\x17\x5a\x89\x8b\x46\x22\x1b\xb0\xe7\x57\xa3\xb3\xf4\x4e\x1e\x8f\x08\xab\x2a\xc9\x94\x0b\x9e\xe7\xfe\x54\x14\x0d\x5d\xbd\x4a\x95\x49\x59\x53\xba\xc8\xf5\xa0\xcd\xc0\x7d\xc1\x11\xec\xb9\x9b\x41\xc9\xbb\x11\x17\x6e\x1c\xf6\xa8\xd9\x99\x9b\xb6\x7e\xa2\xd5\x9b\x88\xff\x1e\x9d\x9a\x46\x24\x10\xfb\x20\x79\x3e\x73\xc7\x8e\x6f\x42\xe8\x9b\x36\x8c\xef\xd3\x4c\x4a\x3a\x22\x68\x32\xde\x41\x30\x9d\x24\x15\xd1\x07\xb0\xa7\xae\x0b\xc5\xf1\xbb\x36\xe7\x7d\xa2\x8f\x3e\xda\x49\x5b\xec\xa2\xc0\xc4\x9e\x12\xfa\x39\x5f\x86\x8b\x71\xb0\x5f\x4c\x37\xe3\xfd\x7a\xb2\x9a\x45\x9b\xf5\x3e\x98\xad\x8a\x41\x43\x13\x4c\xa3\x79\xf8\x7b\x05\xd8\x2f\xc7\x8b\x69\x41\x77\x1d\xaf\xa9\x11\x17\x21\x79\xcc\x8f\xf7\xd2\x4f\xb5\xc1\x7d\x02\xa9\x8b\xdd\x66\xc8\x57\xa7\x14\x67\xa8\xcd\xd3\x09\xd1\x81\x7e\x1e\x0e\x87\x2d\x58\xb1\x6b\x08\x8a\x56\x03\xa6\xea\xd2\xc7\xfe\x24\x9c\x84\xe1\x72\x7f\xff\x8b\xed\x62\x27\x61\x30\xdd\x6f\x57\xf3\xb2\x67\x13\x6f\x33\xd1\x47\xbe\x5d\xcd\x3f\xb2\xda\x8c\x5f\xdb\x56\x1b\x88\x3f\xb2\x9a\x8f\x97\x1d\xb3\x39\x28\x67\xf7\xb0\xe4\x75\xb9\x46\x6c\x1f\xa9\xad\xd1\xb6\xdd\x0c\x36\x50\x8d\x42\x45\x47\xb7\xad\x91\x36\x38\x87\x03\x97\xa5\x9f\x46\x8b\x08\x21\xcd\xdc\x5a\xe6\x74\xc1\x11\xfa\x1a\xd2\x9d\x28\xe7\xdd\x64\xea\x49\x42\xa6\xd8\x89\x9b\xe7\xbe\xf1\xae\xf8\x7a\x5d\x85\xdb\x68\xdd\xb6\xae\xfa\x1a\xfb\x35\xd3\x6b\x5e\x9b\x70\x67\x30\x90\x9a\x81\x1c\x58\x66\x44\x8a\xf6\x31\xcb\x73\x1d\xdf\xff\xb8\x17\xf0\xe3\x57\x21\x7d\x0b\x5e\x86\x9d\xa8\x95\x76\x2d\xfe\xe4\x8b\x6f\x1e\xf2\x30\xd2\x86\x27\xa9\x04\x2c\x1b\xda\xe6\x73\x6c\x50\xbc\x01\xc3\xde\x6e\x13\x42\x5f\x39\x22\x37\x6b\x9d\x19\x56\x7e\xff\x88\xa9\x1d\x0d\x06\x06\xbe\x3f\xc7\x02\x4f\xd9\x21\xb3\xdc\x30\xad\x90\x2b\x7c\x66\x3a\x19\x28\xa6\x8f\xdc\x0e\x4a\xf2\x06\x09\x58\xe4\xe6\x46\xc9\xc7\x5b\xa0\x5d\xac\xbf\x2e\x25\xa0\xb8\xf0\x80\x5b\xfc\x97\x2c\xff\xcf\x05\xdd\x9d\xa6\xff\x5e\x57\xbb\x6f\x2b\x6e\x7d\x09\xb6\x77\x3b\x45\xdb\xf2\x66\x8b\xb6\x45\xd1\x1d\x1f\x9e\x68\x73\xf5\x93\x93\xe7\xb7\x1f\x3d\xb8\x59\x18\xad\xe9\x88\x74\xe7\x6f\x59\xde\x09\xed\x4b\xf0\x1e\xe5\x2e\xe4\x37\xe1\x27\xec\xcb\xb0\xe3\xcd\xeb\x83\xab\x82\x44\x30\xb7\x19\x2c\x1d\x75\x9d\x7a\xc7\x84\x56\x5b\xa3\xbd\x34\x8a\x1e\xfc\xae\x23\x6b\xa3\x1e\xef\xfd\x40\xd8\x14\x90\x9d\x22\xb8\x4a\x0d\xee\x02\xca\xeb\x0e\xde\xcf\xbb\xfa\x93\xe6\x4e\x53\xee\x37\xe4\x9f\x34\xc3\xe5\x72\xae\x10\xe5\xb1\xa5\xef\x6b\x54\xa3\x49\xef\xa5\x16\xcd\x6c\x11\x0c\x46\x5a\x0a\x76\x6d\x67\x3c\x73\x6f\xc1\x0b\xc8\xea\xd2\xbc\xfd\x35\x42\x8c\x11\x79\x92\x62\x77\x4b\xd1\x80\x4b\x70\x2e\xbf\x7c\xed\xb7\x5c\x54\xaf\x89\xa3\xc7\xf5\x66\x77\x5b\xf4\x45\xef\xf3\x6f\x9b\x1e\x01\x79\x2d\x69\xba\x46\x88\x63\xff\x94\x7a\xe9\xa6\xeb\x56\x66\x04\x06\xa4\xf4\xb7\xce\xcb\xa7\x9b\xc7\xe2\x53\xf1\x57\x00\x00\x00\xff\xff\x8b\xd6\xdb\x90\xa0\x0b\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2976, mode: os.FileMode(420), modTime: time.Unix(1487439261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

