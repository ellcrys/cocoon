// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1488390099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4b\x6f\xe3\x36\x10\xbe\xe7\x57\x10\xc4\x1e\xbb\x71\xb2\xc5\x5e\x0c\xf4\xa0\x58\x69\xe0\xc2\x0f\xc1\x8f\x43\x51\x04\xc2\x98\x62\x14\xc2\x14\x29\x90\x23\xef\xba\x82\xfe\x7b\x41\x49\xde\x48\xa2\xec\x54\x17\xd3\x33\xdf\x3c\xf8\xcd\x43\x2a\xef\x08\xa1\x7f\xe9\x03\x9d\x12\x77\x24\x84\x6e\x78\x2a\xb4\xa2\x53\x42\x53\xa9\x0f\x20\xe9\x6f\x8d\x7c\x1e\x3a\x59\x59\xce\xc3\xaa\xba\xc8\x56\x90\x71\x5f\xba\x3b\xe7\xb5\xd4\x72\x73\x12\x8c\x5f\xc4\x91\x11\xda\x08\x3c\xd3\x29\xf9\xfe\xd0\xca\x02\x29\x03\x5c\x2b\xe6\xf0\x6f\x20\x2d\x6f\xe5\x21\x20\x30\xae\x90\x1b\x4b\xa7\xe4\x9f\x5a\x48\x08\x4d\xd8\x23\xad\xcf\xaf\x2d\x6e\xa6\x95\x45\x03\x42\x61\x17\x57\xb6\xbf\x84\xd0\xc5\x0e\x4c\xca\xd1\xa5\xf3\xa5\x04\x44\x73\x7f\xe4\x46\x71\x79\xaf\x20\xe3\x97\x8c\x9b\x7b\x7f\x20\xa5\x50\xc5\xcf\xae\x6e\x9d\x73\x03\x2a\x71\xba\x3f\x68\x2b\xae\x7a\x89\xec\xc0\x1e\x5f\x8c\x2e\xf2\x2b\x79\x8c\x32\xd5\x5e\xa1\x50\x2e\x6a\x59\xd6\xa7\xaa\xea\xe9\xba\xd7\x53\x85\x94\x1d\xa5\x0b\xd9\x8d\xd6\x8f\xd8\x8b\x8a\x60\x8f\x5f\xbd\xd0\x0d\xd3\x46\x9c\xb8\x71\xa0\x44\xb3\x23\x37\x43\xfd\x4c\xab\x37\x91\xfe\x6a\x8f\x8e\x46\x64\x90\x5e\xee\xe4\x8e\x9e\x6f\x42\xe8\x9b\x36\x8c\xc7\x79\x21\x25\x9d\x12\x34\x05\xf7\x10\x4c\x67\x59\x4b\xed\x01\xec\xbb\xef\x42\x71\xfc\xa1\xcd\x31\xce\x74\x52\x47\x7b\xd7\x16\x7d\x14\x98\xb4\xe6\x82\x7e\x29\x57\xeb\x65\x10\xc6\xcb\xe7\x5d\x10\x6f\x67\x9b\x79\xb4\xdb\xc6\xe1\x7c\x53\x4d\x7a\x9a\xf0\x39\x5a\xac\xff\x6e\x01\xf1\x2a\x58\x3e\x57\xf4\xd5\xf3\x9a\x1b\x71\x12\x92\xa7\x3c\xb9\x96\x7e\xae\x0d\xc6\x19\xe4\x2e\xf6\x6b\x4f\x59\x0d\x88\x7c\x56\xa7\x31\x16\x67\xeb\xd9\x7a\xbd\x8a\x47\xa6\xcb\x07\xcd\xd6\xe1\x73\xbc\xdf\x2c\x1a\xe8\x4c\x33\xad\xd5\x4c\x27\x7c\xbf\x59\x7c\x66\xb5\x0b\x5e\x86\x56\x3b\x48\x3f\xb3\x5a\x04\x2b\xcf\x6c\x01\xea\x96\xdd\xd3\x7e\xbe\x08\xe3\x28\xd8\x04\xcb\x6d\xd7\xf4\xa9\x10\x32\x89\xc0\x40\x66\xab\x8a\xde\x64\x6a\xdb\xec\x8d\xba\x9e\x1e\x5f\x57\x07\xa9\xd5\xef\xa0\x6d\x84\x16\xe0\x17\x35\xd2\x06\x17\x70\xe0\xae\x25\x29\xd3\x4a\x71\x86\xda\x50\x42\x48\x3f\xab\x81\x25\x5d\x72\x84\xb1\x0a\xfa\xad\xe4\x1c\x9b\x42\x7d\xfd\xe5\xfc\x7e\xac\xb1\x3b\xcd\xe9\x0c\x26\x52\x33\x90\x13\xcb\x8c\xc8\xd1\xde\x66\x68\xa1\xd3\xeb\x73\xb9\x84\x9f\x7f\x0a\x59\xd3\xf7\xf8\xe0\x45\x6d\xb5\x5b\xf1\x2f\x5f\x3e\xd5\x90\x9b\x91\x76\x3c\xcb\x25\x60\x53\x8c\x21\x23\x81\x41\xf1\x06\x0c\x47\x2b\x45\x08\x7d\xe1\x88\xdc\x6c\x75\x61\x58\x33\xba\x88\xb9\x9d\x4e\x26\x06\x7e\xdc\xa7\x02\xdf\x8b\x43\x61\xb9\x61\x5a\x21\x57\x78\xcf\x74\x36\x51\x4c\x27\xdc\x4e\x58\xdd\x32\x93\x0c\x2c\x72\x73\xa1\xe4\xf3\x01\x1e\x5e\xb6\x7e\x9b\x49\x40\x71\xe2\x21\xb7\xf8\x29\xcb\xc3\xfb\x6d\xb8\xad\x73\xb7\xa3\x83\x1b\xed\x9b\xad\x1d\xed\xab\xca\xa7\x99\x67\xda\x9c\x6b\x86\xcb\xf2\xf2\x67\x04\x37\x5f\x47\x6e\x4c\xfc\x3a\xad\x9a\xb5\x37\x5c\xf0\xcd\xe3\x73\xed\x42\x3e\x89\xba\x12\xdf\x1e\x3c\x6f\xb5\x3e\x3c\x2b\xc8\x04\x73\xed\x6f\xe9\xd4\x77\x5a\x3b\x26\xb4\x1d\x8d\xce\x64\x54\x23\xd0\x57\x4f\x36\x44\xdd\xde\x86\xa1\xb0\x39\x20\x7b\x8f\xe0\x2c\x35\xb8\xf5\x5a\x76\x1d\x7c\x9c\x5f\xbb\xaf\xe8\x2b\xf5\xb8\x5e\x8b\xff\x53\x07\x97\xcb\xb1\x45\x34\xc7\x81\x7e\xac\x46\xbd\xfa\x7c\x5c\xb5\xea\x67\x8b\x60\x30\xd2\x52\xb0\xf3\x30\xe3\xb9\xfb\xb6\x39\x81\xdb\x41\xbf\x3f\x7c\x3c\xbd\x10\x01\x22\xcf\x72\xf4\x07\x99\x86\x5c\x82\x73\xf9\xed\xfb\xb8\xe5\xb2\x7d\x57\x26\x35\x6e\x34\xbb\xcb\x36\xab\x46\x3f\x67\xf6\x79\x02\xc8\x3b\x49\xd3\x2d\x42\x9a\xd6\x1f\x0a\x8f\x7e\xba\x6e\xab\xb8\xdd\x2e\x65\xbd\x55\x1f\xef\x2e\x1e\xab\xbb\xea\xbf\x00\x00\x00\xff\xff\x72\x3d\x2a\x38\x62\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2658, mode: os.FileMode(420), modTime: time.Unix(1488390076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

