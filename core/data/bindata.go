// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487160071, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x6f\xe2\x30\x10\xbd\xf7\x57\x58\xd6\x4a\xbd\x2c\x50\x76\xd5\x0b\xd2\x1e\xd8\xa4\x5b\xb1\xe2\x23\x2a\x70\x5a\xa1\x6a\xea\x4c\x83\x85\x63\x47\xb6\x61\xcb\x46\xf9\xef\x2b\x3b\xa1\xe4\x03\xda\x5e\x6a\xe6\xbd\xf1\xbc\x79\x19\x4f\x7e\x43\x08\xfd\xad\x5e\xe8\x88\xb8\x23\x21\xf4\x09\x13\xae\x24\x1d\x11\x9a\x08\xf5\x02\x82\x7e\x2d\xe3\x93\xd0\xc5\x98\x62\x4a\xc9\x5e\x9e\x4f\xc2\xa2\x38\x41\x73\x48\xf1\x2a\xb8\x3a\x66\x1e\x34\xa8\x0f\x9c\xe1\x29\x1c\x69\xae\x34\xb7\x47\x3a\x22\xf7\x77\x55\x6c\x2c\xc4\xd8\x2e\x24\x73\xfc\x57\x10\x06\xab\x78\x08\x16\x18\x4a\x8b\xda\xd0\x11\xf9\xe3\x83\x84\xd0\x98\x0d\xa9\x3f\x6f\x2a\x5e\xa0\xa4\xb1\x1a\xb8\xb4\x75\x5e\x5e\xfd\x27\x84\x4e\x57\xa0\x13\xb4\x4e\xce\x97\x1c\xac\xd5\xfd\x1d\x6a\x89\xa2\x2f\x21\xc5\x93\xe2\xd2\x85\x33\x53\x70\xb9\x7f\xab\x63\x8b\x0c\x35\xc8\xd8\x61\x3f\x68\x15\x2e\x1a\x42\x56\x60\x76\x8f\x5a\xed\xb3\x2b\x3a\x3e\x32\xac\xea\x64\x2f\x5d\xf1\x3c\xf7\xa7\xa2\x68\x60\xf5\x2e\xe5\x5e\x88\x1a\xe8\x2a\xd7\x8b\x36\x0b\x5f\x2a\x6e\xc1\xec\xba\x0a\x4a\xdf\x35\x3f\xa0\x76\xdc\x58\xb1\x1d\xea\x36\x1e\x28\xf9\xca\x93\xf7\xd1\xa9\x21\x3c\x85\xc4\x17\xc9\xf3\x89\x3b\x76\xee\x26\xae\x7e\x9a\x56\x36\xbe\x80\xd9\x76\x09\xa0\x13\xdf\x0a\xed\x31\x72\xcb\xc0\x92\x81\x50\x0c\xc4\x20\xc6\x43\x2f\xc6\x4c\xa8\x63\x8f\x29\x29\x91\x59\xa5\xfb\x66\x7b\x4b\x37\x8d\x1b\x8a\x96\xda\x07\x79\xb8\x24\x35\x58\x04\x8b\xc5\xfc\xf9\xfa\x78\x77\xb9\xc1\x22\x7c\x78\x5e\x3f\x4d\xcb\x06\x03\x9f\x13\xa8\x18\xd7\x4f\xd3\xcf\xb2\x56\xe3\xc7\x76\xd6\x0a\x92\xcf\xb2\xa6\xe3\x79\x27\x6d\x0a\xd2\xe5\x7d\xd8\xf2\xb2\x7c\x73\xde\xc5\x4d\x0b\x9b\xa1\x05\xe7\x47\x3b\x67\xaa\x92\xeb\xdf\x75\x06\x6f\xbf\xb8\xf0\x17\x0e\xef\x3a\x92\x2b\x74\xc9\xff\xe1\xec\xa7\xa7\x7c\xa8\x6e\x85\x69\x26\xc0\x5e\x96\x37\xd6\x96\xbf\x02\x2b\x5f\x72\x5b\x07\x21\xf4\x11\xad\x45\xbd\x54\x7b\xed\xd7\x05\xdd\x5a\x9b\x99\xd1\x60\x60\xac\xd2\x90\x60\x3f\x51\x2a\x11\x08\x19\x37\x7d\xa6\xd2\xc1\x4e\xab\x04\xe4\xb5\xd1\xe9\xb8\xef\xf7\xa0\x00\xcb\x0f\x18\xa2\xf1\x6b\xa0\x1c\xbe\x96\xdf\x6d\xd5\x21\x37\x19\x58\xb6\x8d\xe0\x28\x14\xc4\xde\xdf\x1a\xe3\x7c\xde\xd4\x77\x0d\x1a\xdf\x86\x69\x39\x4e\x83\x68\x5d\xee\x80\x68\x5d\x34\xcc\xa3\x33\x4c\x95\x3e\x7a\x93\xf3\xfc\xf4\xa3\xc5\x09\xb9\xd9\x55\x8c\xf2\xd8\xc2\x27\x8b\x68\x49\x47\xa4\xf1\x19\xe9\x1c\xed\x5f\xa5\xcb\x15\x72\x7e\x4e\x45\x53\xad\x05\x6d\x23\x25\x38\x3b\xb6\x15\x4f\xdc\x92\x3e\x80\xa0\x23\xf2\xfd\xee\xfc\xd7\x28\x31\xb6\x16\xd3\xcc\x76\x67\x88\x86\x28\xc0\x5d\xf9\xed\xfe\x72\xe6\x4c\xc5\xfe\x5b\xc7\x9e\x77\x51\xdd\xfb\x54\x5f\xdc\xcb\xeb\x2c\x06\x8b\x35\xd1\x74\x69\x21\x49\xfc\x8e\x1b\x76\xe5\xba\x81\x8e\x40\x83\x10\xe8\x3a\x1a\xde\x9c\x6e\x2c\x6e\x8a\xff\x01\x00\x00\xff\xff\x77\x98\x9f\x28\x39\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1849, mode: os.FileMode(420), modTime: time.Unix(1487160069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

