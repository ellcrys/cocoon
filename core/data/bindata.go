// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487413615, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x5b\x8f\xea\x36\x10\x7e\xdf\x5f\x61\x59\xe7\xb1\x0b\xec\xa9\xce\x0b\x52\x1f\x38\x84\xae\xa8\xb8\x44\x5c\x1e\xaa\x0a\xa1\xc1\xcc\x06\x0b\xc7\x8e\x6c\x87\xb3\x34\xca\x7f\xaf\xec\x84\x6e\x6e\xb0\xad\x2a\x75\x5f\xd6\xcc\x7c\x33\xf3\xcd\x25\x63\x67\x4f\x84\xd0\xdf\xd4\x81\x0e\x89\x3b\x12\x42\x57\x18\x71\x25\xe9\x90\xd0\x48\xa8\x03\x08\xfa\x53\x21\x9f\x06\x4e\xc6\x14\x53\x4a\x3e\x67\xd9\x34\xc8\xf3\x9b\x6a\x01\x31\xde\x55\x6e\xae\x89\x57\x1a\xd4\x17\xce\xf0\x26\x0e\x35\x57\x9a\xdb\x2b\x1d\x92\x6f\x83\x52\x36\x12\x62\x64\x97\x92\x39\xfc\x1b\x08\x83\xa5\x3c\x00\x0b\x0c\xa5\x45\x6d\xe8\x90\xfc\xe1\x85\x84\xd0\x23\x7b\xa1\xfe\xbc\x2b\x71\x63\x25\x8d\xd5\xc0\xa5\xad\xe2\xb2\xf2\x3f\x21\x74\xb6\x01\x1d\xa1\x75\x74\xbe\x64\x60\xad\xee\x9d\x51\x4b\x14\x3d\x09\x31\xde\x18\x17\x55\xf8\x40\x0a\x2e\xd3\xf7\xaa\x6e\x99\xa0\x06\x79\x74\xba\x5f\x68\x29\xce\x6b\x44\x36\x60\xce\xaf\x5a\xa5\xc9\x1d\x1e\x8f\x0a\x56\x66\x92\x4a\x17\x3c\xcb\xfc\x29\xcf\x6b\xba\x6a\x96\x32\x15\xa2\xa2\x74\x91\xab\x41\xeb\x81\xbb\x82\x5b\x30\xe7\x36\x83\xa2\xee\x9a\x5f\x50\x3b\xec\x51\xb1\x33\xea\xa6\x7e\xac\xe4\x1b\x8f\xfe\x1e\x9d\x8a\x86\xc7\x10\xf9\x20\x59\x36\x75\xc7\x96\x6f\x42\xe8\x9b\xd2\x0c\xf7\x49\x2a\x04\x1d\x12\xab\x53\x6c\x21\x98\x8a\xe3\xb2\xd0\x07\x30\xa7\xb6\x0b\xd0\x91\x4f\x96\x7e\xc9\x16\xcb\xf9\x28\xd8\xcf\x27\x9b\xd1\x7e\x3d\x5e\x4d\xc3\xcd\x7a\x1f\x4c\x57\x79\xbf\xa6\x09\x26\xe1\x6c\xf9\x7b\x09\xd8\x2f\x46\xf3\x49\x4e\x77\x2d\xaf\x89\xe6\x17\x2e\x30\xc2\xe3\x3d\x62\x89\xd2\x76\x1f\x43\xe2\x62\x37\x73\xf7\xbc\xa5\x44\x66\x95\x7e\x3e\x59\xeb\x40\x3f\x0f\x06\x83\x06\x2c\xdf\xd5\x04\x79\xa3\xb4\x13\x79\xe9\xaa\xeb\x78\x39\x5e\x2e\x17\xfb\xfb\xdf\x62\x1b\x3b\x5e\x06\x93\xfd\x76\x35\x2b\xba\x31\xf6\x36\x63\x75\xc4\xed\x6a\xf6\x99\xd5\x66\xf4\xda\xb4\xda\x40\xf4\x99\xd5\x6c\xb4\x68\x99\xcd\x40\x3a\xbb\x87\x29\xaf\x8b\x05\x61\xba\x8a\xda\x18\x5a\xd3\x66\xb0\x81\x72\x14\xca\x72\xb4\xdb\x1a\x2a\x6d\x67\x70\x40\x51\xf8\xa9\xb5\x88\x10\x52\xe7\xd6\x30\xa7\x73\xb4\xd0\xd5\x90\xf6\x44\x39\xef\x3a\x95\xcf\x02\x52\xc9\x4e\xa8\x7b\x5d\x83\x5b\xd6\xeb\x75\x15\xae\x9b\xb6\x65\x57\x23\xbf\x3e\x3a\x8d\x2b\xf3\xed\x0c\xfa\x42\x31\x10\x7d\xc3\x34\x4f\xac\x79\x5c\xe3\x99\x8a\xee\x7f\xb4\x73\x78\xff\x95\x0b\xdf\x80\x97\x41\x2b\x6a\xa9\x5d\xf3\x3f\x71\xfe\xdd\x43\x1e\x46\xda\x60\x9c\x08\xb0\x45\x3b\x9b\xd5\x1c\x69\xcb\xdf\x80\xd9\xce\x5e\x13\x42\x5f\xd1\x5a\xd4\x6b\x95\x6a\x7f\x17\x50\xd7\x23\x33\xec\xf7\x35\xfc\xe8\x45\xdc\x9e\xd2\x43\x6a\x50\x33\x25\x2d\x4a\xdb\x63\x2a\xee\x4b\xa6\x8e\x68\xfa\x45\xf1\xfa\x31\x18\x8b\xfa\x56\x92\xcf\x77\x40\x33\x59\x7f\x0d\x0a\xb0\xfc\x82\x01\x1a\xfb\x2f\xab\xfc\x7f\x24\x74\x67\x80\xfe\x7b\x2a\xcd\x56\xad\xd0\x78\xd6\xa6\x73\x1d\x85\xdb\xe2\x92\x0a\xb7\x79\xde\x9e\x18\x8c\x95\xbe\xfa\x61\xc9\xb2\xdb\x8f\x0e\xdc\x74\x19\xae\xe9\x90\xb4\x47\x6e\x81\xf6\x87\xd2\xad\xfb\xec\x5e\x95\x5d\xc8\xef\xdc\x0f\xd5\xd7\x41\xcb\x9b\xd7\x07\x57\x09\x31\x67\x6e\x15\x18\x3a\x6c\x3b\xf5\x8e\x09\x2d\xd7\x44\x73\x4b\xe4\x1d\xf8\x5d\x4b\xd6\x44\x3d\x5e\xf4\x01\x37\x09\x58\x76\x0a\xe1\x2a\x14\xb8\x1b\x27\xab\x3a\xf8\x38\xef\xaa\xaf\x93\x3b\x4d\xb9\xdf\x90\x7f\xd2\x0c\xc7\xe5\x5c\x22\x8a\x63\x43\xdf\xd5\xa8\x5a\x93\x3e\x52\xcd\xeb\x6c\x2d\x68\x1b\x2a\xc1\xd9\xb5\xc9\x78\xea\x9e\x75\x17\x10\xe5\x2d\x79\xfb\xab\x85\x18\x59\x8b\x71\x62\xdb\x8b\x89\x06\x28\xc0\xb9\xfc\xfa\xad\xdb\x72\xae\x8e\xfe\x7b\x3b\x7a\x5c\x27\xbb\xdb\x66\xcf\x3b\x5f\x72\xdb\xe4\x08\x16\x2b\xa4\xe9\xda\x42\x14\xf9\x57\xd1\x4b\x9b\xae\xdb\x92\x21\x68\x10\xc2\x5f\x33\x2f\x4f\x37\x8f\xf9\x53\xfe\x57\x00\x00\x00\xff\xff\x5e\x89\x81\xd7\x6b\x0b\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2923, mode: os.FileMode(420), modTime: time.Unix(1487412996, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

