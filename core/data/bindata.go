// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1488028231, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4b\x6f\xe3\x36\x10\xbe\xe7\x57\x10\xc4\x1e\x9b\xd8\xd9\x62\x2f\x06\x7a\x50\xac\x34\x70\xe1\x87\xe0\xc7\xa1\x28\x02\x61\x42\x31\x0a\x61\x8a\x14\xc8\x91\x77\x5d\x41\xff\xbd\xa0\x24\x27\x92\xa8\x38\xf5\x25\xcc\xcc\x37\xaf\x6f\x38\x43\x95\x37\x84\xd0\xbf\xf4\x0b\x9d\x11\x77\x24\x84\x6e\x79\x2a\xb4\xa2\x33\x42\x53\xa9\x5f\x40\xd2\xdf\x1a\xf9\x22\x74\xb2\xb2\x5c\x84\x55\x75\x91\xad\x21\xe3\xbe\x74\x7f\xce\x6b\xa9\xe5\xe6\x24\x18\xbf\x88\x23\x23\xb4\x11\x78\xa6\x33\xf2\x63\xda\xca\x02\x29\x03\xdc\x28\xe6\xf0\xaf\x20\x2d\x6f\xe5\x21\x20\x30\xae\x90\x1b\x4b\x67\xe4\x9f\x5a\x48\x08\x4d\xd8\x3d\xad\xcf\xcf\x2d\x6e\xae\x95\x45\x03\x42\x61\x17\x57\xb6\x7f\x09\xa1\xcb\x3d\x98\x94\xa3\x4b\xe7\x5b\x09\x88\xe6\xee\xc8\x8d\xe2\xf2\x4e\x41\xc6\x2f\x19\x37\x75\x7f\x20\xa5\x50\xc5\xaf\xae\x6e\x93\x73\x03\x2a\x71\xba\x3f\x68\x2b\xae\x7a\x89\xec\xc1\x1e\x9f\x8c\x2e\xf2\x4f\xf2\x18\x65\xaa\x2d\xa1\x50\x2e\x6a\x59\xd6\xa7\xaa\xea\xe9\xba\xe5\xa9\x42\xca\x8e\xd2\x85\xec\x46\xeb\x47\xec\x45\x45\xb0\xc7\x5b\x2f\x74\xc3\xb4\x11\x27\x6e\x1c\x28\xd1\xec\xc8\xcd\x50\x3f\xd7\xea\x55\xa4\xef\xd7\xa3\xa3\x11\x19\xa4\x97\x9a\xdc\xd1\xf3\x4d\x08\x7d\xd5\x86\xf1\x38\x2f\xa4\xa4\x33\x82\xa6\xe0\x1e\x82\xe9\x2c\x6b\xa9\x7d\x01\xfb\xe6\xbb\x50\x1c\x7f\x6a\x73\x8c\x33\x9d\xd4\xd1\xde\xb4\x45\x1f\x05\x26\xad\xb9\xa0\xdf\xca\xf5\x66\x15\x84\xf1\xea\x71\x1f\xc4\xbb\xf9\x76\x11\xed\x77\x71\xb8\xd8\x56\x93\x9e\x26\x7c\x8c\x96\x9b\xbf\x5b\x40\xbc\x0e\x56\x8f\x15\x7d\xf6\xbc\xe6\x46\x9c\x84\xe4\x29\x4f\x3e\x4b\x3f\xd7\x06\xe3\x0c\x72\x17\x7b\xc8\x50\x5d\x9d\x52\x9c\xa1\x36\xb7\x6f\x88\x0e\xf4\xfb\x74\x3a\x1d\xc0\xaa\xe7\x9e\xa0\x1a\x34\xe0\x51\x9d\xc6\xd8\x9f\x6f\xe6\x9b\xcd\x3a\x1e\x99\x4a\x1f\x34\xdf\x84\x8f\xf1\x61\xbb\x6c\xa0\x73\xcd\xb4\x56\x73\x9d\xf0\xc3\x76\xf9\x95\xd5\x3e\x78\x1a\x5a\xed\x21\xfd\xca\x6a\x19\xac\x3d\xb3\x25\xa8\x6b\x76\x0f\x87\xc5\x32\x8c\xa3\x6d\xb0\xda\x75\x2d\x1f\x0a\x21\x93\x08\x0c\x64\xb6\xaa\xe8\x55\xa2\x76\xcd\xba\xb1\x63\xad\x78\x9f\x04\x56\x7b\xb5\x7e\x1a\x7b\x68\x2f\x50\xcb\xa5\x7f\x19\x22\x6d\x70\x09\x2f\x5c\x36\x7e\x7a\x8d\x25\x84\xf4\x73\x1b\x98\xd3\x15\x47\x18\x6b\xa3\x7f\x0f\x9d\x77\x53\xa8\xdb\xf7\x08\x77\x63\x53\xd1\xb9\xd9\xce\x60\x22\x35\x03\x39\xb1\xcc\x88\x1c\xed\x75\x9e\x96\x3a\xfd\x7c\xa8\x57\xf0\xeb\x4f\x21\x6b\x12\xef\xa7\x5e\xd4\x56\xbb\x13\xff\xf2\xd5\x43\x0d\xb9\x1a\x69\xcf\xb3\x5c\x02\x36\x2d\x19\x32\x12\x18\x14\xaf\xc0\x70\xb4\x5f\x84\xd0\x27\x8e\xc8\xcd\x4e\x17\x86\x35\x73\x8f\x98\xdb\xd9\x64\x62\xe0\xe7\x5d\x2a\xf0\xad\x78\x29\x2c\x37\x4c\x2b\xe4\x0a\xef\x98\xce\x26\x8a\xe9\x84\xdb\x49\xd3\xe2\x49\x06\x16\xb9\xb9\x50\xf2\xf5\xf4\x0f\x8b\xad\x9f\x42\x09\x28\x4e\x3c\xe4\x16\xbf\x64\x79\x58\xdf\x96\xdb\x3a\x77\x3b\x3a\xbd\xd1\xa1\x59\xf9\xd1\xa1\xaa\x7c\x9a\x79\xa6\xcd\xb9\x66\xb8\x2c\x2f\xff\x8c\xe0\x16\x9b\xc8\x0d\x8b\xdf\xa7\x75\xb3\x33\x87\xaf\x43\xf3\xf3\xb9\x76\x21\x1f\x44\xdd\x89\xef\x53\xcf\x5b\xad\x0f\xcf\x0a\x32\xc1\xdc\x0c\x58\x3a\xf3\x9d\xd6\x8e\x09\x6d\xe7\x63\x38\x1e\xd5\x08\xfe\xd9\x93\x0d\x51\xd7\xf7\x62\x28\x6c\x0e\xc8\xde\x22\x38\x4b\x0d\x6e\x41\x97\x5d\x07\x1f\xe7\xe7\xee\x23\xff\x49\x53\x3e\x6f\xc8\xff\x69\x86\xcb\xe5\xd8\x22\x9a\xe3\x40\x3f\xd6\xa8\x5e\x93\x3e\x4a\xad\xfa\xd9\x22\x18\x8c\xb4\x14\xec\x3c\xcc\x78\xe1\xbe\x8e\x4e\x20\xdb\x47\xe5\xf2\xeb\x85\x08\x10\x79\x96\xa3\x3f\xcd\x34\xe4\x12\x9c\xcb\xef\x3f\xc6\x2d\x57\xed\x6b\x9b\xd4\xb8\xd1\xec\x2e\x2b\xad\x1a\xfd\x20\x3a\xe4\x09\x20\xef\x24\x4d\x77\x08\x69\x5a\x7f\x6a\xdc\xfb\xe9\xba\xd5\xe2\xd6\xbc\x94\xf5\x7e\xbd\xbf\xb9\x78\xac\x6e\xaa\xff\x02\x00\x00\xff\xff\x26\xc6\x00\x8c\xa4\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2724, mode: os.FileMode(420), modTime: time.Unix(1488023573, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

