// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487154949, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x6f\xe3\x38\x0c\xbd\xf7\x57\x08\xc2\x1e\xb7\x49\xb3\x8b\x5e\x02\xcc\x21\x63\x77\x8a\x0c\xf2\x61\x34\xc9\x69\x10\x14\xac\xcd\xba\x42\x64\xc9\x90\x98\x4c\x33\x86\xff\xfb\x40\xb2\xd3\xf8\x23\x69\x7b\x29\xc3\x47\x8a\x8f\xcf\x24\x8b\x1b\xc6\xf8\x4f\xfd\xc2\xc7\xcc\x99\x8c\xf1\x27\x4c\x85\x56\x7c\xcc\x78\x2a\xf5\x0b\x48\xfe\x6f\xe5\x9f\x86\xce\x17\xeb\x58\x6b\x75\x5b\x14\xd3\xb0\x2c\x4f\xd0\x02\x32\xbc\x0a\xae\x8f\xb9\x07\x2d\x9a\x83\x88\xf1\xe4\x8e\x8c\xd0\x46\xd0\x91\x8f\xd9\xfd\x5d\xed\x9b\x48\x39\xa1\xa5\x8a\x5d\xfc\x2b\x48\x8b\xb5\x3f\x04\x82\x18\x15\xa1\xb1\x7c\xcc\x7e\x79\x27\x63\x3c\x89\x47\xdc\xdb\xdb\x3a\x2e\xd0\xca\x92\x01\xa1\xa8\x19\x57\xd4\xff\x19\xe3\xb3\x35\x98\x14\xc9\xd1\xf9\xa7\x00\x22\x33\xd8\xa1\x51\x28\x07\x0a\x32\x3c\x31\xae\x54\x38\x47\x4a\xa1\xf6\xef\x4d\x6c\x99\xa3\x01\x95\x38\xec\x1b\xaf\xdd\x65\x8b\xc8\x1a\xec\xee\xd1\xe8\x7d\x7e\x85\xc7\x67\x82\xd5\x9d\xec\x95\x2b\x5e\x14\xde\x2a\xcb\x16\xd6\xec\x52\xed\xa5\x6c\x80\xae\x72\xb3\x68\xbb\xf0\xa5\xe2\x04\x76\xd7\x67\x50\xe9\x6e\xc4\x01\x8d\x8b\x4d\x74\xbc\x43\xd3\xc5\x03\xad\x5e\x45\xfa\x31\x3a\x0d\x44\x64\x90\xfa\x22\x45\x31\x75\x66\xef\x6d\xe6\xea\x67\x59\x2d\x63\xac\x95\xc2\x98\x74\xb7\x02\x63\x1c\x4c\xea\xfb\xe1\x96\xc0\x10\xdf\xb6\xf0\xb2\x43\xe8\x41\x1d\x2e\xb1\x09\x96\xc1\x72\xb9\x78\xbe\x3e\xc1\xfd\xd8\x60\x19\x3e\x3c\x6f\x9e\x66\x55\x0f\x81\xcf\x09\x74\x82\x9b\xa7\xd9\x57\x59\xeb\xc9\x63\x37\x6b\x0d\xe9\x57\x59\xb3\xc9\xa2\x97\x36\x03\xe5\xf2\x3e\x6d\x79\x55\xad\x95\xd7\x68\xdb\xc1\xe6\x48\xe0\xf4\xe8\xe6\xcc\x74\x7a\xfd\xd3\xcd\xe1\xfd\x87\x90\xfe\xc1\xd1\x5d\x8f\x72\x8d\xae\xc4\x1f\x9c\x7f\xf7\x21\x9f\xb2\x5b\x63\x96\x4b\xa0\xcb\xf4\x26\x86\xc4\x2b\xc4\xd5\xb2\x76\x79\x30\xc6\x1f\x91\x08\xcd\x4a\xef\x8d\xbf\x08\xfc\x8d\x28\xb7\xe3\xe1\xd0\x92\x36\x90\xe2\x20\xd5\x3a\x95\x08\xb9\xb0\x83\x58\x67\xc3\x9d\xd1\x29\xa8\x61\x82\x87\xdb\x04\x73\xa9\x8f\xb7\x1f\x63\x35\xb0\x6f\x3d\xf5\xfd\xa9\x93\x40\xe2\x80\x21\x5a\xbf\xe9\x43\xa9\x63\x90\x1d\xbd\xbb\xac\x43\x61\x73\xa0\xf8\x2d\x82\xa3\xd4\x90\x78\x7d\x1b\x11\x67\x7b\xdb\x3c\x27\x68\x7d\x1b\xb6\xa3\x38\x0f\xa2\x4d\xb5\xe6\xd1\xa6\x6c\x89\xc7\xe7\x98\x69\x73\xf4\x22\x17\xc5\xe9\x47\x27\x26\x14\x76\x57\x47\x54\x66\x07\x9f\x2e\xa3\x15\x1f\xb3\xd6\x67\xe4\x0b\xa4\xdf\xda\x54\x57\xe2\xbc\x4e\x65\x9b\xad\x5b\xb6\x48\x4b\x11\x1f\xbb\x8c\xa7\xee\x0e\x1f\x40\xf2\x31\xfb\xff\xee\xfc\xd7\x2a\x31\x21\xc2\x2c\xa7\xfe\x0c\xf1\x10\x25\xb8\x27\xff\xbb\xbf\x9c\x39\xd7\x89\xff\xd6\x89\x8f\xbb\xc8\xee\x63\xaa\x2f\x9e\xde\x4d\x9e\x00\x61\x83\x34\x5f\x11\xa4\xa9\x3f\x63\xa3\x3e\x5d\x37\xd0\x11\x18\x90\x12\x5d\x47\xa3\x9b\xd3\x8b\xe5\x4d\xf9\x37\x00\x00\xff\xff\xeb\x22\x7c\x98\x1c\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1820, mode: os.FileMode(420), modTime: time.Unix(1487154905, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

