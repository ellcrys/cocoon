// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487166091, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\xcb\x8e\xeb\x36\x0c\xdd\xcf\x57\x08\x42\x97\xcd\xab\xc5\xdd\x04\xe8\x22\xb5\x6f\x07\x29\xf2\xc2\x24\x59\x15\xc1\x05\xaf\xcc\xf1\x08\x91\x25\x43\x62\xd2\x49\x0d\xff\x7b\x21\xd9\x99\xf8\x91\xcc\x64\x13\x9a\x87\x14\x0f\x8f\x28\x16\x4f\x8c\xf1\xbf\xcd\x4f\x3e\x65\xde\x64\x8c\xbf\x60\x2a\x8d\xe6\x53\xc6\x53\x65\x7e\x82\xe2\xbf\x56\xfe\x79\xec\x7d\xc2\x08\x63\xf4\xa0\x28\xe6\x71\x59\x5e\xa1\x15\x64\xf8\x10\xdc\x5d\xf2\x00\x3a\xb4\x67\x29\xf0\xea\xde\x58\x69\xac\xa4\x0b\x9f\xb2\x6f\xe3\xda\x37\x53\x6a\x46\x6b\x2d\x7c\xfc\x2b\x28\x87\xb5\x3f\x06\x02\x81\x9a\xd0\x3a\x3e\x65\xff\x04\x27\x63\x3c\x11\x13\x1e\xec\x43\x1d\x17\x19\xed\xc8\x82\xd4\xd4\x8c\x2b\xea\x7f\xc6\xf8\x62\x07\x36\x45\xf2\x74\x7e\x29\x80\xc8\x0e\x8f\x68\x35\xaa\xa1\x86\x0c\xaf\x8c\x2b\x15\x6e\x91\x4a\xea\xd3\x7b\x13\x5b\xe7\x68\x41\x27\x1e\xfb\x83\xd7\xee\xb2\x45\x64\x07\xee\xf8\x6c\xcd\x29\x7f\xc0\xe3\x33\xc1\xea\x4e\x4e\xda\x17\x2f\x8a\x60\x95\x65\x0b\x6b\x76\xa9\x4f\x4a\x35\x40\x5f\xb9\x59\xb4\x5d\xf8\x5e\x71\x02\x77\xec\x33\xa8\x74\xb7\xf2\x8c\xd6\xc7\x26\x46\x1c\xd1\x76\xf1\xc8\xe8\x57\x99\x7e\x8c\x4e\x03\x91\x19\xa4\xa1\x48\x51\xcc\xbd\xd9\x3b\x9b\xf9\xfa\x59\x56\xcb\x28\x80\xfa\x38\xd8\x34\x74\xc2\x47\xca\x08\x50\x23\x27\xac\xcc\xc9\x8d\x12\x3c\x0f\x12\xcc\x95\xb9\x0c\x84\xd1\x1a\x05\x19\x3b\x18\x0f\xc7\xc3\xc9\xd0\xbd\xf1\x43\xeb\x98\xb2\xc3\xf8\xbb\x3e\xdf\xa3\x1b\xad\xa3\xf5\x7a\xf5\xe3\xf1\x88\xf7\x63\xa3\x75\xfc\xfd\xc7\xfe\x65\x51\x35\x19\x85\x9c\xc8\x24\xb8\x7f\x59\x7c\x95\xb5\x9b\x3d\x77\xb3\x76\x90\x7e\x95\xb5\x98\xad\x7a\x69\x0b\xd0\x3e\xef\xd3\x96\xb7\xd5\xbb\x0b\x52\x1e\x3a\xd8\x12\x09\xbc\x1e\xdd\x9c\x85\x49\x1f\xdf\xed\x12\xde\xff\x92\x2a\x1c\x38\x19\xf7\x28\xd7\xe8\x56\xfe\x87\xcb\x3f\x43\xc8\xa7\xec\x76\x98\xe5\x0a\xe8\x3e\xbd\x99\x25\xf9\x0a\xa2\x7a\xcd\x5d\x1e\x8c\xf1\x67\x24\x42\xbb\x35\x27\x1b\x56\x06\x7f\x23\xca\xdd\x74\x34\x72\x64\x2c\xa4\x38\x4c\x8d\x49\x15\x42\x2e\xdd\x50\x98\x6c\x74\xb4\x26\x05\xfd\xc5\xfc\x74\x1b\x0a\x1b\x51\x01\xc9\x33\xc6\xe8\xc2\x42\x68\xcf\x63\x47\xfd\x6e\x0f\xb1\x74\x39\x90\x78\xdb\xc0\x45\x19\x48\x82\xda\x8d\x88\x9b\x7d\x68\x6e\x1f\x74\xa1\x29\xd7\xd1\x9f\x47\x9b\x7d\xb5\x15\x36\xfb\xb2\x25\x25\x5f\x62\x66\xec\x25\x48\x5e\x14\xd7\x8f\x4e\x4c\x2c\xdd\xb1\x8e\xa8\xcc\x0e\x3e\x5f\x6f\xb6\x7c\xca\x5a\x97\xca\x57\x48\xff\x1a\x5b\x2d\x95\xdb\xe3\x2a\xdb\x6c\x09\x2c\x6d\x8c\x92\xe2\xd2\x65\x3c\xf7\x6b\xfb\x0c\x8a\x4f\xd9\xef\xe3\xdb\xaf\x55\x62\x46\x84\x59\x4e\xfd\x89\xe2\x31\x2a\xf0\x47\xfe\xf6\xed\x7e\xe6\xd2\x24\xe1\xe6\x93\x10\x77\x97\xdd\xc7\x8c\xdf\xdd\xd4\xfb\x3c\x01\xc2\x06\x69\xbe\x25\x48\xd3\xb0\xf5\x26\x7d\xba\x7e\xbc\x37\x60\x41\x29\xf4\x1d\x4d\x9e\xae\x27\x96\x4f\xe5\xff\x01\x00\x00\xff\xff\x5a\xb3\x35\x2e\x4b\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1867, mode: os.FileMode(420), modTime: time.Unix(1487166078, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

