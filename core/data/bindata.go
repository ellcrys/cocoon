// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487160640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4f\x6f\xfa\x38\x10\xbd\xf7\x53\x58\xd6\x1e\x0b\x94\x5d\xf5\x82\xb4\x07\x36\xe9\x56\xac\xf8\xa7\x02\xa7\x15\xaa\xa6\xc9\x10\x2c\x1c\x3b\xb2\x07\xb6\x6c\x94\xef\xfe\x93\x9d\x50\xf2\x07\x5a\x2e\x4c\xe6\xbd\xf1\xbc\x19\x8f\x27\x7f\x60\x8c\xff\xa3\x3f\xf8\x88\x39\x93\x31\xfe\x86\x89\xd0\x8a\x8f\x18\x4f\xa4\xfe\x00\xc9\x1f\x4b\xff\x24\x74\xbe\x48\x47\x5a\xab\x5e\x9e\x4f\xc2\xa2\xb8\x40\x73\x48\xf1\x2e\xb8\x3e\x67\x1e\xb4\x68\x4e\x22\xc2\x8b\x7b\x69\x84\x36\x82\xce\x7c\xc4\x9e\x9f\x2a\xdf\x58\xca\x31\x2d\x54\xe4\xf8\x3b\x90\x16\x2b\x7f\x08\x04\x11\x2a\x42\x63\xf9\x88\xfd\xeb\x9d\x8c\xf1\x38\x1a\x72\x6f\x6f\x2b\x5e\xa0\x95\x25\x03\x42\x51\x9d\x97\x57\xff\x8c\xf1\xe9\x1a\x4c\x82\xe4\xe4\xfc\x96\x03\x91\xe9\x1f\xd0\x28\x94\x7d\x05\x29\x5e\x14\x97\x5d\xb8\x32\xa5\x50\xc7\xcf\x3a\xb6\xc8\xd0\x80\x8a\x1d\xf6\x27\xaf\xdc\x45\x43\xc8\x1a\xec\xe1\xd5\xe8\x63\x76\x47\xc7\x77\x0d\xab\x2a\x39\x2a\x97\x3c\xcf\xbd\x55\x14\x0d\xac\x5e\xa5\x3a\x4a\x59\x03\x5d\xe6\x7a\xd2\x66\xe2\x5b\xc9\x09\xec\xa1\xab\xa0\xec\xbb\x11\x27\x34\x8e\x1b\xeb\xe8\x80\xa6\x8d\x07\x5a\xed\x44\xf2\x35\x3a\x35\x44\xa4\x90\xf8\x24\x79\x3e\x71\x66\xe7\x6c\xe6\xf2\xa7\x69\xd5\xc6\x0f\xb0\xfb\x2e\x01\x4c\xe2\x4b\xe1\xbd\x88\x3f\x32\x2e\x2d\x1b\xec\x75\x8a\x7c\xdb\x20\x16\x2d\x51\x2f\xea\x74\x4b\x51\xb0\x08\x16\x8b\xf9\xfb\xfd\x29\xee\x72\x83\x45\xf8\xf2\xbe\x79\x9b\x96\x75\x04\x3e\x26\xd0\x31\x6e\xde\xa6\x3f\x45\xad\xc7\xaf\xed\xa8\x35\x24\x3f\x45\x4d\xc7\xf3\x4e\xd8\x14\x94\x8b\xfb\xb6\xe4\x55\xf9\xb4\x7c\xb3\xb6\x2d\x6c\x86\x04\xae\x1f\xed\x98\xa9\x4e\xee\x5f\xdf\x0c\x3e\xff\x16\xd2\x1f\x38\x7c\xea\x48\xae\xd0\x95\xf8\x1f\x67\x7f\x79\xca\xb7\xea\xd6\x98\x66\x12\xe8\xb6\xbc\xb1\x21\xb1\x83\xa8\x7c\xb0\x6d\x1d\x8c\xf1\x57\x24\x42\xb3\xd2\x47\xe3\xb7\x02\xdf\x13\x65\x76\x34\x18\x58\xd2\x06\x12\xec\x27\x5a\x27\x12\x21\x13\xb6\x1f\xe9\x74\x70\x30\x3a\x01\x35\x88\xf1\xd4\x8b\x31\x93\xfa\xdc\x8b\xb4\x52\x18\x91\x36\xfd\x1b\x23\xe6\xd7\x9d\x04\x12\x27\x0c\xd1\xfa\xd7\xee\x47\x6c\x60\xe9\xb8\xdb\xb9\x88\x66\x65\x6d\xf5\xa1\xb0\x19\x50\xb4\x5f\xc2\x59\x6a\x88\x7d\x9f\x6b\x8c\xab\xbd\xad\xaf\x16\xb4\xbe\x1c\xdb\xea\x3c\x0f\x96\x9b\xf2\xc9\x2f\x37\x45\xa3\x89\x7c\x86\xa9\x36\x67\xdf\xec\x3c\xbf\x7c\xb4\x38\xa1\xb0\x87\x8a\x51\x9a\x2d\x7c\xb2\x58\xae\xf8\x88\x35\xae\x93\xcf\x91\xfe\xd3\xa6\xdc\x18\xd7\x67\x55\x34\xd5\x12\x18\x5a\x6a\x29\xa2\x73\x5b\xf1\xc4\xed\xe4\x13\x48\x3e\x62\x7f\x3c\x5d\x7f\x8d\x14\x63\x22\x4c\x33\xea\xce\x12\x0f\x51\x82\x3b\xf2\xf7\xe7\xdb\x91\x33\x1d\xfb\x3b\x8f\x3d\xef\xa6\xba\xaf\xe9\xbe\xb9\x86\x37\x59\x0c\x84\x35\xd1\x7c\x45\x90\x24\x7e\xa5\x0d\xbb\x72\xdd\x60\x2f\xc1\x80\x94\xe8\x2a\x1a\x3e\x5c\x4e\x2c\x1e\x8a\x5f\x01\x00\x00\xff\xff\xb6\x56\x92\xb5\x28\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1832, mode: os.FileMode(420), modTime: time.Unix(1487160623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

