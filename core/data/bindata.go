// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487322284, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4b\x8f\xe2\x38\x10\xbe\xf7\xaf\xb0\xac\x39\x6e\x37\xf4\xac\xe6\x82\xb4\x07\x86\xb0\x2d\x56\x3c\x22\x1e\x87\xd5\x0a\xa1\xc2\xb8\x83\x85\x63\x47\x76\xc1\x0c\x1b\xe5\xbf\xaf\xec\x84\xe9\x24\x0e\xf4\x72\x69\x77\xd5\x57\xaf\xaf\x5c\xe5\xe4\x4f\x84\xd0\xbf\xf4\x9e\x0e\x88\x3b\x12\x42\x97\x3c\x11\x5a\xd1\x01\xa1\x89\xd4\x7b\x90\xf4\xb7\x52\x3e\x89\x9c\x8c\x69\xa6\xb5\x7a\xce\xf3\x49\x54\x14\x37\xd5\x1c\x52\x7e\x57\xb9\xbe\x66\x5e\x69\xb9\xb9\x08\xc6\x6f\xe2\xd8\x08\x6d\x04\x5e\xe9\x80\x7c\xeb\x57\xb2\xa1\x94\x43\x5c\x28\xe6\xf0\xef\x20\x2d\xaf\xe4\x11\x20\x30\xae\x90\x1b\x4b\x07\xe4\x1f\x2f\x24\x84\x1e\xd8\x2b\xf5\xe7\x6d\x85\x1b\x69\x65\xd1\x80\x50\x58\xc7\xe5\xd5\x5f\x42\xe8\x74\x0d\x26\xe1\xe8\xd2\xf9\x92\x03\xa2\x79\x39\x71\xa3\xb8\x7c\x51\x90\xf2\x5b\xc6\x25\x0b\x1f\x48\x29\xd4\xf9\x67\x5d\xb7\xc8\xb8\x01\x75\x70\xba\x3f\x68\x25\x2e\x1a\x89\xac\xc1\x9e\xde\x8c\x3e\x67\x77\xf2\x78\x44\x58\x55\xc9\x59\xb9\xe0\x79\xee\x4f\x45\xd1\xd0\xd5\xab\x54\x67\x29\x6b\x4a\x17\xb9\x1e\xb4\x19\xb8\x2b\x38\x82\x3d\x85\x19\x94\xbc\x1b\x71\xe1\xc6\x61\x0f\x9a\x9d\xb8\x69\xeb\x47\x5a\xbd\x8b\xe4\xd7\xd5\xa9\x69\x44\x0a\x89\x0f\x92\xe7\x13\x77\x0c\x7c\x13\x42\xdf\xb5\x61\x7c\x97\x9d\xa5\xa4\x03\x82\xe6\xcc\x03\x04\xd3\x69\x5a\x11\xbd\x07\x7b\x0c\x5d\x80\x49\x7c\xb1\xf4\x4b\x3e\x5f\xcc\x86\xd1\x6e\x36\x5e\x0f\x77\xab\xd1\x72\x12\xaf\x57\xbb\x68\xb2\x2c\x7a\x0d\x4d\x34\x8e\xa7\x8b\xbf\x2b\xc0\x6e\x3e\x9c\x8d\x0b\xba\x0d\xbc\x2a\x8e\x3f\xb4\x39\xed\x52\x7d\xf0\x35\x1c\xb5\xc5\x30\x76\xa6\x0d\xee\x52\xc8\x5c\xfc\x76\xfd\x3e\x77\xa5\x38\x43\x6d\x9e\x8f\x88\x0e\xf4\x7b\xbf\xdf\x6f\xc1\x8a\x6d\x43\x50\xb4\xe8\x1d\xab\x4b\x17\xb7\xa3\xc5\x68\xb1\x98\xef\xee\xcf\x63\x88\x1d\x2d\xa2\xf1\x6e\xb3\x9c\x96\x1d\x19\x79\x9b\x91\x3e\xf0\xcd\x72\xfa\x99\xd5\x7a\xf8\xd6\xb6\x5a\x43\xf2\x99\xd5\x74\x38\x0f\xcc\xa6\xa0\x9c\xdd\xc3\x92\x57\xe5\x92\xb0\x5d\xa4\xb6\x2e\xae\x0d\x33\x58\x43\x75\x1d\x2a\x3a\xc2\xd6\xc6\xda\xe0\x14\xf6\x5c\x96\x7e\x1a\x2d\x22\x84\x34\x73\x6b\x99\xd3\x19\x47\xe8\x6a\x48\x78\xab\xfc\xc8\xf0\xcb\xf3\x81\x67\x52\x5f\x9f\x7f\x05\x7a\xe9\xba\xc4\xb5\xeb\xea\xec\x7a\x52\x33\x90\x3d\xcb\x8c\xc8\xd0\x3e\xa6\x6b\xaa\x93\xfb\x33\x38\x83\x9f\x7f\x0a\xe9\xb9\x7c\xed\x07\x51\x2b\xed\x4a\xfc\xcb\x67\xdf\x3d\xe4\x61\xa4\x35\x4f\x33\x09\x58\x76\xa6\x4d\xcc\xd0\xa0\x78\x07\x86\x9d\x6d\x23\x84\xbe\x71\x44\x6e\x56\xfa\x6c\x58\x39\x50\x88\x99\x1d\xf4\x7a\x06\x7e\xbc\x24\x02\x8f\xe7\xfd\xd9\x72\xc3\xb4\x42\xae\xf0\x85\xe9\xb4\xa7\x98\x3e\x70\xdb\x2b\x3b\xdd\x4b\xc1\x22\x37\x37\x4a\x3e\x1f\xe9\x76\xb1\xfe\x55\x93\x80\xe2\xc2\x23\x6e\xf1\x53\x96\xdb\xf5\x2d\xb9\xf5\xb9\xdb\xce\x71\x8c\x37\xe5\xa2\x8e\x37\x45\x11\xd2\xcc\x53\x6d\xae\x9e\xe1\x3c\xbf\xfd\xd3\x81\x9b\x2c\xe2\x15\x1d\x90\xb0\x4f\xf3\x72\x19\xb5\x77\x7a\xf9\x0b\xb9\x76\x21\xbf\x0b\xdf\x89\xaf\xfd\xc0\x9b\xd7\x47\x57\x05\xa9\x60\x6e\x14\x2c\x1d\x84\x4e\xbd\x63\x42\xab\x31\x69\x4f\x49\xd1\x81\xdf\x06\xb2\x36\xea\xf1\xa2\x8b\x84\xcd\x00\xd9\x31\x86\xab\xd4\xe0\xf6\x7d\x5e\x77\xf0\x71\xde\xd6\x5f\xe8\x3b\x4d\xb9\xdf\x90\xff\xd3\x0c\x97\xcb\xa9\x42\x94\xc7\x96\xbe\xab\x51\x8d\x26\x7d\x94\x5a\x34\xb3\x45\x30\x18\x6b\x29\xd8\xb5\x9d\xf1\xc4\x7d\xda\x5c\x40\x56\xaf\xc4\xed\xd7\x08\x31\x44\xe4\x69\x86\xe1\x34\xd3\x88\x4b\x70\x2e\xbf\x7e\xeb\xb6\x9c\x55\xcf\xd8\xc1\xe3\x3a\xb3\xbb\x6d\xb6\xa2\xf3\x6b\x66\x93\x1d\x00\x79\x2d\x69\xba\x42\x48\x12\xff\x65\xf0\x1a\xa6\xeb\x56\x4b\x0c\x06\xa4\xf4\x6b\xf6\xf5\xe9\xe6\xb1\x78\x2a\xfe\x0b\x00\x00\xff\xff\x8d\x28\x8e\x38\x6f\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2671, mode: os.FileMode(420), modTime: time.Unix(1487322276, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

