// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487095083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x8f\xe2\x38\x10\xbd\xf7\xaf\xb0\xac\x3d\x6e\x93\xee\x5d\xcd\x05\x69\x0f\x6c\x32\xdb\x62\x05\x0d\x6a\xe0\xb4\x42\xa3\xc2\xa9\x0e\x16\x8e\x1d\xd9\x05\x33\x6c\x94\xff\x3e\xb2\x13\x86\x7c\x40\x37\x17\x2a\xf5\x5e\xb9\x5e\x95\xcb\x55\x3e\x30\xc6\xff\x35\x3b\x3e\x66\xde\x64\x8c\xbf\x61\x26\x8d\xe6\x63\xc6\x33\x65\x76\xa0\xf8\xef\xb5\x7f\x9a\x78\x9f\x30\xc2\x18\xfd\x58\x96\xd3\xa4\xaa\x2e\xd0\x2b\xe4\x78\x17\x5c\x9f\x8b\x00\x3a\xb4\x27\x29\xf0\xe2\x5e\x5a\x69\xac\xa4\x33\x1f\xb3\x2f\x4f\x8d\x6f\xa2\xd4\x84\x16\x5a\x78\xfe\x3b\x28\x87\x8d\x3f\x01\x02\x81\x9a\xd0\x3a\x3e\x66\xff\x05\x27\x63\x3c\x15\xcf\x3c\xd8\xdb\x86\x17\x1b\xed\xc8\x82\xd4\xd4\xe6\x95\xcd\x3f\x63\x7c\xb6\x06\x9b\x21\x79\x39\xbf\x95\x40\x64\x47\x07\xb4\x1a\xd5\x48\x43\x8e\x17\xc5\x75\x17\xae\x4c\x25\xf5\xf1\x47\x1b\x5b\x14\x68\x41\xa7\x1e\xfb\x8b\x37\xee\xaa\x23\x64\x0d\xee\xf0\x62\xcd\xb1\xb8\xa3\xe3\xa3\x86\x35\x95\x1c\xb5\x4f\x5e\x96\xc1\xaa\xaa\x0e\xd6\xae\x52\x1f\x95\x6a\x81\x3e\x73\x3b\x69\x37\xf1\xad\xe4\x04\xee\x30\x54\x50\xf7\xdd\xca\x13\x5a\xcf\x4d\x8d\x38\xa0\xed\xe3\xb1\xd1\xef\x32\xfb\x35\x3a\x2d\x44\xe6\x90\x85\x24\x65\x39\xf5\xe6\xe0\x6c\xe6\xf3\xe7\x79\xd3\xc6\x1d\xb8\xfd\x90\x00\x36\x0b\xa5\xf0\x48\x19\x01\x2a\x4a\xf1\xf4\x98\x62\xa1\xcc\xf9\x51\x18\xad\x51\x90\xb1\x23\xb7\xe7\xdb\x4e\x60\xd5\x13\xf9\x55\x9f\x6e\x29\x8c\x17\xf1\x62\xf1\xfa\xed\xfe\x54\x0f\xb9\xf1\x22\xf9\xfa\x6d\xf3\x36\xab\xeb\x8a\x43\x4c\x6c\x52\xdc\xbc\xcd\x3e\x8b\x5a\x4f\x5e\xfa\x51\x6b\xc8\x3e\x8b\x9a\x4d\x5e\x07\x61\x33\xd0\x3e\xee\xc3\x92\x57\xf5\x53\x0b\xcd\xdb\xf6\xb0\x39\x12\xf8\x7e\xf4\x63\x66\x26\xbb\x7f\x9d\x73\xf8\xf1\x8f\x54\xe1\xc0\xe7\xa7\x81\xe4\x06\x5d\xc9\xff\x71\xfe\x77\xa0\x7c\xa8\x6e\x8d\x79\xa1\x80\x6e\xcb\x9b\x58\x92\xef\x20\xea\x07\xdc\xd7\xc1\x18\x7f\x41\x22\xb4\x2b\x73\xb4\x61\x4b\xf0\x3d\x51\xe1\xc6\x51\x64\xe1\xfb\x28\x93\xb4\x3f\xee\x8e\x0e\xad\x30\x9a\x50\xd3\x48\x98\x3c\xd2\xc2\xa4\xe8\xa2\xfa\x8a\xa3\x1c\x1c\xa1\x8d\x9c\xb0\xb2\x20\x77\x77\xa4\xfa\x35\x86\xbd\xa8\x80\xe4\x09\x13\x74\x61\x2d\xd4\x43\xd9\xbb\x88\x7e\x39\x89\x74\x05\x90\xd8\x2f\xe1\xac\x0c\xa4\xa1\xf1\x2d\xc6\xd5\xde\xb6\x77\x0f\xba\x50\x9f\xeb\x5d\x05\x8f\x97\x9b\x7a\x27\x2c\x37\x55\xa7\xab\x7c\x8e\xb9\xb1\xe7\xd0\xfd\xb2\xbc\x7c\xf4\x38\x89\x74\x87\x86\x51\x9b\x3d\x7c\xba\x58\xae\xf8\x98\x75\xee\x97\xbf\x22\x7d\x37\xb6\x5e\x29\xd7\x77\x56\x75\xd5\x12\x58\x5a\x1a\x25\xc5\xb9\xaf\x78\xea\x97\xf6\x09\x14\x1f\xb3\x3f\x9f\xae\xbf\x4e\x8a\x09\x11\xe6\x05\x0d\x87\x8b\x27\xa8\xc0\x1f\xf9\xc7\x97\xdb\x91\x73\x93\x86\x21\x48\x03\xef\xa6\xba\x5f\xe3\x7e\x73\x4f\x6f\x8a\x14\x08\x5b\xa2\xf9\x8a\x20\xcb\xc2\xce\x7b\x1e\xca\xf5\x93\xbe\x04\x0b\x4a\xa1\xaf\xe8\xf9\xe1\x72\x62\xf5\x50\xfd\x0c\x00\x00\xff\xff\xb2\xa8\x26\xd7\x49\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1865, mode: os.FileMode(420), modTime: time.Unix(1487093308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

