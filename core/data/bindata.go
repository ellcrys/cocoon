// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1486900087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\x4d\x6f\xda\x40\x10\xbd\xf3\x2b\x56\xab\x1e\xab\x08\x5a\xe5\x62\xa9\x07\x6a\xa7\x15\x15\x60\x8b\x8f\x53\x85\xa2\x89\x3d\xb8\x2b\xd6\xbb\xd6\x7a\xa0\xa1\x96\xff\x7b\xb5\x6b\x13\x6c\x63\xc8\x25\xc3\xbc\xe7\x79\xef\x0d\x83\xcb\x11\x63\xfc\x97\x7e\xe3\x1e\xb3\x25\x63\x7c\x85\xa9\xd0\x8a\x7b\x8c\xa7\x52\xbf\x81\xe4\x9f\xeb\xfe\x2c\xb0\xbd\x58\xc7\x5a\xab\xa7\xb2\x9c\x05\x55\x75\x81\x96\x90\xe1\x5d\x70\x73\xce\x1d\x58\xa0\x39\x89\x18\x2f\xed\xc8\x08\x6d\x04\x9d\xb9\xc7\x9e\xc7\x4d\x6f\x2a\xe5\x94\x42\x15\x5b\xfe\x1e\x64\x81\x4d\x3f\x00\x82\x18\x15\xa1\x29\xb8\xc7\x7e\xbb\x26\x63\x3c\x89\x27\xdc\xd5\xbb\x86\xe7\x6b\x55\x90\x01\xa1\xa8\xcd\x2b\x9b\xff\x8c\xf1\xf9\x06\x4c\x8a\x64\xed\x7c\x2a\x81\xc8\x3c\x1d\xd0\x28\x94\x4f\x0a\x32\xbc\x38\xae\xb7\x70\x65\x4a\xa1\x8e\xef\x6d\x2c\xcc\xd1\x80\x4a\x2c\xf6\x8d\x37\xed\xaa\x63\x64\x03\xc5\xe1\xa7\xd1\xc7\xfc\x8e\x8f\x47\x0b\x6b\x92\x1c\x95\x15\x2f\x4b\x57\x55\x55\x07\x6b\xa7\x54\x47\x29\x5b\xa0\x55\x6e\x8b\x76\x85\x87\xc4\x09\x8a\xc3\xad\x83\x7a\xef\x46\x9c\xd0\x58\x6e\xa2\xe3\x03\x9a\x3e\xee\x6b\xb5\x17\xe9\xc7\xe9\xb4\x10\x91\x41\xea\x44\xca\x72\x66\xcb\x9b\xd9\xcc\xea\x67\x59\xb3\x46\x54\x27\xde\x81\xab\x9e\xd2\x8b\x3a\x0d\xc9\xf8\xa1\x1f\x86\xcb\xd7\xd5\x4b\x14\xbe\x6e\x57\xf3\x5a\xd0\x77\xb9\x56\x98\xeb\xed\x6a\x5e\x55\x8f\x07\xaf\xeb\xab\x74\x2b\xdb\xf5\xb0\x05\x12\x58\xd5\xfe\x33\x73\x9d\xde\x4f\xbe\x80\xf7\x1f\x42\xba\x81\x93\xf1\x4d\xe6\x06\x5d\x8b\x7f\xb8\xf8\xee\x28\x0f\xdd\x6d\x30\xcb\x25\xd0\xb0\xbd\xa9\x21\xb1\x87\x98\x06\xc1\x40\x14\x39\x50\xfc\x27\x82\xb3\xd4\x90\xb8\x18\x2d\xc6\xb5\xde\xb5\x8f\x1e\x0b\x7d\x34\xf5\x36\xda\xc1\xb8\x1f\x6d\xeb\x63\x8c\xb6\x55\xc7\x23\x5f\x60\xa6\xcd\xd9\x65\x29\xcb\xcb\x87\x1e\x27\x10\xc5\xa1\x61\xd4\x65\x0f\x9f\x85\xd1\x9a\x7b\xac\xb3\x2d\xbe\x44\xfa\xab\x4d\x7d\xcb\xbb\xd1\xc0\x82\xac\x5b\x02\x43\x91\x96\x22\x3e\xf7\x1d\xcf\xec\xdb\xe2\x04\x92\x7b\xec\xeb\xf8\xfa\xd7\x91\x98\x12\x61\x96\xd3\xed\x57\xc5\x03\x94\x60\x47\x7e\x79\x1e\x7e\x72\xa1\x13\x77\xdd\x89\xe3\x0d\xba\xfb\x38\x9e\xc1\x17\xc4\x36\x4f\x80\xb0\x65\x9a\xaf\x09\xd2\xd4\xfd\xd8\x26\xb7\x76\xed\xdd\x44\x60\x40\x4a\xb4\x89\x26\xa3\xcb\xc4\x6a\x54\xfd\x0f\x00\x00\xff\xff\x1b\xe5\xb0\x1d\xc2\x05\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1474, mode: os.FileMode(420), modTime: time.Unix(1486900071, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

