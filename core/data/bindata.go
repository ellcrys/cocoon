// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487265691, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x5b\x8f\xea\x36\x10\x7e\xdf\x5f\x61\x59\xe7\xb1\x0b\xec\xa9\x8e\x2a\x21\xf5\x81\x43\xe8\x8a\x8a\x4b\xc4\xe5\xa1\xaa\x10\x1a\xc2\x6c\x36\xc2\xb1\x23\x7b\xe0\x1c\x1a\xe5\xbf\x57\x76\x42\x37\x89\x03\x5b\x5e\xd6\x3b\xf3\xcd\xed\x1b\xcf\x38\xf9\x13\x63\xfc\x4f\x75\xe0\x43\x66\x8f\x8c\xf1\x15\xc6\x89\x92\x7c\xc8\x78\x2c\xd4\x01\x04\xff\xa5\x94\x4f\x03\x2b\x8b\x54\xa4\x94\x7c\xce\xf3\x69\x50\x14\x37\xd5\x02\x52\xbc\xab\xdc\x5c\x33\xa7\x34\xa8\x2f\x49\x84\x37\x71\xa8\x13\xa5\x13\xba\xf2\x21\xfb\x36\xa8\x64\x23\x21\x46\xb4\x94\x91\xc5\xbf\x81\x30\x58\xc9\x03\x20\x88\x50\x12\x6a\xc3\x87\xec\x6f\x27\x64\x8c\x1f\xa3\x17\xee\xce\xbb\x0a\x37\x56\xd2\x90\x86\x44\x52\x1d\x97\x57\x7f\x19\xe3\xb3\x0d\xe8\x18\xc9\xa6\xf3\x25\x07\x22\xdd\x3b\xa1\x96\x28\x7a\x12\x52\xbc\x65\x5c\xb2\xf0\x81\x14\x89\x3c\xff\xac\xeb\x96\x19\x6a\x90\x47\xab\xfb\x9d\x57\xe2\xa2\x91\xc8\x06\xcc\xe9\x55\xab\x73\x76\x27\x8f\x47\x84\x55\x95\x9c\xa5\x0d\x9e\xe7\xee\x54\x14\x0d\x5d\xbd\x4a\x79\x16\xa2\xa6\xb4\x91\xeb\x41\x9b\x81\xbb\x82\x13\x98\x93\x9f\x41\xc9\xbb\x4e\x2e\xa8\x2d\xf6\xa8\xa2\x13\xea\xb6\x7e\xac\xe4\x5b\x12\xff\x77\x75\x6a\x9a\x24\x85\xd8\x05\xc9\xf3\xa9\x3d\x7a\xbe\x19\xe3\x6f\x4a\x47\xb8\xcf\xce\x42\xf0\x21\x23\x7d\x46\x0f\x11\xa9\x34\xad\x88\x3e\x80\x79\xf7\x5d\x80\x8e\x5d\xb1\xfc\x4b\xbe\x58\xce\x47\xc1\x7e\x3e\xd9\x8c\xf6\xeb\xf1\x6a\x1a\x6e\xd6\xfb\x60\xba\x2a\xfa\x0d\x4d\x30\x09\x67\xcb\xbf\x2a\xc0\x7e\x31\x9a\x4f\x0a\xbe\xf3\xbc\x66\x4a\xd3\x3e\x85\xcc\x7a\x6e\x57\xe6\xb2\x92\x12\x23\x52\xfa\xf9\x9d\xc8\x82\x7e\x1d\x0c\x06\x2d\x58\xb1\x6b\x08\x8a\x16\x71\x13\x79\xe9\x62\x6d\xbc\x1c\x2f\x97\x8b\xfd\xfd\x49\xf3\xb1\xe3\x65\x30\xd9\x6f\x57\xb3\x92\xeb\xb1\xb3\x19\xab\x23\x6e\x57\xb3\xcf\xac\x36\xa3\xd7\xb6\xd5\x06\xe2\xcf\xac\x66\xa3\x85\x67\x36\x03\x69\xed\x1e\x96\xbc\x2e\xc7\xdf\x74\x91\xda\xba\x92\xc6\xcf\x60\x03\x55\xa3\x2b\x3a\xfc\xa6\x85\x4a\xd3\x0c\x0e\x28\x4a\x3f\x8d\x16\x31\xc6\x9a\xb9\xb5\xcc\xf9\x1c\x09\xba\x1a\xe2\xdf\x17\x37\x0c\x78\x79\x3e\x62\x26\xd4\xf5\xf9\x23\xd0\xa0\x37\xe8\xfd\xd6\xeb\xba\xa4\xb5\xeb\x68\xad\xfb\x42\x45\x20\xfa\x26\xd2\x49\x46\xe6\x31\x69\x33\x15\xdf\x9f\xb1\x39\xfc\xfc\x23\x11\x8e\xd1\x97\x81\x17\xb5\xd2\xae\x93\x7f\x70\xfe\xdd\x41\x1e\x46\xda\x60\x9a\x09\xa0\xb2\x3f\x6d\x7a\x46\x9a\x92\x37\x88\xa8\xb3\x79\x8c\xf1\x57\x24\x42\xbd\x56\x67\xed\x56\x37\xb7\xa4\x9b\x61\xbf\xaf\xe1\x47\x2f\x4e\xe8\xfd\x7c\x38\x1b\xd4\x91\x92\x84\x92\x7a\x91\x4a\xfb\x32\x52\x47\x34\xfd\xb2\xdf\xfd\x14\x0c\xa1\xbe\x51\xf2\xf9\xc8\xb6\x8b\x75\xaf\x96\x00\x4a\x2e\x18\xa0\xa1\x4f\x59\x6e\xd7\xb7\x42\xe3\x72\x37\x9d\x43\x19\x6e\xcb\x45\x1c\x6e\x8b\xc2\xa7\x19\x53\xa5\xaf\x8e\xe1\x3c\xbf\xfd\xd3\x81\x9b\x2e\xc3\x35\x1f\x32\xbf\x4f\x0b\xa4\x1f\x4a\x7b\x3b\xbb\xfc\xf9\x5c\xdb\x90\xdf\x13\xd7\x89\xaf\x03\xcf\x9b\xd3\x07\x57\x09\x69\x12\xd9\x81\x30\x7c\xe8\x3b\x75\x8e\x19\xaf\x86\xa5\x3d\x2b\x45\x07\x7e\xe7\xc9\xda\xa8\xc7\xeb\x2e\x48\x4c\x06\x14\xbd\x87\x70\x15\x0a\xec\x3e\xcf\xeb\x0e\x3e\xce\xbb\xfa\x0b\x7c\xa7\x29\xf7\x1b\xf2\x7f\x9a\x61\x73\x39\x55\x88\xf2\xd8\xd2\x77\x35\xaa\xd1\xa4\x8f\x52\x8b\x66\xb6\x04\x9a\x42\x25\x92\xe8\xda\xce\x78\x6a\x3f\x5d\x2e\x20\xaa\xb7\xe2\xf6\x6b\x84\x18\x11\x61\x9a\x91\x3f\xcd\x3c\x40\x01\xd6\xe5\xd7\x6f\xdd\x96\x73\x75\xc4\x72\x2d\x59\x5c\x67\x76\xb7\xfd\x56\x74\x7e\xad\x6c\xb3\x23\x10\xd6\x92\xe6\x6b\x82\x38\x76\x2f\xff\x8b\x9f\xae\x5d\x2d\x21\x68\x10\xc2\x2d\xdb\x97\xa7\x9b\xc7\xe2\xa9\xf8\x37\x00\x00\xff\xff\x1b\x33\x10\x2e\x4f\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2639, mode: os.FileMode(420), modTime: time.Unix(1487265679, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

