// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487162977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x6f\xdb\x30\x0c\xbd\xf7\x57\x08\xc2\x8e\x6b\xd2\x6c\xe8\x25\xc0\x0e\x99\xdd\x15\x19\xf2\x85\x26\x39\x0d\x41\xc1\xda\xac\x23\x44\x96\x0c\x89\xc9\x9a\x19\xfe\xef\x83\x64\xa7\xf1\x47\xd2\xe6\x12\x9a\xef\x51\x7c\xa4\x28\xe6\x37\x8c\xf1\xdf\xfa\x85\x0f\x99\x33\x19\xe3\x4f\x98\x08\xad\xf8\x90\xf1\x44\xea\x17\x90\xfc\x6b\xe9\x1f\x87\xce\x17\xe9\x48\x6b\x75\x9b\xe7\xe3\xb0\x28\x4e\xd0\x0c\x52\xbc\x0a\xae\x8e\x99\x07\x2d\x9a\x83\x88\xf0\xe4\x5e\x18\xa1\x8d\xa0\x23\x1f\xb2\xfb\xbb\xca\x37\x92\x72\x44\x73\x15\x39\xfe\x2b\x48\x8b\x95\x3f\x04\x82\x08\x15\xa1\xb1\x7c\xc8\xfe\x78\x27\x63\x3c\x8e\x06\xdc\xdb\x9b\x8a\x17\x68\x65\xc9\x80\x50\x54\xe7\xe5\xd5\x3f\x63\x7c\xb2\x02\x93\x20\x39\x39\x5f\x72\x20\x32\xbd\x1d\x1a\x85\xb2\xa7\x20\xc5\x93\xe2\xb2\x0b\x67\xa6\x14\x6a\xff\x56\xc7\xe6\x19\x1a\x50\xb1\xc3\x7e\xf0\xca\x5d\x34\x84\xac\xc0\xee\x1e\x8d\xde\x67\x57\x74\x7c\xd4\xb0\xaa\x92\xbd\x72\xc9\xf3\xdc\x5b\x45\xd1\xc0\xea\x55\xaa\xbd\x94\x35\xd0\x65\xae\x27\x6d\x26\xbe\x94\x9c\xc0\xee\xba\x0a\xca\xbe\x1b\x71\x40\xe3\xb8\xb1\x8e\x76\x68\xda\x78\xa0\xd5\xab\x48\xde\x47\xa7\x86\x88\x14\x12\x9f\x24\xcf\xc7\xce\xec\x9c\xcd\x5c\xfe\x34\xad\xda\xf8\x02\x76\xdb\x25\x80\x49\x7c\x29\xbc\x2f\x75\x04\xb2\x6f\x23\x23\x32\xb2\xfd\x18\x0f\xb7\x31\x66\x52\x1f\x6f\x23\xad\x14\x46\xa4\x4d\xcf\x6e\xf9\xa6\x71\x40\xd1\x12\xfb\xa0\x0e\x97\x94\x06\xf3\x60\x3e\x9f\x3d\x5f\x9f\xee\x2e\x37\x98\x87\x0f\xcf\xeb\xa7\x49\x59\x5f\xe0\x63\x02\x1d\xe3\xfa\x69\xf2\x59\xd4\x6a\xf4\xd8\x8e\x5a\x41\xf2\x59\xd4\x64\x34\xeb\x84\x4d\x40\xb9\xb8\x0f\x4b\x5e\x96\x4f\xce\x37\x71\xd3\xc2\xa6\x48\xe0\xfa\xd1\x8e\x99\xe8\xe4\xfa\xb5\x4e\xe1\xed\x97\x90\xfe\xc0\xc1\x5d\x47\x72\x85\x2e\xc5\x3f\x9c\xfe\xf4\x94\x0f\xd5\xad\x30\xcd\x24\xd0\x65\x79\x23\x43\xe2\x15\xa2\xf2\x21\xb7\x75\x30\xc6\x1f\x91\x08\xcd\x52\xef\x8d\xdf\x16\x7c\x4b\x94\xd9\x61\xbf\x6f\x49\x1b\x48\xb0\x97\x68\x9d\x48\x84\x4c\xd8\x5e\xa4\xd3\xfe\xce\xe8\x04\xd4\xd5\xc9\x69\x97\xe2\xd7\xa0\x04\x12\x07\x0c\xd1\xfa\x2d\xd0\x9c\xc1\x56\xdf\xdb\xea\x43\x61\x33\xa0\x68\xbb\x80\xa3\xd4\x10\xfb\x3e\xd7\x18\x67\x7b\x53\x5f\x39\x68\x7d\x39\xb6\xd5\x79\x1e\x2c\xd6\xe5\x2a\x58\xac\x8b\x46\x13\xf9\x14\x53\x6d\x8e\xbe\xd9\x79\x7e\xfa\x68\x71\x42\x61\x77\x15\xa3\x34\x5b\xf8\x78\xbe\x58\xf2\x21\x6b\x5c\x27\x9f\x21\xfd\xd5\xa6\xdc\x24\xe7\x67\x55\x34\xd5\x12\x18\x5a\x68\x29\xa2\x63\x5b\xf1\xd8\xed\xea\x03\x48\x3e\x64\xdf\xef\xce\xbf\x46\x8a\x11\x11\xa6\x19\x75\x67\x89\x87\x28\xc1\x1d\xf9\xed\xfe\x72\xe4\x54\xc7\xfe\xce\x63\xcf\xbb\xa8\xee\x7d\xba\x2f\xae\xe7\x75\x16\x03\x61\x4d\x34\x5f\x12\x24\x89\x5f\x75\x83\xae\x5c\x37\xd8\x0b\x30\x20\x25\xba\x8a\x06\x37\xa7\x13\x8b\x9b\xe2\x7f\x00\x00\x00\xff\xff\x87\x33\xdd\x2e\x40\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1856, mode: os.FileMode(420), modTime: time.Unix(1487162923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

