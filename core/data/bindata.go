// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487179419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x4d\x6f\xeb\x36\x10\xbc\xe7\x57\x10\xc4\x3b\x36\xb6\xd3\xe2\xf5\x60\xa0\x07\xd5\x72\x03\x17\xb6\x25\xf8\xe3\x50\x14\x81\xb1\xa1\x37\x0a\x61\x8a\x14\xc8\xb5\x5f\x5c\x41\xff\xbd\xa0\x24\x37\xb2\x24\x3b\xcd\x25\xf4\xce\x2c\x77\x66\x45\x2e\xf3\x07\xc6\xf8\x9f\xe6\x95\x8f\x99\x5f\x32\xc6\x57\x98\x48\xa3\xf9\x98\xf1\x44\x99\x57\x50\xfc\xa7\x2a\x3e\x0b\x7d\x4c\x18\x61\x8c\x7e\xcc\xf3\x59\x58\x14\x17\x68\x09\x29\xde\x04\x37\xe7\xac\x04\x1d\xda\x93\x14\x78\x09\xc7\x56\x1a\x2b\xe9\xcc\xc7\xec\xfb\xa8\x8e\x05\x4a\x05\x14\x69\xe1\xf9\x6f\xa0\x1c\xd6\xf1\x10\x08\x04\x6a\x42\xeb\xf8\x98\xfd\x5d\x06\x19\xe3\x7b\xf1\xc4\xcb\xf5\x4b\xcd\x9b\x18\xed\xc8\x82\xd4\xd4\xe4\xe5\xf5\x7f\xc6\xf8\x7c\x03\x36\x41\xf2\x72\xbe\xe5\x40\x64\x07\x07\xb4\x1a\xd5\x40\x43\x8a\x17\xc5\x55\x17\x3e\x99\x4a\xea\xe3\x47\x13\x8b\x32\xb4\xa0\xf7\x1e\xfb\x8d\xd7\xe1\xe2\x4a\xc8\x06\xdc\xe1\xd9\x9a\x63\x76\x43\xc7\xbd\x86\xd5\x4e\x8e\xda\x17\xcf\xf3\x72\x55\x14\x57\x58\xd3\xa5\x3e\x2a\xd5\x00\x7d\xe5\x66\xd1\xeb\xc2\x7d\xc5\x09\xdc\xa1\xab\xa0\xea\xbb\x95\x27\xb4\x9e\xbb\x37\xe2\x80\xb6\x8d\x4f\x8c\x7e\x93\xc9\x7f\x47\xa7\x81\xc8\x14\x92\xb2\x48\x9e\xcf\xfc\xb2\xb3\x37\xf3\xf5\xd3\xb4\x6e\xe3\x2b\xb8\xf7\x2e\x01\x6c\x52\x5a\xe1\xdf\xf2\x65\xb4\x08\xc2\xdd\x62\xba\x09\x76\xeb\xc9\x6a\x16\x6f\xd6\xbb\x70\xb6\x2a\x86\x57\x48\x38\x8d\xe7\xd1\x5f\x35\x61\xb7\x0c\x16\xd3\x82\xbf\x5c\x6d\x5a\xb4\x0c\x4c\xf5\xa9\x4f\xfd\x24\x9a\x44\xd1\x72\x77\xfb\xc4\x77\xb9\x93\x28\x9c\xee\xb6\xab\x79\xe5\x79\x52\xe6\x4c\xcc\x1e\xb7\xab\xf9\x57\x59\x9b\xe0\xb9\x9d\xb5\x81\xe4\xab\xac\x79\xb0\xec\xa4\xcd\x41\xfb\xbc\xbb\x96\xd7\xd5\x35\x2c\x1b\xfb\xd2\xc2\x16\x48\xd0\xd7\x8f\x6e\x63\xcb\x33\x81\xa7\xc7\x3d\x66\xca\x9c\x1f\x85\xd1\x1a\x05\x19\xfb\x38\x1a\x8c\x06\xbf\x0e\xfa\xbe\x66\xe3\xbb\xf9\xec\xa1\x32\x02\xd4\xd0\x09\x2b\x33\x72\xf7\x35\xcf\x4d\x72\xfb\xa8\x2d\xe0\xe3\x0f\xa9\x4a\x43\x4f\xa3\x4e\xd5\x1a\x5d\xcb\x7f\x70\xf1\x7b\x49\xb9\x5b\x69\x83\x69\xa6\x80\xfa\xdb\x13\x58\x92\x6f\x20\xaa\xe1\xd2\xd6\xc1\x18\x7f\x46\x22\xb4\x6b\x73\xb4\xe5\x04\xe3\xef\x44\x99\x1b\x0f\x87\x16\x7e\x0c\x12\x49\xef\xc7\xd7\xa3\x43\x2b\x8c\x26\xd4\x34\x10\x26\x1d\x6a\x61\xf6\xe8\x86\xd5\x11\x1b\xa6\xe0\x08\xed\xa5\x25\x5f\x9f\xed\xb6\xd9\x72\x78\x2b\x20\x79\xc2\x10\x1d\x7d\xd9\xe5\xb6\xbf\x15\xba\x52\xbb\xeb\xbd\x13\xf1\xb6\x9a\x47\xf1\xb6\x28\xba\x6d\xc6\xd4\xd8\x73\xd9\xe1\x3c\xbf\xfc\xe8\xe1\xcd\xa2\x78\xcd\xc7\xac\xfb\x9d\x96\x48\x3f\x8c\xad\x46\xd7\xfd\x3b\x1b\x4a\x97\x01\x89\xf7\x18\xce\xca\x80\x1f\x1f\x79\xd1\x60\x7c\xae\x5f\x9a\xe3\xfc\x86\xb5\xdb\xb6\xfe\x8f\x25\xaf\xe5\x50\x33\xaa\x65\x0b\xef\xb3\x7b\xc3\x6a\x71\xad\x96\xc0\x52\x6c\x94\x14\xe7\xb6\xe2\x99\x7f\x07\x4f\xa0\xf8\x98\xfd\x32\xfa\xfc\xbb\x2a\x11\x10\x61\x9a\x51\xf7\x4e\xf0\x10\x15\xf8\x2d\x7f\xfe\xde\x9f\xb9\x30\x7b\xac\x2e\xb7\xe7\xf5\xaa\xbb\x4c\x89\xa2\xf7\xe9\xdb\x66\x7b\x20\x6c\x88\xe6\x6b\x82\x24\x29\x9f\x91\xa7\xae\x5c\x7f\x41\x63\xb0\xa0\x14\x7a\x47\x4f\x0f\x97\x1d\x8b\x87\xe2\xdf\x00\x00\x00\xff\xff\x23\x69\x39\xeb\x9c\x08\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2204, mode: os.FileMode(420), modTime: time.Unix(1487179409, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

