// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1490027130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4b\x6f\xe3\x36\x10\xbe\xe7\x57\x08\xc4\x1e\x9b\x38\xd9\x62\x2f\x06\x7a\x50\xac\x34\x70\xeb\x87\xe0\xc7\xa1\x28\x02\x81\xa6\x27\x32\x61\x8a\x14\xc8\x91\x77\x5d\x41\xff\xbd\x20\x25\x6d\x64\x89\x76\xd6\x97\x30\x33\xdf\x3c\xf8\x91\xf3\x51\xe5\x5d\x10\x90\xbf\xd4\x8e\x8c\x03\xbb\x0c\x02\xb2\x82\x94\x2b\x49\xc6\x01\x49\x85\xda\x51\x41\x7e\xab\xed\xd3\xc8\xda\xca\x72\x1a\x55\x55\x6b\x5b\xd0\x0c\x86\xd6\xcd\x39\x77\x56\x03\xfa\xc4\x19\xb4\xe6\x58\x73\xa5\x39\x9e\xc9\x38\xf8\xf6\xd8\xd8\x42\x21\x42\x5c\x4a\x66\xf1\xef\x54\x18\x68\xec\x11\x45\xca\x40\x22\x68\x43\xc6\xc1\xbf\xce\x18\x04\x64\xcf\x9e\x88\x5b\xbf\x35\xb8\x89\x92\x06\x35\xe5\x12\xbb\xb8\xb2\xf9\x1b\x04\x64\xb6\xa1\x3a\x05\xb4\xed\x7c\x29\x29\xa2\x7e\x38\x82\x96\x20\x1e\x24\xcd\xa0\xed\xb8\xde\xf7\x07\x52\x70\x59\xfc\xe8\xfa\x96\x39\x68\x2a\xf7\xd6\xf7\x07\x69\xcc\xd5\x45\x23\x1b\x6a\x8e\xaf\x5a\x15\xf9\x95\x3e\xbc\x4c\x35\x5b\x28\xa4\xad\x5a\x96\x6e\x55\x55\x17\xbe\xee\xf6\x64\x21\x44\xc7\x69\x4b\x76\xab\x5d\x56\xbc\xa8\x8a\xd4\x1c\xef\x07\xa5\x6b\xa6\x35\x3f\x81\xb6\xa0\xbd\x62\x47\xd0\x7d\xff\x44\xc9\x77\x9e\xfe\xbc\x1e\x1d\x0f\xcf\x68\xda\xee\xc9\x2e\x07\xb9\x83\x80\xbc\x2b\xcd\x20\xc9\x0b\x21\xc8\x38\x40\x5d\xc0\x00\xc1\x54\x96\x35\xd4\xee\xa8\x39\x0c\x53\x48\xc0\xef\x4a\x1f\x93\x4c\xed\x5d\xb5\x83\x32\x38\x44\x51\x9d\x3a\x2e\xc8\x97\x72\xb1\x9c\x87\x51\x32\x7f\xd9\x84\xc9\x7a\xb2\x9a\xc6\x9b\x75\x12\x4d\x57\xd5\xe8\xc2\x13\xbd\xc4\xb3\xe5\x3f\x0d\x20\x59\x84\xf3\x97\x8a\xbc\x0d\xb2\xe6\x9a\x9f\xb8\x80\x14\xf6\xd7\xda\xcf\x95\xc6\x24\xa3\xb9\xad\xfd\x76\xe1\xac\x7a\x44\xbe\xc8\x93\x8f\xc5\xc9\x72\xb2\x5c\x2e\x12\xcf\x74\x0d\x41\x93\x65\xf4\x92\x6c\x57\xb3\x1a\x3a\x51\x4c\x29\x39\x51\x7b\xd8\xae\x66\x9f\x45\x6d\xc2\xd7\x7e\xd4\x86\xa6\x9f\x45\xcd\xc2\xc5\x20\x6c\x46\xe5\xad\xb8\xe7\xed\x74\x16\x25\x71\xb8\x0a\xe7\xeb\x6e\xe8\x73\xc1\xc5\x3e\xa6\x9a\x66\xe6\x46\x74\x34\x5d\xff\x9d\xcc\xa6\xf3\xe9\xa6\x8e\x8d\xb8\x39\xce\x9f\xab\x8a\xdc\xa4\x76\x5d\x0b\x8d\xbb\x00\x03\x82\xdb\x19\x60\xae\x0d\xe3\x1f\x03\x37\x4e\xcd\x0d\x6a\x00\xc3\xdb\x10\x2b\x8d\x33\xba\x03\x51\xa7\x93\x12\x18\xaa\xfe\xc0\xd8\xbd\x1c\x80\x1d\xbd\xcd\x58\x19\x75\x57\x7d\x10\xd4\x69\x94\x0a\x7e\x02\x1f\xa0\xd5\x55\x64\xb9\xcf\x1d\x53\x3c\x58\xf7\x48\x1d\xbd\x6e\xa5\xf1\xa2\xf1\xfb\x03\xa2\x37\xd1\x86\x67\xa0\x0a\x0b\xfe\xfa\xd8\xfe\x3c\xb0\xa9\x95\xe7\x13\xb5\x6c\x3c\x3d\xde\x02\xc6\x5a\xa1\x62\xca\xd1\xe6\x6a\xf6\x20\x55\x6f\x70\x7a\xcc\x93\x39\x20\xf5\x8d\xce\x70\x86\x6d\x05\x5d\xc8\xfb\x9f\x7b\x7c\xf0\x29\x4a\x47\x15\x1c\x5f\x42\x31\x2a\x46\x86\x69\x9e\xa3\xb9\x7d\xd3\x66\x2a\xbd\x2e\x88\x73\xfa\xe3\x4f\x2e\xdc\x35\x7c\x1a\xf0\xd0\x7a\xd7\xfc\x3f\x98\x3f\x3b\xc8\xcd\x4a\x1b\xc8\x72\x41\xb1\xbe\xd4\x7d\x46\x42\x8d\xfc\x9d\x32\xbc\x76\xc9\x5e\x01\x11\xf4\x5a\x15\x9a\x41\xcb\xba\x19\x8f\x46\x9a\x7e\x7f\x48\x39\x1e\x8a\x5d\x61\x40\x33\x25\x11\x24\x3e\x30\x95\x8d\x24\x53\x7b\x30\xa3\x7a\x48\x46\x19\x35\x08\xba\xa5\xe4\x73\xe5\xf4\x1c\xfa\x0a\x04\x45\x7e\x82\x08\x0c\x7e\xca\x72\x7f\x7f\x2b\x30\xae\x77\xe3\x55\xcc\x78\x5b\x3f\x97\xf1\xb6\xaa\x86\x34\x43\xa6\xf4\xd9\x31\x5c\x96\xed\x3f\x1e\xdc\x74\x19\x5b\x7d\x1a\x9e\xd3\xa2\x7e\x6f\xfa\x2f\x6b\xfd\x1b\x72\x6d\x4b\x3e\x73\x77\x12\x65\xe9\x56\xc3\x62\x0e\x15\x9d\x25\xcd\x38\xb3\x63\x68\xc8\x78\x98\xda\xa5\x0f\x48\x23\x30\x1d\x7d\xa9\x7e\x19\x5a\x4f\xb4\x0f\xff\x36\xb0\xf5\x51\xb7\x1f\xaf\x88\x9b\x9c\x22\x3b\xc4\xf4\x2c\x14\xb5\x12\x56\x76\x13\x7c\xac\xdf\xba\x5f\x54\x57\x4e\xf1\xfa\x09\xfe\xca\xe9\x79\x4f\xee\xe2\xd4\x3e\xb6\x52\x5d\x76\x83\x54\x63\xac\x04\x67\xe7\x7e\x47\x1d\x2d\xfb\xfd\xd1\x2f\x66\x24\x44\x84\x2c\xc7\xe1\x78\x93\x08\x04\xb5\x29\xbf\x7e\xf3\x47\xce\x9b\x4f\x97\xbd\xc3\x79\xbb\x6b\x35\xae\xf2\x7e\x5d\x6e\xf3\x3d\x45\xe8\x34\x4d\xd6\x48\xd3\xd4\x7d\xb7\x79\xb4\xd7\x6a\x8d\x7d\x6a\x85\x70\x6f\xd5\xd3\x5d\x9b\xb1\xba\xab\xfe\x0f\x00\x00\xff\xff\xa3\x87\x4f\xdd\xf1\x0b\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 3057, mode: os.FileMode(420), modTime: time.Unix(1490027095, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

