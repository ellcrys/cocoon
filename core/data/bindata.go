// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487161895, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x5d\x6f\xe2\x3a\x10\x7d\xef\xaf\xb0\xac\xfb\x78\x0b\xe5\x5e\xf5\x05\x69\x1f\xd8\xd0\xad\x58\xf1\xa5\x02\x4f\x2b\x54\x4d\x93\xa9\x6b\xe1\xd8\x91\x3d\xb0\x65\xa3\xfc\xf7\x95\x9d\x50\xf2\x01\x2d\x2f\x4c\xe6\x9c\xf1\x1c\x1f\xdb\x93\xdf\x30\xc6\x7f\x9a\x17\x3e\x64\x3e\x64\x8c\x3f\xa1\x90\x46\xf3\x21\xe3\x42\x99\x17\x50\xfc\xdf\x32\x3f\x19\xfb\x5c\x6c\x62\x63\xf4\x6d\x9e\x4f\xc6\x45\x71\x82\xe6\x90\xe2\x55\x70\x7d\xcc\x02\xe8\xd0\x1e\x64\x8c\xa7\xf4\xd2\x4a\x63\x25\x1d\xf9\x90\xdd\xdf\x55\xb9\x91\x52\x23\x5a\xe8\xd8\xf3\x5f\x41\x39\xac\xf2\x63\x20\x88\x51\x13\x5a\xc7\x87\xec\x57\x48\x32\xc6\x93\x78\xc0\x43\xbc\xad\x78\x91\xd1\x8e\x2c\x48\x4d\x75\x5e\x5e\xfd\x33\xc6\xa7\x6b\xb0\x02\xc9\xcb\xf9\x27\x07\x22\xdb\xdb\xa1\xd5\xa8\x7a\x1a\x52\x3c\x29\x2e\x5d\x38\x33\x95\xd4\xfb\xf7\x3a\xb6\xc8\xd0\x82\x4e\x3c\xf6\x8d\x57\xe9\xa2\x21\x64\x0d\x6e\xf7\x68\xcd\x3e\xbb\xa2\xe3\x33\xc3\xaa\x9d\xec\xb5\x6f\x9e\xe7\x21\x2a\x8a\x06\x56\xdf\xa5\xde\x2b\x55\x03\x7d\xe7\x7a\xd3\x66\xe3\x4b\xcd\x09\xdc\xae\xab\xa0\xf4\xdd\xca\x03\x5a\xcf\x4d\x4c\xbc\x43\xdb\xc6\x23\xa3\x5f\xa5\xf8\xb8\x3a\x35\x44\xa6\x20\x42\x93\x3c\x9f\xf8\xb0\xb3\x36\xf3\xfd\xd3\xb4\xb2\x51\xb9\x2e\x0c\x56\x84\x8d\xf0\x3e\x28\x65\x62\xbe\x6d\x10\x8a\x96\x94\x07\x7d\xb8\xa4\x23\x5a\x44\x8b\xc5\xfc\xf9\xfa\xdd\xed\x72\xa3\xc5\xf8\xe1\x79\xf3\x34\x2d\xd5\x47\xa1\x26\x32\x09\x6e\x9e\xa6\x5f\x55\xad\x47\x8f\xed\xaa\x35\x88\xaf\xaa\xa6\xa3\x79\xa7\x6c\x0a\xda\xd7\x7d\xba\xe5\x55\xf9\xa0\x82\x49\xdb\x16\x36\x43\x02\xef\x47\xbb\x66\x6a\xc4\xf5\x43\x9b\xc1\xfb\x0f\xa9\xc2\x82\x83\xbb\x8e\xe4\x0a\x5d\xc9\x3f\x38\xfb\x1e\x28\x9f\xaa\x5b\x63\x9a\x29\xa0\xcb\xf2\x46\x96\xe4\x2b\xc4\xe5\x33\x6d\xeb\x60\x8c\x3f\x22\x11\xda\x95\xd9\xdb\x30\x0b\xf8\x1b\x51\xe6\x86\xfd\xbe\x23\x63\x41\x60\x4f\x18\x23\x14\x42\x26\x5d\x2f\x36\x69\x7f\x67\x8d\x00\xdd\x4f\xf0\x70\x9b\x60\xa6\xcc\xf1\x36\x36\x5a\x63\x4c\xc6\xf6\xdc\x5b\xcb\xc5\xb6\x96\xb1\x74\x19\x50\xfc\xb6\x84\xa3\x32\x90\x04\xd7\x6a\x8c\x73\xbc\xad\x8f\x07\x74\x41\x9c\x6b\xf9\xc8\xa3\xe5\xa6\x7c\xb6\xcb\x4d\xd1\xb0\x84\xcf\x30\x35\xf6\x18\xac\xcb\xf3\xd3\x47\x8b\x33\x96\x6e\x57\x31\xca\xb0\x85\x4f\x16\xcb\x15\x1f\xb2\xc6\xe1\xf0\x39\xd2\x6f\x63\xcb\x57\x7f\x7e\x24\x45\x53\x2d\x81\xa5\xa5\x51\x32\x3e\xb6\x15\x4f\xfc\x5c\x3d\x80\xe2\x43\xf6\xff\xdd\xf9\xd7\x68\x31\x22\xc2\x34\xa3\xee\xcd\xe0\x63\x54\xe0\x97\xfc\xef\xfe\x72\xe5\xcc\x24\xe1\x04\x93\xc0\xbb\xa8\xee\xe3\xae\x5e\x1c\xa5\x9b\x2c\x01\xc2\x9a\x68\xbe\x22\x10\x22\x8c\xa5\x41\x57\xae\xbf\xa6\x4b\xb0\xa0\x14\xfa\x1d\x0d\x6e\x4e\x2b\x16\x37\xc5\xdf\x00\x00\x00\xff\xff\xbe\x63\x5c\x17\xec\x06\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1772, mode: os.FileMode(420), modTime: time.Unix(1487161886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

