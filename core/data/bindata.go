// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487180349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x5d\x8f\xea\x36\x10\x7d\xdf\x5f\x61\x59\xf7\xb1\x0b\x6c\xab\xab\x4a\x48\x7d\xa0\x84\xae\xa8\x80\x44\x7c\x3c\x54\xd5\x0a\xcd\x9a\xd9\xac\x85\x63\x47\xf6\x84\xbb\x34\xca\x7f\xaf\x9c\x84\x6e\x48\x02\xdb\x7d\x59\xe3\x39\xe3\x39\xe7\xc4\x33\xce\x1f\x18\xe3\x7f\x9a\x57\x3e\x66\x7e\xc9\x18\x5f\x63\x2c\x8d\xe6\x63\xc6\x63\x65\x5e\x41\xf1\x9f\xaa\xfd\x79\xe0\xf7\x84\x11\xc6\xe8\xc7\x3c\x9f\x07\x45\x71\x09\xad\x20\xc1\x9b\xc1\xed\x39\x2d\x83\x0e\xed\x49\x0a\xbc\x6c\x47\x56\x1a\x2b\xe9\xcc\xc7\xec\xfb\xa8\xde\x9b\x28\x35\xa1\x50\x0b\x8f\x7f\x03\xe5\xb0\xde\x0f\x80\x40\xa0\x26\xb4\x8e\x8f\xd9\xdf\xe5\x26\x63\xfc\x20\x9e\x78\xb9\x7e\xa9\x71\x53\xa3\x1d\x59\x90\x9a\x9a\xb8\xbc\xfe\xcf\x18\x5f\x6c\xc1\xc6\x48\x9e\xce\xb7\x1c\x88\xec\xe0\x88\x56\xa3\x1a\x68\x48\xf0\xc2\xb8\x72\xe1\x13\xa9\xa4\xce\x3e\x9a\xb1\x30\x45\x0b\xfa\xe0\x63\xbf\xf1\x7a\xbb\xb8\x22\xb2\x05\x77\x7c\xb6\x26\x4b\x6f\xf0\xb8\x67\x58\xad\x24\xd3\xbe\x78\x9e\x97\xab\xa2\xb8\x8a\x35\x55\xea\x4c\xa9\x46\xd0\x57\x6e\x16\xbd\x2e\xdc\x57\x9c\xc0\x1d\xbb\x0c\x2a\xdf\xad\x3c\xa1\xf5\xd8\x83\x11\x47\xb4\xed\xf8\xd4\xe8\x37\x19\xff\x77\x75\x1a\x11\x99\x40\x5c\x16\xc9\xf3\xb9\x5f\x76\xce\x66\x8c\xbf\x19\x2b\x70\x9f\x66\x4a\xf1\x31\x23\x9b\x61\x07\x21\x4c\x92\xd4\x46\xbf\x82\x7b\xef\x1e\x01\x36\x2e\xc5\xf2\x6f\xf9\x2a\x5c\x4e\x82\xfd\x72\xb6\x9d\xec\x37\xd3\xf5\x3c\xda\x6e\xf6\xc1\x7c\x5d\x0c\xaf\x22\xc1\x2c\x5a\x84\x7f\xd5\x80\xfd\x6a\xb2\x9c\x15\xfc\xe5\xea\xd0\xa2\x25\x71\xa6\x4f\x7d\xfa\xa6\xe1\x34\x0c\x57\xfb\xdb\x3d\xd1\xc5\x4e\xc3\x60\xb6\xdf\xad\x17\x95\x2b\xd3\x32\x67\x6a\x0e\xb8\x5b\x2f\xbe\xca\xda\x4e\x9e\xdb\x59\x5b\x88\xbf\xca\x5a\x4c\x56\x9d\xb4\x05\x68\x9f\x77\x57\xf2\xa6\x6a\xd4\xd2\xd8\x97\x56\x6c\x89\x04\x7d\x7e\x74\x8d\x2d\x6f\x0d\x9e\x1e\x0f\x98\x2a\x73\x7e\x14\x46\x6b\x14\x64\xec\xe3\x68\x30\x1a\xfc\x3a\xe8\xfb\x9a\x8d\xef\xe6\xb3\x87\xca\x08\x50\x43\x27\xac\x4c\xc9\xdd\xe7\xbc\x30\xf1\xed\xcb\xb8\x84\x8f\x3f\xa4\x2a\x05\x3d\x8d\x3a\x55\xeb\xe8\x46\xfe\x83\xcb\xdf\x4b\xc8\xdd\x4a\x5b\x4c\x52\x05\xd4\x6f\xcf\xc4\x92\x7c\x03\x51\x8d\x9f\x36\x0f\xc6\xf8\x33\x12\xa1\xdd\x98\xcc\x96\x33\x8e\xbf\x13\xa5\x6e\x3c\x1c\x5a\xf8\x31\x88\x25\xbd\x67\xaf\x99\x43\x2b\x8c\x26\xd4\x34\x10\x26\x19\x6a\x61\x0e\xe8\x86\xd5\x15\x1b\x26\xe0\x08\xed\xc5\x92\xaf\xef\x76\x5b\x6c\x39\xde\x15\x90\x3c\x61\x80\x8e\xbe\x74\xb9\xad\x6f\x8d\xae\xe4\xee\x7a\x7b\x22\xda\x55\x13\x2b\xda\x15\x45\xd7\x66\x4c\x8c\x3d\x97\x0e\xe7\xf9\xe5\x47\x0f\x6e\x1e\x46\x1b\x3e\x66\xdd\xef\xb4\x42\xfa\x61\x6c\x35\xdc\xee\xf7\x6c\x20\x5d\x0a\x24\xde\x23\x38\x2b\x03\x7e\x7c\xe4\x45\x03\xf1\xb9\x7e\x69\x0e\xfc\x1b\xd2\x6e\xcb\xfa\x3f\x92\x3c\x97\x63\x8d\xa8\x96\xad\x78\x9f\xdc\x1b\x52\x8b\x6b\xb6\x04\x96\x22\xa3\xa4\x38\xb7\x19\xcf\xfd\x4b\x79\x02\x3f\x56\x7f\x19\x7d\xfe\x5d\x95\x98\x10\x61\x92\x52\xb7\x27\x78\x80\x0a\xfc\x91\x3f\x7f\xef\xcf\x5c\x9a\x03\x56\xcd\xed\x71\xbd\xec\x2e\x53\xa2\xe8\x7d\x1c\x77\xe9\x01\x08\x1b\xa4\xf9\x86\x20\x8e\xcb\x87\xe6\xa9\x4b\xd7\x37\x68\x04\x16\x94\x42\xaf\xe8\xe9\xe1\x72\x62\xf1\x50\xfc\x1b\x00\x00\xff\xff\xde\x96\x28\xfb\xbe\x08\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2238, mode: os.FileMode(420), modTime: time.Unix(1487180343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

