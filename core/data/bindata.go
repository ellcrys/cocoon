// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1490028631, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x08\xc4\x1e\x9b\x38\xd9\x62\x2f\x06\x7a\x50\xac\x34\x50\x6b\xd9\x82\x3f\x0e\x45\x11\x08\x0c\x3d\x91\x09\x53\xa4\x40\x52\xde\x75\x05\xfd\xf7\x82\x94\xb4\x91\x4d\xca\xde\x5c\x42\x0f\xdf\x7c\x70\x86\xef\x51\xf5\x5d\x10\xa0\xbf\xc4\x3b\x9a\x06\x66\x19\x04\x68\x05\x39\x15\x1c\x4d\x03\x94\x33\xf1\x8e\x19\xfa\xad\xb5\xc7\x91\xb1\xd5\x75\x1c\x35\x4d\x6f\x5b\xe0\x02\x5c\xeb\xe6\x54\x5a\xab\x02\x79\xa4\x04\x7a\x73\x2a\xa9\x90\x54\x9f\xd0\x34\xf8\xf6\xd8\xd9\x42\xc6\x42\xbd\xe4\xc4\xe0\x3f\x30\x53\xd0\xd9\x23\xac\x31\x01\xae\x41\x2a\x34\x0d\xfe\xb5\xc6\x20\x40\x3b\xf2\x84\xec\xfa\xad\xc3\xcd\x04\x57\x5a\x62\xca\xf5\x10\x57\x77\xff\x83\x00\xcd\x37\x58\xe6\xa0\x4d\x39\x5f\x6a\xac\xb5\x7c\x38\x80\xe4\xc0\x1e\x38\x2e\xa0\xaf\xb8\x3d\xf7\x27\x92\x51\x5e\xfd\x18\xee\x2d\x4b\x90\x98\xef\xcc\xde\x1f\xa8\x33\x37\x67\x85\x6c\xb0\x3a\xbc\x4a\x51\x95\x23\x75\x78\x3b\xd5\x1d\xa1\xe2\x26\x6b\x5d\xdb\x55\xd3\x9c\xed\x0d\x8f\xc7\x2b\xc6\x06\x9b\x26\xe5\x30\xdb\x79\xc6\xb3\xac\x1a\xab\xc3\xbd\x93\xba\xed\xb4\xa4\x47\x90\x06\xb4\x13\xe4\x00\xf2\x72\x7f\x26\xf8\x07\xcd\x7f\x5e\x8f\xc1\x0e\x2d\x70\xde\x9f\xc9\x2c\x9d\xd8\x41\x80\x3e\x84\x24\x90\x95\x15\x63\x68\x1a\x68\x59\x81\x83\x20\xa2\x28\xba\xd6\xbe\x63\xb5\x77\x43\x70\xd0\xdf\x85\x3c\x64\x85\xd8\xd9\x6c\x7b\xa1\xb4\x8b\xc2\x32\xb7\xbd\x40\x5f\xea\xc5\x32\x09\xa3\x2c\x79\xd9\x84\xd9\x7a\xb6\x8a\xd3\xcd\x3a\x8b\xe2\x55\x33\x39\xdb\x89\x5e\xd2\xf9\xf2\x9f\x0e\x90\x2d\xc2\xe4\xa5\x41\x6f\x4e\xd4\x52\xd2\x23\x65\x90\xc3\x6e\xac\xfc\x52\x48\x9d\x15\xb8\x34\xb9\xdf\xce\x36\x9b\x8b\x46\xbe\xf0\xa3\xaf\x8b\xb3\xe5\x6c\xb9\x5c\x64\x1e\x76\xb9\xa0\xd9\x32\x7a\xc9\xb6\xab\x79\x0b\x9d\x09\x22\x04\x9f\x89\x1d\x6c\x57\xf3\x5b\x5e\x9b\xf0\xf5\xd2\x6b\x83\xf3\x5b\x5e\xf3\x70\xe1\xb8\xcd\x31\xbf\xe6\xf7\xbc\x8d\xe7\x51\x96\x86\xab\x30\x59\x0f\x5d\x9f\x2b\xca\x76\x29\x96\xb8\x50\x57\xbc\xa3\x78\xfd\x77\x36\x8f\x93\x78\xd3\xfa\x46\x54\x1d\x92\xe7\xa6\x41\x57\x5b\xbb\x6e\x85\xe6\x92\x0c\x81\x43\x88\x60\x48\x0a\x62\xeb\x52\x7e\x5e\x04\x2d\xc3\xba\x4b\xd5\x41\x9c\x0b\x62\x54\x4d\x48\x3d\xc7\xef\xc0\xda\x90\x9c\x03\xd1\xe2\x92\x45\xed\x11\xf7\x40\x1c\xc2\x8e\xd7\x69\x7d\x62\x4b\x0c\x4f\xb4\xb3\x93\x60\x46\x8f\x30\x06\xea\xd5\x58\x93\x72\x0c\x92\x62\xbd\x37\x90\x89\x38\x8c\x42\x84\xd4\x67\x27\xbc\xdf\x6b\x3d\x1a\x70\x43\x0b\x10\x95\x71\xf8\xfa\xd8\xff\x8d\x40\x63\x23\xf2\x47\x6c\xda\xf7\xf4\x78\x0b\x9c\x4a\xa1\x05\x11\xb6\xd7\x36\xbf\x07\xd6\x38\xb6\xb7\xbb\x6b\x88\x8b\xa1\xa2\x04\x34\xf6\x11\xd5\x55\x0c\x53\x85\xac\xf8\xfd\xcf\x9e\x3c\xf8\xf4\x6b\xa0\x41\xb6\xc7\x4c\x10\xcc\x26\x8a\x48\x5a\x6a\x75\xfd\x5e\xcf\x45\x3e\x2e\xbf\x09\xfe\xf1\x27\x65\xf6\xd2\x3f\x39\xfd\xea\x77\xd7\xf4\x3f\x48\x9e\x2d\xe4\x6a\xa6\x0d\x14\x25\xc3\xba\xa5\xd0\x65\x47\x42\xa9\xe9\x07\x26\xed\x13\xeb\x21\xd4\x2b\x68\x0d\x72\x2d\x2a\x49\xa0\x9f\x8c\x9a\x4e\x26\x12\x7f\x7f\xc8\xa9\xde\x57\xef\x95\x02\x49\x04\xd7\xc0\xf5\x03\x11\xc5\x84\x13\xb1\x03\x35\x69\x19\x38\x29\xb0\xd2\x20\xfb\x96\xdc\xd6\x69\x0f\xb7\x56\xc0\xb0\xa6\x47\x88\x40\xe9\x9b\x5d\xbe\x3c\xdf\x0a\x94\xad\x5d\x79\xf5\x39\xdd\xb6\x8f\x73\xba\x6d\x1a\xb7\xcd\x50\x08\x79\xb2\x1d\xae\xeb\xfe\x87\x07\x17\x2f\x53\xa3\x86\xee\x9c\x16\xed\xeb\xe6\x97\x05\x9f\x28\xa0\xe4\x99\xda\x49\xd4\xb5\x5d\xb9\xc9\x2c\x2a\x3a\x71\x5c\x50\x62\x68\xab\xd0\xd4\xa7\x38\x41\x50\x07\xa8\x53\xae\x81\x70\x79\xc3\xf9\xb1\xad\x04\xb8\x7c\x73\x19\xe7\xb2\xf2\xfa\x5b\x19\x51\x55\x62\x4d\xf6\x29\x3e\x31\x81\x8d\x06\xd6\xc3\x00\x9f\xeb\xb7\xe1\x07\xdc\xc8\x18\xc7\x47\xf8\x2b\xe3\xf3\x8e\xee\x6c\x6c\x9f\x47\x69\xce\xab\xd1\x58\xea\x54\x30\x4a\x4e\x97\x15\x0d\x44\xef\xf7\x47\xbf\xea\xa1\x50\x6b\x28\x4a\xed\xf2\x1b\x45\xc0\xb0\x09\xf9\xf5\x9b\xdf\x33\xe9\xbe\x94\x76\x16\xe7\xad\xae\x17\xb9\xc6\xfb\x31\xbb\x2d\x77\x58\xc3\xa0\x68\xb4\xd6\x38\xcf\xed\x67\xa2\x47\xa4\x8d\xd8\x98\x97\x9d\x31\xfb\x0a\x3e\xdd\xf5\x11\x9b\xbb\xe6\xff\x00\x00\x00\xff\xff\x71\x0b\x95\x77\x60\x0c\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 3168, mode: os.FileMode(420), modTime: time.Unix(1490028595, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

