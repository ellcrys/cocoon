// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487315984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x5b\x8f\xea\x36\x10\x7e\xdf\x5f\x61\x59\xe7\xb1\x0b\xec\xa9\x8e\x2a\x21\xf5\x81\x43\xb6\x2b\x2a\x2e\x11\x97\x87\xaa\x42\x68\x30\xde\x60\xe1\xd8\x91\x3d\x70\x0e\x8d\xf2\xdf\x2b\x3b\xa1\x9b\xc4\x81\x2d\x2f\xeb\x9d\xf9\xe6\xf6\x8d\x67\x9c\xfc\x89\x10\xfa\xa7\xde\xd3\x21\x71\x47\x42\xe8\x92\x27\x42\x2b\x3a\x24\x34\x91\x7a\x0f\x92\xfe\x52\xca\x27\x91\x93\x31\xcd\xb4\x56\xcf\x79\x3e\x89\x8a\xe2\xa6\x9a\x43\xca\xef\x2a\xd7\xd7\xcc\x2b\x2d\x37\x17\xc1\xf8\x4d\x1c\x1b\xa1\x8d\xc0\x2b\x1d\x92\x6f\x83\x4a\x36\x92\x72\x84\x0b\xc5\x1c\xfe\x1d\xa4\xe5\x95\x3c\x02\x04\xc6\x15\x72\x63\xe9\x90\xfc\xed\x85\x84\xd0\x03\x7b\xa1\xfe\xbc\xad\x70\x63\xad\x2c\x1a\x10\x0a\xeb\xb8\xbc\xfa\x4b\x08\x9d\xae\xc1\x24\x1c\x5d\x3a\x5f\x72\x40\x34\xbd\x13\x37\x8a\xcb\x9e\x82\x94\xdf\x32\x2e\x59\xf8\x40\x4a\xa1\xce\x3f\xeb\xba\x45\xc6\x0d\xa8\x83\xd3\xfd\x4e\x2b\x71\xd1\x48\x64\x0d\xf6\xf4\x66\xf4\x39\xbb\x93\xc7\x23\xc2\xaa\x4a\xce\xca\x05\xcf\x73\x7f\x2a\x8a\x86\xae\x5e\xa5\x3a\x4b\x59\x53\xba\xc8\xf5\xa0\xcd\xc0\x5d\xc1\x11\xec\x29\xcc\xa0\xe4\xdd\x88\x0b\x37\x0e\x7b\xd0\xec\xc4\x4d\x5b\x3f\xd6\xea\x5d\x24\xff\x5d\x9d\x9a\x46\xa4\x90\xf8\x20\x79\x3e\x71\xc7\xc0\x37\x21\xf4\x5d\x1b\xc6\x77\xd9\x59\x4a\x3a\x24\x68\xce\x3c\x40\x30\x9d\xa6\x15\xd1\x7b\xb0\xc7\xd0\x05\x98\xc4\x17\x4b\xbf\xe4\xf3\xc5\x6c\x14\xed\x66\xaf\xeb\xd1\x6e\x35\x5e\x4e\xe2\xf5\x6a\x17\x4d\x96\x45\xbf\xa1\x89\x5e\xe3\xe9\xe2\xaf\x0a\xb0\x9b\x8f\x66\xaf\x05\xdd\x06\x5e\x15\xc7\x1f\xda\x9c\x76\xa9\x3e\xf8\x1a\x8e\xda\x62\x18\x3b\xd3\x06\x77\x29\x64\x2e\x7e\xbb\x7e\x9f\xbb\x52\x9c\xa1\x36\xcf\x47\x44\x07\xfa\x75\x30\x18\xb4\x60\xc5\xb6\x21\x28\x5a\xf4\xbe\xaa\x4b\x17\xb7\xe3\xc5\x78\xb1\x98\xef\xee\xcf\x63\x88\x1d\x2f\xa2\xd7\xdd\x66\x39\x2d\x3b\x32\xf6\x36\x63\x7d\xe0\x9b\xe5\xf4\x33\xab\xf5\xe8\xad\x6d\xb5\x86\xe4\x33\xab\xe9\x68\x1e\x98\x4d\x41\x39\xbb\x87\x25\xaf\xca\x25\x61\xbb\x48\x6d\x5d\x5c\x1b\x66\xb0\x86\xea\x3a\x54\x74\x84\xad\x8d\xb5\xc1\x29\xec\xb9\x2c\xfd\x34\x5a\x44\x08\x69\xe6\xd6\x32\xa7\x33\x8e\xd0\xd5\x90\xf0\x56\xf9\x91\xe1\x97\xe7\x03\xcf\xa4\xbe\x3e\x7f\x04\x1a\xf4\x06\xbd\xdf\x7a\x5d\x57\xb9\x76\x69\x9d\x75\x5f\x6a\x06\xb2\x6f\x99\x11\x19\xda\xc7\xa4\x4d\x75\x72\x7f\x12\x67\xf0\xf3\x0f\x21\x3d\xa3\x2f\x83\x20\x6a\xa5\x5d\x89\x7f\xf8\xec\xbb\x87\x3c\x8c\xb4\xe6\x69\x26\x01\xcb\xfe\xb4\xe9\x19\x19\x14\xef\xc0\xb0\xb3\x79\x84\xd0\x37\x8e\xc8\xcd\x4a\x9f\x0d\x2b\xc7\x0a\x31\xb3\xc3\x7e\xdf\xc0\x8f\x5e\x22\xf0\x78\xde\x9f\x2d\x37\x4c\x2b\xe4\x0a\x7b\x4c\xa7\x7d\xc5\xf4\x81\xdb\x7e\xd9\xef\x7e\x0a\x16\xb9\xb9\x51\xf2\xf9\x60\xb7\x8b\xf5\x6f\x9b\x04\x14\x17\x1e\x71\x8b\x9f\xb2\xdc\xae\x6f\xc9\xad\xcf\xdd\x76\x0e\x65\xbc\x29\xd7\x75\xbc\x29\x8a\x90\x66\x9e\x6a\x73\xf5\x0c\xe7\xf9\xed\x9f\x0e\xdc\x64\x11\xaf\xe8\x90\x84\x7d\x9a\x97\x2b\xa9\xbd\xd9\xcb\x5f\xc8\xb5\x0b\xf9\x5d\xf8\x4e\x7c\x1d\x04\xde\xbc\x3e\xba\x2a\x48\x05\x73\x03\x61\xe9\x30\x74\xea\x1d\x13\x5a\x0d\x4b\x7b\x56\x8a\x0e\xfc\x36\x90\xb5\x51\x8f\xd7\x5d\x24\x6c\x06\xc8\x8e\x31\x5c\xa5\x06\xb7\xf5\xf3\xba\x83\x8f\xf3\xb6\xfe\x4e\xdf\x69\xca\xfd\x86\xfc\x9f\x66\xb8\x5c\x4e\x15\xa2\x3c\xb6\xf4\x5d\x8d\x6a\x34\xe9\xa3\xd4\xa2\x99\x2d\x82\xc1\x58\x4b\xc1\xae\xed\x8c\x27\xee\x03\xe7\x02\xb2\x7a\x2b\x6e\xbf\x46\x88\x11\x22\x4f\x33\x0c\xa7\x99\x46\x5c\x82\x73\xf9\xf5\x5b\xb7\xe5\xac\x7a\xcc\x0e\x1e\xd7\x99\xdd\x6d\xbf\x15\x9d\xdf\x34\x9b\xec\x00\xc8\x6b\x49\xd3\x15\x42\x92\xf8\xef\x83\x97\x30\x5d\xb7\x5a\x62\x30\x20\xa5\x5f\xb6\x2f\x4f\x37\x8f\xc5\x53\xf1\x6f\x00\x00\x00\xff\xff\xe1\x32\xbe\xb4\x75\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2677, mode: os.FileMode(420), modTime: time.Unix(1487315760, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

