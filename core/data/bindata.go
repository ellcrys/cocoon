// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487159048, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x6f\xdb\x30\x0c\xbd\xf7\x57\x08\xc2\x80\x5e\xda\xae\xd9\xd0\x4b\x80\x1d\x32\xbb\x2b\x32\x38\xb1\xd1\x38\xa7\x21\x28\x58\x99\x75\x85\xc8\x92\x21\x2b\x59\x33\xc3\xff\x7d\x90\xec\x34\xfe\x4a\x9b\x4b\x68\xbe\x47\xf1\x91\x22\x55\x5e\x10\x42\x7f\xab\x67\x3a\x25\xd6\x24\x84\x3e\x62\xca\x95\xa4\x53\x42\x53\xa1\x9e\x41\xd0\xab\xda\x3f\xf7\xad\x8f\x29\xa6\x94\xbc\x2e\xcb\xb9\x5f\x55\x47\x68\x09\x19\x9e\x05\xe3\x43\xee\xc0\x02\xf5\x9e\x33\x3c\xba\x23\xcd\x95\xe6\xe6\x40\xa7\xe4\xee\xb6\xf1\xcd\x84\x98\x99\x50\x32\xcb\x7f\x01\x51\x60\xe3\xf7\xc1\x00\x43\x69\x50\x17\x74\x4a\xfe\x38\x27\x21\x34\x61\x13\xea\xec\x4d\xc3\xf3\x94\x2c\x8c\x06\x2e\x4d\x9b\x57\x36\xff\x84\xd0\x20\x06\x9d\xa2\xb1\x72\xbe\x94\x60\x8c\xbe\xd9\xa2\x96\x28\x6e\x24\x64\x78\x54\x5c\x77\xe1\xc4\x14\x5c\xee\xde\xda\x58\x98\xa3\x06\x99\x58\xec\x07\x6d\xdc\x55\x47\x48\x0c\xc5\xf6\x41\xab\x5d\x7e\x46\xc7\x47\x0d\x6b\x2a\xd9\x49\x9b\xbc\x2c\x9d\x55\x55\x1d\xac\x5d\xa5\xdc\x09\xd1\x02\x6d\xe6\x76\xd2\x6e\xe2\xb1\xe4\x06\x8a\xed\x50\x41\xdd\x77\xcd\xf7\xa8\x2d\x37\x51\x6c\x8b\xba\x8f\x7b\x4a\xbe\xf0\xf4\x7d\x74\x5a\x08\xcf\x20\x75\x49\xca\x72\x6e\xcd\xc1\xd9\xc4\xe6\xcf\xb2\xa6\x8d\xcf\x50\xbc\x0e\x09\xa0\x53\x57\x0a\xbd\x66\xf4\x8a\x5e\x8a\x82\x7c\x15\x8a\x81\xb8\xa4\x9b\x0e\xb5\xea\xc9\xba\x97\xfb\x31\x4d\x5e\xe8\x85\xe1\xf2\xe9\xfc\x1c\x0f\xb9\x5e\xe8\xdf\x3f\xad\x1f\x83\xba\x12\xcf\xc5\x78\x2a\xc1\xf5\x63\xf0\x59\x54\x3c\x7b\xe8\x47\xc5\x90\x7e\x16\x15\xcc\x96\x83\xb0\x00\xa4\x8d\xfb\xb0\xe4\x55\xbd\x5c\xae\x5d\x9b\x1e\xb6\x40\x03\xb6\x1f\xfd\x98\x40\xa5\xe7\x2f\x70\x01\x6f\xbf\xb8\x70\x07\x4e\x6e\x07\x92\x1b\x74\xc5\xff\xe1\xe2\xa7\xa3\x7c\xa8\x2e\xc6\x2c\x17\x60\xc6\xe5\xcd\xb4\xe1\x2f\xc0\xcc\x28\xe8\xf3\x22\x07\xc3\x5e\x23\x38\x08\x05\x89\x2b\xa3\xc5\x38\xd9\x9b\xf6\xee\x62\xa1\x76\xba\xee\x46\xbb\x30\xea\x45\xeb\x7a\xa7\xa2\x75\xd5\xd1\x48\x17\x98\x29\x7d\x70\xb5\x94\xe5\xf1\xa3\xc7\xf1\x79\xb1\x6d\x18\xb5\xd9\xc3\xe7\x61\xb4\xa2\x53\xd2\xe9\x16\x5d\xa2\xf9\xab\x74\xbd\x92\xa7\xa9\xad\xba\x6a\x0d\x68\x13\x29\xc1\xd9\xa1\xaf\x78\x6e\x1f\xbd\x3d\x08\x3a\x25\xdf\x6f\x4f\xbf\x4e\x8a\x99\x31\x98\xe5\x66\x78\x55\xd4\x47\x01\xf6\xc8\x6f\x77\xe3\x91\x0b\x95\xb8\x25\x4d\x1c\x6f\x54\xdd\xfb\xf0\x8c\xbe\x73\xeb\x3c\x01\x83\x2d\xd1\x74\x65\x20\x4d\xdd\x9b\x31\x19\xca\xb5\x73\x13\x81\x06\x21\xd0\x56\x34\xb9\x38\x9e\x58\x5d\x54\xff\x03\x00\x00\xff\xff\x94\x36\x37\xe5\x89\x06\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1673, mode: os.FileMode(420), modTime: time.Unix(1487159033, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

