// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487252952, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4d\x8f\xe2\x38\x13\xbe\xf7\xaf\xb0\xac\x39\xbe\x0d\xf4\xbc\x1a\xad\x84\xb4\x07\x86\xb0\x2d\x56\x7c\x44\x7c\x1c\x56\x2b\x84\x8a\x50\x9d\x8e\x70\xec\xc8\x2e\x98\x61\xa3\xfc\xf7\x95\x9d\x30\x9d\xc4\x81\xde\x5c\x30\xf5\xf9\xd4\x53\xae\x4a\xf2\x27\xc6\xf8\x9f\xea\xc0\x87\xcc\x1e\x19\xe3\x2b\x8c\x13\x25\xf9\x90\xf1\x58\xa8\x03\x08\xfe\xbf\x52\x3e\x0d\xac\x2c\x52\x91\x52\xf2\x39\xcf\xa7\x41\x51\xdc\x54\x0b\x48\xf1\xae\x72\x73\xcd\x9c\xd2\xa0\xbe\x24\x11\xde\xc4\xa1\x4e\x94\x4e\xe8\xca\x87\xec\xdb\xa0\x92\x8d\x84\x18\xd1\x52\x46\xd6\xfe\x0d\x84\xc1\x4a\x1e\x00\x41\x84\x92\x50\x1b\x3e\x64\x7f\x3b\x21\x63\xfc\x18\xbd\x70\x77\xde\x55\x76\x63\x25\x0d\x69\x48\x24\xd5\xed\xf2\xea\x97\x31\x3e\xdb\x80\x8e\x91\x2c\x9c\x2f\x39\x10\xe9\xde\x09\xb5\x44\xd1\x93\x90\xe2\x0d\x71\xc9\xc2\x87\xa5\x48\xe4\xf9\x67\x5d\xb7\xcc\x50\x83\x3c\x5a\xdd\xef\xbc\x12\x17\x0d\x20\x1b\x30\xa7\x57\xad\xce\xd9\x1d\x1c\x8f\x08\xab\x2a\x39\x4b\x9b\x3c\xcf\xdd\xa9\x28\x1a\xba\x7a\x95\xf2\x2c\x44\x4d\x69\x33\xd7\x93\x36\x13\x77\x25\x27\x30\x27\x1f\x41\xc9\xbb\x4e\x2e\xa8\xad\xed\x51\x45\x27\xd4\x6d\xfd\x58\xc9\xb7\x24\xfe\x75\x75\x6a\x9a\x24\x85\xd8\x25\xc9\xf3\xa9\x3d\x7a\xb1\x19\xe3\x6f\x4a\x47\xb8\xcf\xce\x42\xf0\x21\x23\x7d\x46\xcf\x22\x52\x69\x5a\x11\x7d\x00\xf3\xee\x87\x00\x1d\xbb\x62\xf9\x97\x7c\xb1\x9c\x8f\x82\xfd\x7c\xb2\x19\xed\xd7\xe3\xd5\x34\xdc\xac\xf7\xc1\x74\x55\xf4\x1b\x9a\x60\x12\xce\x96\x7f\x55\x06\xfb\xc5\x68\x3e\x29\xf8\xce\x8b\x9a\x29\x4d\xfb\x14\x32\x1b\x79\xd7\x50\x16\x2d\x02\x26\xf2\xd2\x55\xfd\x78\x39\x5e\x2e\x17\xfb\xfb\x13\xe3\xdb\x8e\x97\xc1\x64\xbf\x5d\xcd\x4a\xce\xc6\xce\x67\xac\x8e\xb8\x5d\xcd\x3e\xf3\xda\x8c\x5e\xdb\x5e\x1b\x88\x3f\xf3\x9a\x8d\x16\x9e\xdb\x0c\xa4\xf5\x7b\x58\xf2\xba\x1c\x63\x47\xbb\x57\x78\xf3\x6a\x19\x1f\xc1\x06\xaa\x86\x55\x74\xf8\xe4\x87\x4a\xd3\x0c\x0e\x28\xca\x38\x52\x62\x44\x4a\x73\xc6\x58\x13\x56\xcb\x93\xcf\x91\xa0\xab\x17\x7e\xcb\xdd\x7d\xc6\xcb\xf3\x11\x33\xa1\xae\xcf\xbf\x72\x3c\x0f\x7a\x83\xde\x6f\xbd\xae\x7b\x56\xbb\x51\xd6\xbb\x2f\x54\x04\xa2\x6f\x22\x9d\x64\x64\x1e\xf3\x35\x53\xf1\xfd\x31\x99\xc3\xcf\x3f\x12\xe1\xc8\x7c\x19\x78\x59\x2b\xed\x3a\xf9\x07\xe7\xdf\x9d\xc9\xc3\x4c\x1b\x4c\x33\x01\x54\xb6\xa6\x4d\xcf\x48\x53\xf2\x06\x11\x75\xf6\x8d\x31\xfe\x8a\x44\xa8\xd7\xea\xac\xdd\xf6\xe5\xef\x44\x99\x19\xf6\xfb\x1a\x7e\xf4\xe2\x84\xde\xcf\x87\xb3\x41\x1d\x29\x49\x28\xa9\x17\xa9\xb4\x2f\x23\x75\x44\xd3\x2f\x5b\xdd\x4f\xc1\x10\xea\x1b\x25\x9f\x4f\x5d\xbb\x58\xf7\xe2\x11\x40\xc9\x05\x03\x34\xf4\x29\xcb\xed\xfa\x56\x68\x1c\x76\xd3\x39\x8f\xe1\xb6\xdc\xa5\xe1\xb6\x28\x7c\x9a\x31\x55\xfa\xea\x18\xce\xf3\xdb\x9f\x0e\xbb\xe9\x32\x5c\xf3\x21\xf3\xfb\xb4\x40\xfa\xa1\xb4\xb7\x76\xcb\xc7\xe7\xda\xa6\xfc\x9e\xb8\x4e\x7c\x1d\x78\xd1\x9c\x3e\xb8\x4a\x48\x93\xc8\xce\x82\xe1\x43\x3f\xa8\x0b\xcc\x78\x35\x27\xb5\x31\x29\x3a\x4c\x77\x9e\xac\x6d\xf5\x78\xc9\x05\x89\xc9\x80\xa2\xf7\x10\xae\x42\x81\xdd\xc6\x79\x3d\xc0\xc7\x79\x57\x7f\x7f\xde\xe9\xc7\xfd\x5e\xfc\x97\x3e\x58\x2c\xa7\xca\xa2\x3c\xb6\xf4\x5d\x3d\x6a\xf4\xe7\xa3\xd4\xa2\x89\x96\x40\x53\xa8\x44\x12\x5d\xdb\x88\xa7\xf6\xc3\xe3\x02\x76\x21\xfd\x7f\xf0\xf1\x34\x52\x8c\x88\x30\xcd\xc8\x1f\x64\x1e\xa0\x00\x1b\xf2\xeb\xb7\x6e\xcf\xb9\x3a\x62\xb9\x91\xac\x5d\x27\xba\xdb\x6a\x2b\x3a\xbf\x35\xb6\xd9\x11\x08\x6b\xa0\xf9\x9a\x20\x8e\xdd\x7b\xfb\xc5\x87\x6b\xb7\x4a\x08\x1a\x84\x70\x2b\xf6\xe5\xe9\x16\xb1\x78\x2a\xfe\x0d\x00\x00\xff\xff\x84\x93\x60\x6a\x0d\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2573, mode: os.FileMode(420), modTime: time.Unix(1487252933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

