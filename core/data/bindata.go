// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487160918, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x5d\x6f\xe2\x3a\x10\x7d\xef\xaf\xb0\xac\xfb\x78\x0b\xe5\x5e\xf5\x05\x69\x1f\xd8\xa4\x5b\xb1\xe2\x4b\x05\x9e\x56\xa8\x9a\x26\x43\xb0\x70\xec\xc8\x1e\xd8\xb2\x51\xfe\xfb\xca\x4e\x28\xf9\x80\xb6\x2f\x1d\xe6\x9c\xf1\x9c\x39\xb1\x27\xbf\x63\x8c\xff\xd4\x6f\x7c\xc8\x5c\xc8\x18\x7f\xc1\x44\x68\xc5\x87\x8c\x27\x52\xbf\x81\xe4\xff\x96\xf9\x71\xe8\x72\x91\x8e\xb4\x56\xf7\x79\x3e\x0e\x8b\xe2\x0c\xcd\x20\xc5\x9b\xe0\xea\x94\x79\xd0\xa2\x39\x8a\x08\xcf\xe9\x85\x11\xda\x08\x3a\xf1\x21\x7b\x7c\xa8\x72\x23\x29\x47\x34\x57\x91\xe3\x6f\x41\x5a\xac\xf2\x21\x10\x44\xa8\x08\x8d\xe5\x43\xf6\xcb\x27\x19\xe3\x71\x34\xe0\x3e\xde\x54\xbc\x40\x2b\x4b\x06\x84\xa2\x3a\x2f\xaf\xfe\x33\xc6\x27\x2b\x30\x09\x92\x93\xf3\x4f\x0e\x44\xa6\xb7\x47\xa3\x50\xf6\x14\xa4\x78\x56\x5c\xba\x70\x61\x4a\xa1\x0e\xef\x75\x6c\x9e\xa1\x01\x15\x3b\xec\x1b\xaf\xd2\x45\x43\xc8\x0a\xec\xfe\xd9\xe8\x43\x76\x43\xc7\x67\x86\x55\x93\x1c\x94\x6b\x9e\xe7\x3e\x2a\x8a\x06\x56\x9f\x52\x1d\xa4\xac\x81\xae\x73\xbd\x69\xb3\xf1\xb5\xe6\x04\x76\xdf\x55\x50\xfa\x6e\xc4\x11\x8d\xe3\xc6\x3a\xda\xa3\x69\xe3\x81\x56\x5b\x91\x7c\x5c\x9d\x1a\x22\x52\x48\x7c\x93\x3c\x1f\xbb\xb0\x73\x36\x73\xfd\xd3\xb4\xb2\x51\xda\x2e\x0c\x26\xf1\x83\xf0\x1e\xdf\x34\xb0\xa2\xa5\xe2\x49\x1d\xaf\x49\x08\xe6\xc1\x7c\x3e\x7b\xbd\x7d\x6d\xbb\xdc\x60\x1e\x3e\xbd\xae\x5f\x26\xa5\xf0\xc0\xd7\x04\x3a\xc6\xf5\xcb\xe4\xab\xaa\xd5\xe8\xb9\x5d\xb5\x82\xe4\xab\xaa\xc9\x68\xd6\x29\x9b\x80\x72\x75\x9f\x8e\xbc\x2c\xdf\x92\xf7\x67\xd3\xc2\xa6\x48\xe0\xfc\x68\xd7\x4c\x74\x72\xfb\x7b\x4d\xe1\xfd\x87\x90\xfe\xc0\xc1\x43\x47\x72\x85\x2e\xc5\x1f\x9c\x7e\xf7\x94\x4f\xd5\xad\x30\xcd\x24\xd0\x75\x79\x23\x43\x62\x0b\x51\xf9\x42\xdb\x3a\x18\xe3\xcf\x48\x84\x66\xa9\x0f\xc6\xaf\x01\xbe\x23\xca\xec\xb0\xdf\xb7\xa4\x0d\x24\xd8\x4b\xb4\x4e\x24\x42\x26\x6c\x2f\xd2\x69\x7f\x6f\x74\x02\xaa\x1f\xe3\xf1\x3e\xc6\x4c\xea\xd3\x7d\xa4\x95\xc2\x88\xb4\xe9\xd9\x5d\xc7\x7d\xbf\xdf\x24\x90\x38\x62\x88\xd6\x3f\xef\xfe\x4e\xa7\xd8\xb7\x74\xd8\x6e\x5d\x45\x73\xb2\xb6\xfa\x50\xd8\x0c\x28\xda\x2d\xe0\x24\x35\xc4\xde\xe7\x1a\xe3\x12\x6f\xea\xbb\x04\xad\x1f\xc7\xb6\x9c\xe7\xc1\x62\x5d\xbe\xf1\xc5\xba\x68\x98\xc8\xa7\x98\x6a\x73\xf2\x66\xe7\xf9\xf9\x47\x8b\x13\x0a\xbb\xaf\x18\x65\xd8\xc2\xc7\xf3\xc5\x92\x0f\x59\xe3\x73\xf2\x19\xd2\x6f\x6d\xca\x15\x71\x79\x56\x45\x53\x2d\x81\xa1\x85\x96\x22\x3a\xb5\x15\x8f\xdd\x12\x3e\x82\xe4\x43\xf6\xff\xc3\xe5\xaf\xd1\x62\x44\x84\x69\x46\xdd\xbb\xc4\x43\x94\xe0\x8e\xfc\xef\xf1\x7a\xe5\x54\xc7\xfe\x9b\xc7\x9e\x77\x55\xdd\xc7\xed\xbe\xba\x77\xd7\x59\x0c\x84\x35\xd1\x7c\x49\x90\x24\x7e\x87\x0d\xba\x72\xdd\xc5\x5e\x80\x01\x29\xd1\x4d\x34\xb8\x3b\x9f\x58\xdc\x15\x7f\x03\x00\x00\xff\xff\xed\x46\xae\x3f\x19\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1817, mode: os.FileMode(420), modTime: time.Unix(1487160899, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

