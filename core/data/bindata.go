// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1486976245, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\x4d\x8f\x9b\x30\x10\xbd\xe7\x57\x58\x56\x8f\xd5\x6a\xd3\x6a\x2f\x91\x7a\x48\x61\x5b\xa5\x4a\x16\x94\x8f\x53\x15\xad\x66\xcd\x84\x5a\x31\x36\x32\x93\x74\x53\xc4\x7f\xaf\x6c\xc8\x06\x08\x49\x2e\x19\xe6\x3d\xfc\xde\x3c\x06\xca\x11\x63\xfc\x97\x79\xe3\x13\xe6\x4a\xc6\xf8\x12\x53\x69\x34\x9f\x30\x9e\x2a\xf3\x06\x8a\x7f\xae\xfb\xb3\xd0\xf5\x84\x11\xc6\xe8\x87\xb2\x9c\x85\x55\x75\x86\x5e\x20\xc3\x9b\xe0\xfa\x94\x7b\xb0\x40\x7b\x94\x02\xcf\xed\xd8\x4a\x63\x25\x9d\xf8\x84\x3d\x3d\x36\xbd\xa9\x52\x53\x8a\xb4\x70\xfc\x1d\xa8\x02\x9b\x7e\x08\x04\x02\x35\xa1\x2d\xf8\x84\xfd\xf6\x4d\xc6\x78\x22\xc6\xdc\xd7\xdb\x86\x17\x18\x5d\x90\x05\xa9\xa9\xcd\x2b\x9b\x7f\xc6\xf8\x7c\x0d\x36\x45\x72\x76\x3e\x95\x40\x64\x1f\xf6\x68\x35\xaa\x07\x0d\x19\x9e\x1d\xd7\x29\x5c\x98\x4a\xea\xc3\x7b\x1b\x8b\x72\xb4\xa0\x13\x87\x7d\xe3\x4d\xbb\xea\x18\x59\x43\xb1\xff\x69\xcd\x21\xbf\xe1\xe3\x5e\x60\xcd\x24\x07\xed\xc4\xcb\xd2\x57\x55\xd5\xc1\xda\x53\xea\x83\x52\x2d\xd0\x29\xb7\x45\xbb\xc2\x43\xe2\x04\xc5\xfe\xda\x41\x9d\xbb\x95\x47\xb4\x8e\x9b\x18\xb1\x47\xdb\xc7\x03\xa3\x77\x32\xfd\x58\x9d\x16\x22\x33\x48\xbd\x48\x59\xce\x5c\x79\x75\x36\x73\xfa\x59\xd6\xc4\x28\x8c\xd6\x28\xc8\x58\x56\x10\x58\xe2\x1d\x6a\xd5\x53\x7d\xd6\xc7\x21\xc9\x20\x0a\xa2\xe8\xe5\x75\xf9\x1c\x47\xaf\x9b\xe5\x7c\x55\xab\x07\x7e\xc8\x25\xe6\x66\xb3\x9c\x57\xd5\xfd\x93\x57\xf5\x8a\xfa\xfc\xb6\x3d\x6c\x81\x04\x4e\xb6\x7f\xcf\xdc\xa4\xb7\x63\x58\xc0\xfb\x0f\xa9\xfc\x81\xe3\xc7\xab\x00\x1a\x74\x25\xff\xe1\xe2\xbb\xa7\xdc\x75\xb7\xc6\x2c\x57\x40\xc3\xf6\xa6\x96\xe4\x0e\x04\x0d\x82\xa1\x2c\x72\x20\xf1\x27\x86\x93\x32\x90\xf8\x31\x5a\x8c\x4b\xbd\x6d\xbf\x01\x58\x98\x83\xad\xd3\x68\x0f\xc6\x83\x78\x53\x6f\x66\xbc\xa9\x3a\x1e\xf9\x02\x33\x63\x4f\x7e\x96\xb2\x3c\x5f\xf4\x38\xa1\x2c\xf6\x0d\xa3\x2e\x7b\xf8\x2c\x8a\xdd\xa3\xeb\xa4\xc5\x5f\x90\xfe\x1a\x5b\x2f\xf6\x76\x34\x10\x90\x73\xeb\x36\x27\x36\x4a\x8a\x53\xdf\xf1\xcc\x7d\x3a\x8e\xa0\xf8\x84\x7d\x7d\xbc\xfc\x3a\x12\x53\x22\xcc\x72\xba\x7e\x54\x3c\x44\x05\xee\xc8\x2f\x4f\xc3\x77\x2e\x4c\xe2\x57\x3d\xf1\xbc\x41\x77\x1f\xcb\x33\xf8\xb5\xd8\xe4\x09\x10\xb6\x4c\xf3\x15\x41\x9a\xfa\x37\x6f\x7c\x6d\xd7\xed\x4d\x0c\x16\x94\x42\x37\xd1\x78\x74\x3e\xb1\x1a\x55\xff\x03\x00\x00\xff\xff\xf5\xf4\x52\xf3\xcf\x05\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1487, mode: os.FileMode(420), modTime: time.Unix(1486975370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

