// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487176765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x4d\x6f\xeb\x36\x10\xbc\xe7\x57\x10\xc4\x3b\x36\xb6\xd3\xf6\x5d\x0c\xf4\xa0\x5a\x6e\xe0\xc2\xb6\x04\x7f\x1c\x8a\x22\x30\x36\xf4\x46\x21\x4c\x91\x02\xb9\xf6\x8b\x2b\xe8\xbf\x17\x94\xe4\x46\x96\x64\xa7\xb9\x84\xde\x99\xe5\xce\xac\xc8\x65\xfe\xc0\x18\xff\xd3\xbc\xf2\x31\xf3\x4b\xc6\xf8\x0a\x13\x69\x34\x1f\x33\x9e\x28\xf3\x0a\x8a\xff\x54\xc5\x67\xa1\x8f\x09\x23\x8c\xd1\x8f\x79\x3e\x0b\x8b\xe2\x02\x2d\x21\xc5\x9b\xe0\xe6\x9c\x95\xa0\x43\x7b\x92\x02\x2f\xe1\xd8\x4a\x63\x25\x9d\xf9\x98\x7d\x1f\xd5\xb1\x40\xa9\x80\x22\x2d\x3c\xff\x0d\x94\xc3\x3a\x1e\x02\x81\x40\x4d\x68\x1d\x1f\xb3\xbf\xcb\x20\x63\x7c\x2f\x9e\x78\xb9\x7e\xa9\x79\x13\xa3\x1d\x59\x90\x9a\x9a\xbc\xbc\xfe\xcf\x18\x9f\x6f\xc0\x26\x48\x5e\xce\xb7\x1c\x88\xec\xe0\x80\x56\xa3\x1a\x68\x48\xf1\xa2\xb8\xea\xc2\x27\x53\x49\x7d\xfc\x68\x62\x51\x86\x16\xf4\xde\x63\xbf\xf1\x3a\x5c\x5c\x09\xd9\x80\x3b\x3c\x5b\x73\xcc\x6e\xe8\xb8\xd7\xb0\xda\xc9\x51\xfb\xe2\x79\x5e\xae\x8a\xe2\x0a\x6b\xba\xd4\x47\xa5\x1a\xa0\xaf\xdc\x2c\x7a\x5d\xb8\xaf\x38\x81\x3b\x74\x15\x54\x7d\xb7\xf2\x84\xd6\x73\xf7\x46\x1c\xd0\xb6\xf1\x89\xd1\x6f\x32\xf9\xef\xe8\x34\x10\x99\x42\x52\x16\xc9\xf3\x99\x5f\x76\xf6\x66\xbe\x7e\x9a\xd6\x6d\x7c\x05\xf7\xde\x25\x80\x4d\x4a\x2b\xfc\x5b\xbe\x8c\x16\x41\xb8\x5b\x4c\x37\xc1\x6e\x3d\x59\xcd\xe2\xcd\x7a\x17\xce\x56\xc5\xf0\x0a\x09\xa7\xf1\x3c\xfa\xab\x26\xec\x96\xc1\x62\x5a\xf0\x97\xab\x4d\x8b\x96\x81\xa9\x3e\xf5\xa9\x9f\x44\x93\x28\x5a\xee\x6e\x9f\xf8\x2e\x77\x12\x85\xd3\xdd\x76\x35\xaf\x3c\x4f\xca\x9c\x89\xd9\xe3\x76\x35\xff\x2a\x6b\x13\x3c\xb7\xb3\x36\x90\x7c\x95\x35\x0f\x96\x9d\xb4\x39\x68\x9f\x77\xd7\xf2\xba\xba\x86\x65\x63\x5f\x5a\xd8\x02\x09\xfa\xfa\xd1\x6d\x6c\x79\x26\xf0\xf4\xb8\xc7\x4c\x99\xf3\xa3\x30\x5a\xa3\x20\x63\x1f\x47\x83\xd1\xe0\xd7\x41\xdf\xd7\x6c\x7c\x37\x9f\x3d\x54\x46\x80\x1a\x3a\x61\x65\x46\xee\xbe\xe6\xb9\x49\x6e\x1f\xb5\x05\x7c\xfc\x21\x55\x69\xe8\x69\xd4\xa9\x5a\xa3\x6b\xf9\x0f\x2e\x7e\x2f\x29\x77\x2b\x6d\x30\xcd\x14\x50\x7f\x7b\x02\x4b\xf2\x0d\x44\x35\x5c\xda\x3a\x18\xe3\xcf\x48\x84\x76\x6d\x8e\xb6\x9c\x60\xfc\x9d\x28\x73\xe3\xe1\xd0\xc2\x8f\x41\x22\xe9\xfd\xf8\x7a\x74\x68\x85\xd1\x84\x9a\x06\xc2\xa4\x43\x2d\xcc\x1e\xdd\xb0\x3a\x62\xc3\x14\x1c\xa1\xbd\xb4\xe4\xeb\xb3\xdd\x36\x5b\x0e\x6f\x05\x24\x4f\x18\xa2\xa3\x2f\xbb\xdc\xf6\xb7\x42\x57\x6a\x77\xbd\x77\x22\xde\x56\xf3\x28\xde\x16\x45\xb7\xcd\x98\x1a\x7b\x2e\x3b\x9c\xe7\x97\x1f\x3d\xbc\x59\x14\xaf\xf9\x98\x75\xbf\xd3\x12\xe9\x87\xb1\xd5\xe8\xba\x7f\x67\x43\xe9\x32\x20\xf1\x1e\xc3\x59\x19\xf0\xe3\x23\x2f\x1a\x8c\xcf\xf5\x4b\x73\x9c\xdf\xb0\x76\xdb\xd6\xff\xb1\xe4\xb5\x1c\x6a\x46\xb5\x6c\xe1\x7d\x76\x6f\x58\x2d\xae\xd5\x12\x58\x8a\x8d\x92\xe2\xdc\x56\x3c\xf3\xef\xe0\x09\x14\x1f\xb3\x5f\x46\x9f\x7f\x57\x25\x02\x22\x4c\x33\xea\xde\x09\x1e\xa2\x02\xbf\xe5\xcf\xdf\xfb\x33\x17\x66\x8f\xd5\xe5\xf6\xbc\x5e\x75\x97\x29\x51\xf4\x3e\x7d\xdb\x6c\x0f\x84\x0d\xd1\x7c\x4d\x90\x24\xe5\x33\xf2\xd4\x95\xeb\x2f\x68\x0c\x16\x94\x42\xef\xe8\xe9\xe1\xb2\x63\xf1\x50\xfc\x1b\x00\x00\xff\xff\x6e\xe9\x6b\x3a\x9c\x08\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2204, mode: os.FileMode(420), modTime: time.Unix(1487176759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

