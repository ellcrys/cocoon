// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487160186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4f\x6f\xe2\x3e\x10\xbd\xf7\x53\x58\xd6\x4f\xea\xa5\x40\xf9\xad\x7a\x41\xda\x03\x9b\x74\x2b\x56\xfc\x89\x0a\x9c\x56\xa8\x9a\x3a\xd3\x60\xe1\xd8\x91\x6d\xd8\xb2\x51\xbe\xfb\xca\x4e\x28\xf9\x03\x6d\x2f\x35\xf3\xde\x78\xde\xbc\x8c\x27\xbf\x21\x84\xfe\x52\xaf\x74\x44\xdc\x91\x10\xfa\x8c\x09\x57\x92\x8e\x08\x4d\x84\x7a\x05\x41\xef\xca\xf8\x24\x74\x31\xa6\x98\x52\xb2\x97\xe7\x93\xb0\x28\x4e\xd0\x1c\x52\xbc\x0a\xae\x8e\x99\x07\x0d\xea\x03\x67\x78\x0a\x47\x9a\x2b\xcd\xed\x91\x8e\xc8\xc3\x7d\x15\x1b\x0b\x31\xb6\x0b\xc9\x1c\xff\x0d\x84\xc1\x2a\x1e\x82\x05\x86\xd2\xa2\x36\x74\x44\x7e\xfb\x20\x21\x34\x66\x43\xea\xcf\x9b\x8a\x17\x28\x69\xac\x06\x2e\x6d\x9d\x97\x57\xff\x09\xa1\xd3\x15\xe8\x04\xad\x93\xf3\x5f\x0e\xd6\xea\xfe\x0e\xb5\x44\xd1\x97\x90\xe2\x49\x71\xe9\xc2\x99\x29\xb8\xdc\xbf\xd7\xb1\x45\x86\x1a\x64\xec\xb0\xef\xb4\x0a\x17\x0d\x21\x2b\x30\xbb\x27\xad\xf6\xd9\x15\x1d\x9f\x19\x56\x75\xb2\x97\xae\x78\x9e\xfb\x53\x51\x34\xb0\x7a\x97\x72\x2f\x44\x0d\x74\x95\xeb\x45\x9b\x85\x2f\x15\xb7\x60\x76\x5d\x05\xa5\xef\x9a\x1f\x50\x3b\x6e\xac\xd8\x0e\x75\x1b\x0f\x94\x7c\xe3\xc9\xc7\xe8\xd4\x10\x9e\x42\xe2\x8b\xe4\xf9\xc4\x1d\x3b\x77\x13\x57\x3f\x4d\x2b\x1b\x5f\xc1\x6c\xbb\x04\xd0\x89\x6f\x85\xf6\x18\xbd\x23\xf4\x56\x18\x32\x10\x8a\x81\x18\xc4\x78\xe8\xc5\x98\x09\x75\xec\x31\x25\x25\x32\xab\x74\xdf\x6c\x6f\xe9\xa6\x71\x47\xd1\xd2\xfb\x28\x0f\x97\xc4\x06\x8b\x60\xb1\x98\xbf\x5c\x1f\xf0\x2e\x37\x58\x84\x8f\x2f\xeb\xe7\x69\xd9\x62\xe0\x73\x02\x15\xe3\xfa\x79\xfa\x55\xd6\x6a\xfc\xd4\xce\x5a\x41\xf2\x55\xd6\x74\x3c\xef\xa4\x4d\x41\xba\xbc\x4f\x5b\x5e\x96\xaf\xce\xfb\xb8\x69\x61\x33\xb4\xe0\xfc\x68\xe7\x4c\x55\x72\xfd\xcb\xce\xe0\xfd\x27\x17\xfe\xc2\xe1\x7d\x47\x72\x85\x2e\xf9\x5f\x9c\xfd\xf0\x94\x4f\xd5\xad\x30\xcd\x04\xd8\xcb\xf2\xc6\xda\xf2\x37\x60\xe5\x5b\x6e\xeb\x20\x84\x3e\xa1\xb5\xa8\x97\x6a\xaf\xfd\xc2\xa0\x5b\x6b\x33\x33\x1a\x0c\x8c\x55\x1a\x12\xec\x27\x4a\x25\x02\x21\xe3\xa6\xcf\x54\x3a\xd8\x69\x95\x80\xbc\x36\x3a\x1d\xf7\xfd\x26\x14\x60\xf9\x01\x43\x34\x7e\x11\x94\xc3\xd7\xf2\xbb\xad\x3a\xe4\x26\x03\xcb\xb6\x11\x1c\x85\x82\xd8\xfb\x5b\x63\x9c\xcf\x9b\xfa\xb6\x41\xe3\xdb\x30\x2d\xc7\x69\x10\xad\xcb\x2d\x10\xad\x8b\x86\x79\x74\x86\xa9\xd2\x47\x6f\x72\x9e\x9f\x7e\xb4\x38\x21\x37\xbb\x8a\x51\x1e\x5b\xf8\x64\x11\x2d\xe9\x88\x34\x3e\x23\x9d\xa3\xfd\xa3\x74\xb9\x44\xce\xcf\xa9\x68\xaa\xb5\xa0\x6d\xa4\x04\x67\xc7\xb6\xe2\x89\x5b\xd3\x07\x10\x74\x44\xbe\xdd\x9f\xff\x1a\x25\xc6\xd6\x62\x9a\xd9\xee\x0c\xd1\x10\x05\xb8\x2b\xff\x7f\xb8\x9c\x39\x53\xb1\xff\xd6\xb1\xe7\x5d\x54\xf7\x31\xd5\x17\x37\xf3\x3a\x8b\xc1\x62\x4d\x34\x5d\x5a\x48\x12\xbf\xe5\x86\x5d\xb9\x6e\xa0\x23\xd0\x20\x04\xba\x8e\x86\x37\xa7\x1b\x8b\x9b\xe2\x5f\x00\x00\x00\xff\xff\x31\x2b\x5b\x7a\x3b\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1851, mode: os.FileMode(420), modTime: time.Unix(1487160181, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

