// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487093217, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x8f\xe2\x38\x10\xbd\xf7\xaf\xb0\xac\x3d\x4e\x93\xee\x5d\xcd\x05\x69\x0f\x6c\x32\xdb\x62\x05\x0d\x6a\xe0\xb4\x42\xa3\xc2\xa9\x0e\x16\x8e\x1d\xd9\x05\x33\x6c\x94\xff\xbe\xb2\x13\x86\x7c\x40\x37\x17\x2a\xf5\x5e\xb9\x5e\x95\xcb\x55\x3e\x30\xc6\xff\x31\x3b\x3e\x66\xde\x64\x8c\xbf\x61\x26\x8d\xe6\x63\xc6\x33\x65\x76\xa0\xf8\x97\xda\x3f\x4d\xbc\x4f\x18\x61\x8c\x7e\x2c\xcb\x69\x52\x55\x17\xe8\x15\x72\xbc\x0b\xae\xcf\x45\x00\x1d\xda\x93\x14\x78\x71\x2f\xad\x34\x56\xd2\x99\x8f\xd9\xd7\xa7\xc6\x37\x51\x6a\x42\x0b\x2d\x3c\xff\x1d\x94\xc3\xc6\x9f\x00\x81\x40\x4d\x68\x1d\x1f\xb3\x7f\x83\x93\x31\x9e\x8a\x67\x1e\xec\x6d\xc3\x8b\x8d\x76\x64\x41\x6a\x6a\xf3\xca\xe6\x9f\x31\x3e\x5b\x83\xcd\x90\xbc\x9c\xdf\x4a\x20\xb2\xa3\x03\x5a\x8d\x6a\xa4\x21\xc7\x8b\xe2\xba\x0b\x57\xa6\x92\xfa\xf8\xb3\x8d\x2d\x0a\xb4\xa0\x53\x8f\xfd\xc9\x1b\x77\xd5\x11\xb2\x06\x77\x78\xb1\xe6\x58\xdc\xd1\xf1\x51\xc3\x9a\x4a\x8e\xda\x27\x2f\xcb\x60\x55\x55\x07\x6b\x57\xa9\x8f\x4a\xb5\x40\x9f\xb9\x9d\xb4\x9b\xf8\x56\x72\x02\x77\x18\x2a\xa8\xfb\x6e\xe5\x09\xad\xe7\xa6\x46\x1c\xd0\xf6\xf1\xd8\xe8\x77\x99\xfd\x1a\x9d\x16\x22\x73\xc8\x42\x92\xb2\x9c\x7a\x73\x70\x36\xf3\xf9\xf3\xbc\x69\xe3\x0e\xdc\x7e\x48\x00\x9b\x85\x52\xf8\xa3\xe0\x5f\x18\x57\x8e\x45\xca\x08\x50\x7c\xdb\x61\x56\x3d\x55\xdf\xf4\xe9\x96\xa4\x78\x11\x2f\x16\xaf\xdf\xef\x8f\xf1\x90\x1b\x2f\x92\x6f\xdf\x37\x6f\xb3\xba\x90\x38\xc4\xc4\x26\xc5\xcd\xdb\xec\xb3\xa8\xf5\xe4\xa5\x1f\xb5\x86\xec\xb3\xa8\xd9\xe4\x75\x10\x36\x03\xed\xe3\x3e\x2c\x79\x55\xbf\xad\xd0\xad\x6d\x0f\x9b\x23\x81\xef\x47\x3f\x66\x66\xb2\xfb\xf7\x37\x87\x9f\x7f\x4b\x15\x0e\x7c\x7e\x1a\x48\x6e\xd0\x95\xfc\x0f\xe7\x7f\x05\xca\x87\xea\xd6\x98\x17\x0a\xe8\xb6\xbc\x89\x25\xf9\x0e\xa2\x7e\xb1\x7d\x1d\x8c\xf1\x17\x24\x42\xbb\x32\x47\x1b\xd6\x02\xdf\x13\x15\x6e\x1c\x45\x16\x7e\x8c\x32\x49\xfb\xe3\xee\xe8\xd0\x0a\xa3\x09\x35\x8d\x84\xc9\x23\x2d\x4c\x8a\x2e\xaa\xaf\x38\xca\xc1\x11\xda\xc8\x09\x2b\x0b\x72\x51\x8a\xa7\xc7\x14\x0b\x65\xce\x8f\xc2\x68\x8d\x82\x8c\x1d\xdd\x18\xbe\xb0\x08\x15\x90\x3c\x61\x82\x2e\xec\x81\x66\xf8\xba\xa5\xf6\xcb\x49\xa4\x2b\x80\xc4\x7e\x09\x67\x65\x20\x0d\x8d\x6f\x31\xae\xf6\xb6\xbd\x6c\xd0\x85\xfa\x5c\xef\x2a\x78\xbc\xdc\xd4\x4b\x60\xb9\xa9\x3a\x5d\xe5\x73\xcc\x8d\x3d\x87\xee\x97\xe5\xe5\xa3\xc7\x49\xa4\x3b\x34\x8c\xda\xec\xe1\xd3\xc5\x72\xc5\xc7\xac\x73\xbf\xfc\x15\xe9\x87\xb1\xf5\x0e\xb9\xbe\xb3\xaa\xab\x96\xc0\xd2\xd2\x28\x29\xce\x7d\xc5\x53\xbf\xa5\x4f\xa0\xf8\x98\xfd\xf1\x74\xfd\x75\x52\x4c\x88\x30\x2f\x68\x38\x5c\x3c\x41\x05\xfe\xc8\xdf\xbf\xde\x8e\x9c\x9b\x34\x0c\x41\x1a\x78\x37\xd5\xfd\x1a\xf7\x9b\x8b\x79\x53\xa4\x40\xd8\x12\xcd\x57\x04\x59\x16\x96\xdc\xf3\x50\xae\x9f\xf4\x25\x58\x50\x0a\x7d\x45\xcf\x0f\x97\x13\xab\x87\xea\xff\x00\x00\x00\xff\xff\x3c\xf2\xf1\x4e\x3a\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1850, mode: os.FileMode(420), modTime: time.Unix(1487093194, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

