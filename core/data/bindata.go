// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1488735358, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4b\x8f\xa3\x38\x10\xbe\xf7\xaf\xb0\xac\x39\xee\x24\xdd\x3b\x3b\x97\x48\x7b\xa0\x43\xb6\x95\x55\x1e\x28\x8f\xc3\x6a\x15\x21\xc7\xb8\x69\x2b\xc6\x46\x76\x91\x99\x2c\xe2\xbf\xaf\x6c\x48\x37\x60\x92\x1e\x2e\x71\xaa\xbe\x7a\xf8\xab\x07\x94\x0f\x08\xe1\xbf\xd5\x11\x4f\x90\x3d\x22\x84\x37\x2c\xe5\x4a\xe2\x09\xc2\xa9\x50\x47\x22\xf0\x6f\xb5\x7c\x1e\x5a\x59\x59\xce\xc3\xaa\xba\xca\x56\x24\x63\xbe\x74\x77\xc9\x9d\xd4\x30\x7d\xe6\x94\x5d\xc5\x91\xe6\x4a\x73\xb8\xe0\x09\xfa\xfe\xd8\xc8\x02\x21\x02\x58\x4b\x6a\xf1\xaf\x44\x18\xd6\xc8\x43\x02\x84\x32\x09\x4c\x1b\x3c\x41\xff\x3a\x21\x42\x38\xa1\x4f\xd8\x9d\x0f\x0d\x6e\xaa\xa4\x01\x4d\xb8\x84\x36\xae\x6c\x7e\x11\xc2\x8b\x1d\xd1\x29\x03\x9b\xce\x97\x92\x00\xe8\xd1\x89\x69\xc9\xc4\x48\x92\x8c\x5d\x33\xae\xef\xfd\x81\x14\x5c\x16\x3f\xdb\xba\x75\xce\x34\x91\x89\xd5\xfd\x89\x1b\x71\xd5\x49\x64\x47\xcc\xe9\x45\xab\x22\xbf\x91\xc7\x20\x53\xcd\x15\x0a\x69\xa3\x96\xa5\x3b\x55\x55\x47\xd7\xbe\x9e\x2c\x84\x68\x29\x6d\xc8\x76\xb4\x6e\xc4\x4e\x54\x20\xe6\xf4\xd5\x0b\x5d\x33\xad\xf9\x99\x69\x0b\x4a\x14\x3d\x31\xdd\xd7\x4f\x95\x7c\xe5\xe9\x7b\x7b\xb4\x34\x3c\x23\xe9\xf5\x4e\xf6\xe8\xf9\x46\x08\xbf\x2a\x4d\x59\x9c\x17\x42\xe0\x09\x02\x5d\x30\x0f\x41\x55\x96\x35\xd4\x1e\x89\x79\xf3\x5d\x48\x06\x3f\x94\x3e\xc5\x99\x4a\x5c\xb4\x37\x65\xc0\x47\x11\x9d\x3a\x2e\xf0\x97\x72\xb5\x5e\x06\x61\xbc\x9c\xed\x82\x78\x3b\xdd\xcc\xa3\xdd\x36\x0e\xe7\x9b\x6a\xdc\xd1\x84\xb3\x68\xb1\xfe\xa7\x01\xc4\xab\x60\x39\xab\xf0\xc1\xf3\x9a\x6b\x7e\xe6\x82\xa5\x2c\xb9\x95\x7e\xae\x34\xc4\x19\xc9\x6d\xec\x43\x47\x59\xf5\x88\x9c\xc9\xf3\x10\x8b\xd3\xf5\x74\xbd\x5e\xc5\x03\xd3\xe5\x83\xa6\xeb\x70\x16\xef\x37\x8b\x1a\x3a\x55\x54\x29\x39\x55\x09\xdb\x6f\x16\x9f\x59\xed\x82\x97\xbe\xd5\x8e\xa4\x9f\x59\x2d\x82\x95\x67\xb6\x20\xf2\x9e\xdd\xf3\x7e\xbe\x08\xe3\x28\xd8\x04\xcb\x6d\xdb\xf4\xb9\xe0\x22\x89\x88\x26\x99\xa9\x2a\x7c\x97\xa9\x6d\xbd\x37\x5c\x3d\x3d\xbe\x6e\x0e\x52\xa3\xdf\x91\xa6\x11\x1a\x80\x5f\xd4\x48\x69\x58\x90\x23\xb3\x2d\x89\xa9\x92\x92\x51\x50\x1a\x23\x84\xba\x59\xf5\x2c\xf1\x92\x01\x19\xaa\xa0\xdf\x4a\xd6\xb1\x2e\xe4\xd7\x77\xe7\xa3\xa1\xc6\x6e\x35\xa7\x35\x18\x0b\x45\x89\x18\x1b\xaa\x79\x0e\xe6\x3e\x43\x0b\x95\xde\x9e\xcb\x25\xf9\xf9\x17\x17\x8e\xbe\xa7\x47\x2f\x6a\xa3\xdd\xf2\xff\xd8\xf2\xd9\x41\xee\x46\xda\xb1\x2c\x17\x04\xea\x62\xf4\x19\x09\x34\xf0\x57\x42\x61\xb0\x52\x08\xe1\x17\x06\xc0\xf4\x56\x15\x9a\xd6\xa3\x0b\x90\x9b\xc9\x78\xac\xc9\x8f\x51\xca\xe1\xad\x38\x16\x86\x69\xaa\x24\x30\x09\x23\xaa\xb2\xb1\xa4\x2a\x61\x66\x4c\x5d\xcb\x8c\x33\x62\x80\xe9\x2b\x25\x9f\x0f\x70\xff\xb2\xee\x6d\x26\x08\xf0\x33\x0b\x99\x81\x4f\x59\xee\xdf\x6f\xc3\x8c\xcb\xdd\x0c\x0e\x6e\xb4\xaf\xb7\x76\xb4\xaf\x2a\x9f\x66\x96\x29\x7d\x71\x0c\x97\xe5\xf5\xcf\x00\x6e\xbe\x8e\xec\x98\xf8\x75\x5a\xd5\x6b\xaf\xbf\xe0\xeb\xc7\xe7\xda\x86\x7c\xe6\xae\x12\x65\xe9\x4e\x7e\x30\x87\x0a\x2f\x92\x64\x9c\xda\x21\x30\x78\xe2\xbb\x76\xee\x11\x6e\x06\xa4\x35\x1f\xd5\x00\xf4\xe0\xc9\xfa\xa8\xfb\x3b\x31\xe4\x26\x27\x40\xdf\x22\x72\x11\x8a\xd8\x25\x5b\xb6\x1d\x7c\x9c\x0f\xed\x17\xf5\x8d\xaa\xdc\xae\xc8\xaf\x54\xc3\xe6\x72\x72\x88\x3f\xbe\x75\xaa\x31\x58\xa2\x4e\x79\x3e\xee\x58\x75\xd3\x04\xa2\x21\x52\x82\xd3\x4b\x3f\xd5\xb9\xfd\xb4\x39\x13\xbb\x82\xbe\x3d\x7e\x3c\x9d\x10\x01\x00\xcb\x72\xf0\xe7\x18\x87\x4c\x10\xeb\xf2\xf7\xef\xc3\x96\xcb\xe6\x55\x99\x38\xdc\x60\x76\xd7\x65\x56\x0d\x7e\xcd\xec\xf3\x84\x00\x6b\x25\x8d\xb7\x40\xd2\xd4\x7d\x27\x3c\xf9\xe9\xda\xa5\x62\x57\xbb\x10\x6e\xa9\x3e\x3d\x5c\x3d\x56\x0f\xd5\xff\x01\x00\x00\xff\xff\xb7\x3c\x6e\x7f\x61\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2657, mode: os.FileMode(420), modTime: time.Unix(1488735334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

