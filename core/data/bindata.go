// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487160773, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x5d\x6f\xe2\x3a\x10\x7d\xef\xaf\xb0\xac\xfb\x78\x0b\xe5\x5e\xf5\x05\x69\x1f\xd8\xa4\x5b\xb1\xe2\x4b\x05\x9e\x56\xa8\x9a\x26\x43\xb0\x70\xec\xc8\x1e\xd8\xb2\x51\xfe\xfb\xca\x4e\x28\xf9\x80\x96\x17\x26\x73\x66\x3c\x67\x8e\xc7\x93\xdf\x31\xc6\x7f\xea\x37\x3e\x64\xce\x64\x8c\xbf\x60\x22\xb4\xe2\x43\xc6\x13\xa9\xdf\x40\xf2\x7f\x4b\xff\x38\x74\xbe\x48\x47\x5a\xab\xfb\x3c\x1f\x87\x45\x71\x86\x66\x90\xe2\x4d\x70\x75\xca\x3c\x68\xd1\x1c\x45\x84\x67\xf7\xc2\x08\x6d\x04\x9d\xf8\x90\x3d\x3e\x54\xbe\x91\x94\x23\x9a\xab\xc8\xc5\x6f\x41\x5a\xac\xfc\x21\x10\x44\xa8\x08\x8d\xe5\x43\xf6\xcb\x3b\x19\xe3\x71\x34\xe0\xde\xde\x54\x71\x81\x56\x96\x0c\x08\x45\xf5\xb8\xbc\xfa\x67\x8c\x4f\x56\x60\x12\x24\x47\xe7\x9f\x1c\x88\x4c\x6f\x8f\x46\xa1\xec\x29\x48\xf1\xcc\xb8\x54\xe1\x12\x29\x85\x3a\xbc\xd7\xb1\x79\x86\x06\x54\xec\xb0\x6f\xbc\x72\x17\x0d\x22\x2b\xb0\xfb\x67\xa3\x0f\xd9\x0d\x1e\x9f\x09\x56\x75\x72\x50\xae\x78\x9e\x7b\xab\x28\x1a\x58\xbd\x4b\x75\x90\xb2\x06\xba\xca\xf5\xa2\xcd\xc2\xd7\x8a\x13\xd8\x7d\x97\x41\xa9\xbb\x11\x47\x34\x2e\x36\xd6\xd1\x1e\x4d\x1b\x0f\xb4\xda\x8a\xe4\x63\x74\x6a\x88\x48\x21\xf1\x45\xf2\x7c\xec\xcc\xce\xd9\xcc\xd5\x4f\xd3\x4a\x46\x69\xbb\x30\x98\xc4\x37\xc2\xfb\x3b\x9d\x22\xdf\x34\xf0\xa2\xc5\xe4\x49\x1d\xaf\xd1\x08\xe6\xc1\x7c\x3e\x7b\xbd\x3d\xba\xdd\xd8\x60\x1e\x3e\xbd\xae\x5f\x26\x25\xf9\xc0\xe7\x04\x3a\xc6\xf5\xcb\xe4\xab\xac\xd5\xe8\xb9\x9d\xb5\x82\xe4\xab\xac\xc9\x68\xd6\x49\x9b\x80\x72\x79\x9f\xb6\xbc\x2c\xdf\x93\xd7\x68\xd3\xc2\xa6\x48\xe0\xf4\x68\xe7\x4c\x74\x72\xfb\xce\xa6\xf0\xfe\x43\x48\x7f\xe0\xe0\xa1\x43\xb9\x42\x97\xe2\x0f\x4e\xbf\xfb\x90\x4f\xd9\xad\x30\xcd\x24\xd0\x75\x7a\x23\x43\x62\x0b\x51\xf9\x4a\xdb\x3c\x18\xe3\xcf\x48\x84\x66\xa9\x0f\xc6\xaf\x02\xbe\x23\xca\xec\xb0\xdf\xb7\xa4\x0d\x24\xd8\x4b\xb4\x4e\x24\x42\x26\x6c\x2f\xd2\x69\x7f\x6f\x74\x02\xaa\x1f\xe3\xf1\x3e\xc6\x4c\xea\xd3\x7d\xa4\x95\xc2\x88\xb4\xe9\xd9\x5d\x47\x7d\xbf\xe3\x24\x90\x38\x62\x88\xd6\x3f\x71\x3f\x62\x7d\x4b\x87\xed\xd6\x65\x34\x3b\x6b\xb3\x0f\x85\xcd\x80\xa2\xdd\x02\x4e\x52\x43\xec\x75\xae\x45\x5c\xec\x4d\x7d\x9f\xa0\xf5\xed\xd8\x96\xf2\x3c\x58\xac\xcb\x77\xbe\x58\x17\x0d\x11\xf9\x14\x53\x6d\x4e\x5e\xec\x3c\x3f\x7f\xb4\x62\x42\x61\xf7\x55\x44\x69\xb6\xf0\xf1\x7c\xb1\xe4\x43\xd6\xb8\x4e\x3e\x43\xfa\xad\x4d\xb9\x26\x2e\xcf\xaa\x68\xb2\x25\x30\xb4\xd0\x52\x44\xa7\x36\xe3\xb1\x5b\xc4\x47\x90\x7c\xc8\xfe\x7f\xb8\xfc\x1a\x25\x46\x44\x98\x66\xd4\x9d\x25\x1e\xa2\x04\x77\xe4\x7f\x8f\xd7\x33\xa7\x3a\xf6\x77\x1e\xfb\xb8\xab\xec\x3e\xa6\xfb\xea\xee\x5d\x67\x31\x10\xd6\x48\xf3\x25\x41\x92\xf8\x3d\x36\xe8\xd2\x75\x83\xbd\x00\x03\x52\xa2\xeb\x68\x70\x77\x3e\xb1\xb8\x2b\xfe\x06\x00\x00\xff\xff\xb6\x20\xb9\xee\x1d\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1821, mode: os.FileMode(420), modTime: time.Unix(1487160762, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

