// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487161300, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x5d\x6f\xeb\x36\x0c\x7d\xef\xaf\x10\x84\x3d\xae\x71\xb3\xe1\xbe\x04\xd8\x43\x66\xdf\x15\x19\xf2\x85\x26\x79\x1a\x8a\x0b\xd6\x66\x14\x21\xb2\x64\x48\x4c\x76\x33\xc3\xff\x7d\x90\xec\xb4\xfe\x48\xda\xbc\x44\xe6\x39\x24\x0f\x29\x8a\xe5\x03\x63\xfc\x6f\xf3\xc6\x27\xcc\x1f\x19\xe3\x2f\x28\xa4\xd1\x7c\xc2\xb8\x50\xe6\x0d\x14\xff\xb5\xb6\xcf\x12\x6f\x4b\x4d\x6a\x8c\x7e\x2c\xcb\x59\x52\x55\x57\x68\x09\x39\xde\x05\xb7\x97\x22\x80\x0e\xed\x59\xa6\x78\x35\xaf\xad\x34\x56\xd2\x85\x4f\xd8\xb7\xa7\xc6\x36\x55\x6a\x4a\x2b\x9d\x7a\xfe\x1e\x94\xc3\xc6\x9e\x00\x41\x8a\x9a\xd0\x3a\x3e\x61\xff\x04\x23\x63\x3c\x4b\xc7\x3c\x9c\x5f\x1b\x5e\x6c\xb4\x23\x0b\x52\x53\x9b\x57\x36\xff\x8c\xf1\xf9\x16\xac\x40\xf2\x72\x7e\x29\x81\xc8\x8e\x8e\x68\x35\xaa\x91\x86\x1c\xaf\x8a\xeb\x2e\x7c\x30\x95\xd4\xa7\x9f\x6d\x6c\x55\xa0\x05\x9d\x79\xec\x0f\xde\x98\xab\x8e\x90\x2d\xb8\xe3\xb3\x35\xa7\xe2\x8e\x8e\xcf\x1a\xd6\x54\x72\xd2\x3e\x79\x59\x86\x53\x55\x75\xb0\x76\x95\xfa\xa4\x54\x0b\xf4\x99\xdb\x49\xbb\x89\x6f\x25\x27\x70\xc7\xa1\x82\xba\xef\x56\x9e\xd1\x7a\x6e\x66\xd2\x23\xda\x3e\x1e\x1b\xbd\x97\xe2\x7d\x74\x5a\x88\xcc\x41\x84\x24\x65\x39\xf3\xc7\x41\x6c\xe6\xf3\xe7\x79\xd3\x46\xe5\x86\x30\x58\x11\x0a\x79\xed\x00\x55\x4f\xc2\x77\x7d\xbe\x95\x3f\x5e\xc5\xab\xd5\xf2\xc7\xfd\x99\x1d\x72\xe3\x55\xf2\xfd\xc7\xee\x65\x5e\xab\x8e\x83\x4f\x6c\x32\xdc\xbd\xcc\xbf\xf2\xda\x4e\x9f\xfb\x5e\x5b\x10\x5f\x79\xcd\xa7\xcb\x81\xdb\x1c\xb4\xf7\xfb\xb4\xe4\x4d\xfd\x90\xea\xe6\xf4\xb0\x05\x12\xf8\x7e\xf4\x7d\xe6\x46\xdc\xbf\xac\x05\xfc\xfc\x4b\xaa\x10\x70\xfc\x34\x90\xdc\xa0\x1b\xf9\x1f\x2e\xfe\x0c\x94\x4f\xd5\x6d\x31\x2f\x14\xd0\x6d\x79\x53\x4b\x72\x0f\x69\xfd\x3c\xfb\x3a\x18\xe3\xcf\x48\x84\x76\x63\x4e\x36\xec\x00\x7e\x20\x2a\xdc\x24\x8a\x1c\x19\x0b\x02\x47\xc2\x18\xa1\x10\x0a\xe9\x46\xa9\xc9\xa3\xa3\x35\x02\x74\x94\xe1\xf9\x31\xc3\x42\x99\xcb\x63\x6a\xb4\xc6\x94\x8c\x1d\xb9\xc3\xa0\xfb\x61\xb9\x29\x20\x79\xc6\x04\x5d\x78\xdb\x91\x30\x91\xb3\x69\x24\x24\x1d\x4e\x6f\x21\xa8\x4e\x4d\x86\x2e\x72\x74\xda\xef\x7d\x94\x6e\xb5\xfd\x8a\x12\xe9\x0a\xa0\xf4\xb0\x86\x8b\x32\x90\x85\xde\xb7\x18\x1f\xe7\xd7\xf6\x72\x41\x17\x4a\x74\xbd\xdb\xe0\xf1\x7a\x57\x3f\xfa\xf5\xae\xea\x34\x96\x2f\x30\x37\xf6\x12\x2e\xa0\x2c\xaf\x1f\x3d\x4e\x22\xdd\xb1\x61\xd4\xc7\x1e\x3e\x5b\xad\x37\x7c\xc2\x3a\x57\xcc\x97\x48\xff\x1a\x7b\xec\x3d\xb5\xaa\xab\x96\xc0\xd2\xda\x28\x99\x5e\xfa\x8a\x67\x7e\x2b\x9f\x41\xf1\x09\xfb\xfd\xe9\xe3\xd7\x49\x31\x25\xc2\xbc\xa0\xe1\x7c\xf1\x04\x15\xf8\x90\xbf\x7d\xbb\xed\xb9\x30\x59\x98\x83\x2c\xf0\x6e\xaa\x7b\x9f\xf8\x9b\x8b\x78\x57\x64\x40\xd8\x12\xcd\x37\x04\x42\x84\xa5\x36\x1e\xca\xf5\xc3\xbe\x06\x0b\x4a\xa1\xaf\x68\xfc\x70\x8d\x58\x3d\x54\xff\x07\x00\x00\xff\xff\x92\xf6\xed\xad\x2a\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1834, mode: os.FileMode(420), modTime: time.Unix(1487161293, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

