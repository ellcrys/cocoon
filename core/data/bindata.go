// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487942630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x4d\x6f\xe3\x36\x13\xbe\xe7\x57\x10\xc4\x1e\xdf\xc4\xce\xbe\xd8\x8b\x81\x1e\xb4\x96\x37\x70\x21\xdb\x82\xed\xa0\x28\x8a\xc0\x98\xd0\x8c\x42\x98\x22\x05\x72\xe4\xac\x2b\xe8\xbf\x17\x94\xe4\x44\x12\x65\xa7\x45\x81\xe6\x12\x7a\xe6\x99\xaf\x67\x46\x43\x16\x37\x84\xd0\x5f\xf5\x33\x9d\x10\x77\x24\x84\xae\x79\x22\xb4\xa2\x13\x42\x13\xa9\x9f\x41\xd2\xff\xd5\xf2\x79\xe8\x64\x45\x31\x0f\xcb\xf2\x2c\x5b\x42\xca\x7d\xe9\xf6\x94\x55\x52\xcb\xcd\x51\x30\x7e\x16\xc7\x46\x68\x23\xf0\x44\x27\xe4\xdb\xb8\x91\x05\x52\x06\xb8\x52\xcc\xe1\x5f\x40\x5a\xde\xc8\x43\x40\x60\x5c\x21\x37\x96\x4e\xc8\x1f\x95\x90\x10\xba\x67\xf7\xb4\x3a\x3f\x35\xb8\xa9\x56\x16\x0d\x08\x85\x6d\x5c\xd1\xfc\x27\x84\x46\x5b\x30\x09\x47\x97\xce\x97\x02\x10\xcd\xdd\x81\x1b\xc5\xe5\x9d\x82\x94\x9f\x33\xae\xeb\xfe\x40\x4a\xa1\xf2\x9f\x6d\xdd\x2a\xe3\x06\xd4\xde\xe9\x7e\xa1\x8d\xb8\xec\x24\xb2\x05\x7b\x78\x30\x3a\xcf\x2e\xe4\x31\xc8\x54\x53\x42\xae\x5c\xd4\xa2\xa8\x4e\x65\xd9\xd1\xb5\xcb\x53\xb9\x94\x2d\xa5\x0b\xd9\x8e\xd6\x8d\xd8\x89\x8a\x60\x0f\xb7\x5e\xe8\x9a\x69\x23\x8e\xdc\x38\xd0\x5e\xb3\x03\x37\x7d\xfd\x54\xab\x17\x91\xbc\x8f\x47\x4b\x23\x52\x48\xce\x35\xb9\xa3\xe7\x9b\x10\xfa\xa2\x0d\xe3\xbb\x2c\x97\x92\x4e\x08\x9a\x9c\x7b\x08\xa6\xd3\xb4\xa1\xf6\x19\xec\xab\xef\x42\x71\x7c\xd3\xe6\xb0\x4b\xf5\xbe\x8a\xf6\xaa\x2d\xfa\x28\x30\x49\xc5\x05\xfd\x52\x2c\x57\x8b\x20\xdc\x2d\x66\xdb\x60\xb7\x99\xae\xe7\xf1\x76\xb3\x0b\xe7\xeb\x72\xd4\xd1\x84\xb3\x38\x5a\xfd\xde\x00\x76\xcb\x60\x31\x2b\xe9\x93\xe7\x35\x33\xe2\x28\x24\x4f\xf8\xfe\x52\xfa\x99\x36\xb8\x4b\x21\x73\xb1\xfb\x0c\x55\xd5\x29\xc5\x19\x6a\x73\xfb\x8a\xe8\x40\xff\x1f\x8f\xc7\x3d\x58\xf9\xd4\x11\x94\xbd\x06\xcc\xd4\x71\x88\xfd\xe9\x6a\xba\x5a\x2d\x77\x03\x5f\xa5\x0f\x9a\xae\xc2\xd9\xee\x71\x1d\xd5\xd0\xa9\x66\x5a\xab\xa9\xde\xf3\xc7\x75\xf4\x99\xd5\x36\x78\xe8\x5b\x6d\x21\xf9\xcc\x2a\x0a\x96\x9e\x59\x04\xca\xd9\x5d\xad\x75\x53\x6f\x0c\x3b\xc4\xe6\xfb\x30\xb3\xca\xa5\xf5\x33\xd8\x42\x33\x03\x0d\x1d\x7e\x3f\x63\x6d\x30\x82\x67\x2e\x6b\x3f\x9d\xde\x10\x42\xba\xb9\xf5\xcc\xe9\x82\x23\x0c\x75\xc2\x1f\x25\xe7\xdd\xe4\xea\xf6\x3d\xc2\xdd\xd0\x60\x37\x84\xfd\x98\xaf\x67\xbf\x05\x51\xd4\x77\x50\x97\x79\xfb\xf2\x36\x68\xdc\x9a\x6c\x07\x1e\x49\xcd\x40\x8e\x2c\x33\x22\x43\x7b\x9d\xe4\x48\x27\x97\x3f\xea\x05\xfc\xfc\x21\x64\xd5\x81\xfb\xb1\x17\xb5\xd1\x6e\xc4\x9f\x7c\xf1\xbd\x82\x5c\x8d\xb4\xe5\x69\x26\x01\xeb\x7e\xf6\xe9\x0c\x0c\x8a\x17\x60\x38\xd8\x6c\x42\xe8\x03\x47\xe4\x66\xa3\x73\xc3\xea\xef\x1e\x31\xb3\x93\xd1\xc8\xc0\xdb\x5d\x22\xf0\x35\x7f\xce\x2d\x37\x4c\x2b\xe4\x0a\xef\x98\x4e\x47\x8a\xe9\x3d\xb7\xa3\x9a\xb8\x51\x0a\x16\xb9\x39\x53\xf2\xf9\xd7\xdf\x2f\xb6\xba\x0a\x25\xa0\x38\xf2\x90\x5b\xfc\x87\x2c\xff\xc7\x05\x5d\x99\xa5\x7f\x5f\x59\xbf\x73\x6b\x6e\xab\x22\xec\xe0\x5e\x8a\x1f\xeb\xcb\x2c\x7e\x2c\x4b\x7f\x80\x78\xaa\xcd\xa9\x9a\x9d\xa2\x38\xff\x18\xc0\xcd\x57\xf1\x86\x4e\x88\x3f\x81\xcb\xfa\x36\xe8\xdf\x7b\x97\x48\x77\x21\xbf\x8b\x6a\xc6\xbe\x8e\x3d\x6f\x95\x3e\x3c\x29\x48\x05\x73\xab\xc1\xd2\x89\xef\xb4\x72\x4c\x68\xb3\x36\xfa\x5b\xa3\x1c\xc0\x3f\x79\xb2\x3e\xea\xfa\xc6\x0f\x85\xcd\x00\xd9\x6b\x0c\x27\xa9\xc1\x5d\x3d\x45\xdb\xc1\xc7\xf9\xa9\xfd\x7c\xb9\xd0\x94\xcb\x0d\xf9\x3b\xcd\x70\xb9\x1c\x1a\x44\x7d\xec\xe9\x87\x1a\xd5\x69\xd2\x47\xa9\x65\x37\x5b\x04\x83\xb1\x96\x82\x9d\xfa\x19\xcf\xdd\xbb\xef\x08\xb2\xb9\x2e\xcf\x7f\x9d\x10\x01\x22\x4f\x33\xf4\xf7\x14\x0d\xb9\x04\xe7\xf2\xeb\xb7\x61\xcb\x45\xf3\x8e\xd8\x57\xb8\xc1\xec\xce\x9b\xbe\x1c\x7c\xea\x3d\x66\x7b\x40\xde\x4a\x9a\x6e\x10\x92\xa4\x7a\x44\xdd\xfb\xe9\xba\xa5\x19\x83\x01\x29\xab\x6b\xe7\xfe\xe6\xec\xb1\xbc\x29\xff\x0a\x00\x00\xff\xff\x3b\x96\x11\xf8\x7e\x0b\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2942, mode: os.FileMode(420), modTime: time.Unix(1487757368, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

