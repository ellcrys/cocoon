// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487154836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x5d\x6f\xe2\x3a\x10\x7d\xef\xaf\xb0\xac\xfb\x78\x0b\xe5\x5e\xf5\x05\x69\x1f\xd8\xa4\x5b\xb1\xe2\x23\x2a\xf0\xb4\x42\xd5\x34\x99\xa6\x16\x8e\x1d\xd9\x03\x5b\x36\xca\x7f\x5f\xd9\x09\x25\x1f\xd0\xf6\xa5\xc3\x9c\x33\x9e\x33\x27\xf6\x14\x37\x8c\xf1\x9f\xfa\x85\x8f\x99\x0b\x19\xe3\x4f\x98\x0a\xad\xf8\x98\xf1\x54\xea\x17\x90\xfc\xdf\x2a\x3f\x0d\x5d\x2e\xd6\xb1\xd6\xea\xb6\x28\xa6\x61\x59\x9e\xa0\x05\x64\x78\x15\x5c\x1f\x73\x0f\x5a\x34\x07\x11\xe3\x29\x1d\x19\xa1\x8d\xa0\x23\x1f\xb3\xfb\xbb\x3a\x37\x91\x72\x42\x4b\x15\x3b\xfe\x2b\x48\x8b\x75\x3e\x04\x82\x18\x15\xa1\xb1\x7c\xcc\x7e\xf9\x24\x63\x3c\x89\x47\xdc\xc7\xdb\x9a\x17\x68\x65\xc9\x80\x50\xd4\xe4\x15\xf5\x7f\xc6\xf8\x6c\x0d\x26\x45\x72\x72\xfe\x29\x80\xc8\x0c\x76\x68\x14\xca\x81\x82\x0c\x4f\x8a\x2b\x17\xce\x4c\x29\xd4\xfe\xbd\x89\x2d\x73\x34\xa0\x12\x87\x7d\xe3\x75\xba\x6c\x09\x59\x83\xdd\x3d\x1a\xbd\xcf\xaf\xe8\xf8\xcc\xb0\x7a\x92\xbd\x72\xcd\x8b\xc2\x47\x65\xd9\xc2\x9a\x53\xaa\xbd\x94\x0d\xd0\x75\x6e\x36\x6d\x37\xbe\xd4\x9c\xc0\xee\xfa\x0a\x2a\xdf\x8d\x38\xa0\x71\xdc\x44\xc7\x3b\x34\x5d\x3c\xd0\xea\x55\xa4\x1f\x57\xa7\x81\x88\x0c\x52\xdf\xa4\x28\xa6\x2e\xec\x9d\xcd\x5c\xff\x2c\xab\x6d\x94\xb6\x0f\x83\x49\xfd\x20\x7c\xc0\xb7\x2d\xac\xec\xa8\x78\x50\x87\x4b\x12\x82\x65\xb0\x5c\x2e\x9e\xaf\x5f\xdb\x3e\x37\x58\x86\x0f\xcf\x9b\xa7\x59\x25\x3c\xf0\x35\x81\x4e\x70\xf3\x34\xfb\xaa\x6a\x3d\x79\xec\x56\xad\x21\xfd\xaa\x6a\x36\x59\xf4\xca\x66\xa0\x5c\xdd\xa7\x23\xaf\xaa\xb7\xe4\xfd\xd9\x76\xb0\x39\x12\x38\x3f\xba\x35\x33\x9d\x5e\xff\x5e\x73\x78\xff\x21\xa4\x3f\x70\x74\xd7\x93\x5c\xa3\x2b\xf1\x07\xe7\xdf\x3d\xe5\x53\x75\x6b\xcc\x72\x09\x74\x59\xde\xc4\x90\x78\x85\xb8\x7a\xa1\x5d\x1d\x8c\xf1\x47\x24\x42\xb3\xd2\x7b\xe3\xd7\x00\x7f\x23\xca\xed\x78\x38\xb4\xa4\x0d\xa4\x38\x48\xb5\x4e\x25\x42\x2e\xec\x20\xd6\xd9\x70\x67\x74\x0a\x6a\x98\xe0\xe1\x36\xc1\x5c\xea\xe3\x6d\xac\x95\xc2\x98\xb4\x19\xd8\xb7\x9e\xfb\x7e\xbf\x49\x20\x71\xc0\x10\xad\x7f\xde\x43\xa9\x63\x90\x1d\xbf\xbb\xaa\x43\x61\x73\xa0\xf8\x2d\x82\xa3\xd4\x90\x78\x7f\x1b\x8c\x73\xbc\x6d\xee\x10\xb4\x7e\x0c\xdb\x71\x9c\x07\xd1\xa6\x7a\xdb\xd1\xa6\x6c\x99\xc7\xe7\x98\x69\x73\xf4\x26\x17\xc5\xe9\x47\x87\x13\x0a\xbb\xab\x19\x55\xd8\xc1\xa7\xcb\x68\xc5\xc7\xac\xf5\x19\xf9\x02\xe9\xb7\x36\xd5\x6a\x38\x3f\xa7\xb2\xad\x96\xc0\x50\xa4\xa5\x88\x8f\x5d\xc5\x53\xb7\x7c\x0f\x20\xf9\x98\xfd\x7f\x77\xfe\x6b\xb5\x98\x10\x61\x96\x53\xff\x0e\xf1\x10\x25\xb8\x23\xff\xbb\xbf\x5c\x39\xd7\x89\xff\xd6\x89\xe7\x5d\x54\xf7\x71\xab\x2f\xee\xdb\x4d\x9e\x00\x61\x43\x34\x5f\x11\xa4\xa9\xdf\x5d\xa3\xbe\x5c\x77\xa1\x23\x30\x20\x25\xba\x89\x46\x37\xa7\x13\xcb\x9b\xf2\x6f\x00\x00\x00\xff\xff\x76\x63\x11\x9d\x11\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1809, mode: os.FileMode(420), modTime: time.Unix(1487111595, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

