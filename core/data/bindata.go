// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487160537, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x6f\xf2\x38\x10\xbe\xf7\x57\x58\xd6\x4a\xef\xe5\x05\xca\xae\x7a\x41\xda\x03\x9b\x74\x2b\x56\x7c\xa9\xc0\x69\x85\xaa\x69\x32\x04\x0b\xc7\x8e\xec\x81\x2d\x1b\xe5\xbf\xbf\xb2\x13\x4a\x3e\xa0\xe5\xc2\x64\x9e\x67\x3c\xcf\x8c\xc7\x93\x3f\x30\xc6\xff\xd1\xef\x7c\xc4\x9c\xc9\x18\x7f\xc5\x44\x68\xc5\x47\x8c\x27\x52\xbf\x83\xe4\x3f\x4b\xff\x24\x74\xbe\x48\x47\x5a\xab\x5e\x9e\x4f\xc2\xa2\xb8\x40\x73\x48\xf1\x2e\xb8\x3e\x67\x1e\xb4\x68\x4e\x22\xc2\x8b\x7b\x69\x84\x36\x82\xce\x7c\xc4\x9e\x1e\x2b\xdf\x58\xca\x31\x2d\x54\xe4\xf8\x3b\x90\x16\x2b\x7f\x08\x04\x11\x2a\x42\x63\xf9\x88\xfd\xeb\x9d\x8c\xf1\x38\x1a\x72\x6f\x6f\x2b\x5e\xa0\x95\x25\x03\x42\x51\x9d\x97\x57\xff\x8c\xf1\xe9\x1a\x4c\x82\xe4\xe4\xfc\x96\x03\x91\xe9\x1f\xd0\x28\x94\x7d\x05\x29\x5e\x14\x97\x5d\xb8\x32\xa5\x50\xc7\x8f\x3a\xb6\xc8\xd0\x80\x8a\x1d\xf6\x27\xaf\xdc\x45\x43\xc8\x1a\xec\xe1\xc5\xe8\x63\x76\x47\xc7\x57\x0d\xab\x2a\x39\x2a\x97\x3c\xcf\xbd\x55\x14\x0d\xac\x5e\xa5\x3a\x4a\x59\x03\x5d\xe6\x7a\xd2\x66\xe2\x5b\xc9\x09\xec\xa1\xab\xa0\xec\xbb\x11\x27\x34\x8e\x1b\xeb\xe8\x80\xa6\x8d\x07\x5a\xed\x44\xf2\x39\x3a\x35\x44\xa4\x90\xf8\x24\x79\x3e\x71\x66\xe7\x6c\xe6\xf2\xa7\x69\xd5\xc6\x77\xb0\xfb\x2e\x01\x4c\xe2\x4b\xe1\xbd\x88\xff\x64\xfc\x87\xb4\x6c\xb0\xd7\x29\xfe\xe0\xdb\x06\xb5\x68\xc9\x7a\x56\xa7\x5b\x9a\x82\x45\xb0\x58\xcc\xdf\xee\xcf\x71\x97\x1b\x2c\xc2\xe7\xb7\xcd\xeb\xb4\xac\x24\xf0\x31\x81\x8e\x71\xf3\x3a\xfd\x2e\x6a\x3d\x7e\x69\x47\xad\x21\xf9\x2e\x6a\x3a\x9e\x77\xc2\xa6\xa0\x5c\xdc\x97\x25\xaf\xca\xc7\xe5\xdb\xb5\x6d\x61\x33\x24\x70\xfd\x68\xc7\x4c\x75\x72\xff\x02\x67\xf0\xf1\xb7\x90\xfe\xc0\xe1\x63\x47\x72\x85\xae\xc4\xff\x38\xfb\xcb\x53\xbe\x54\xb7\xc6\x34\x93\x40\xb7\xe5\x8d\x0d\x89\x1d\x44\xe5\x93\x6d\xeb\x60\x8c\xbf\x20\x11\x9a\x95\x3e\x1a\xbf\x17\xf8\x9e\x28\xb3\xa3\xc1\xc0\x92\x36\x90\x60\x3f\xd1\x3a\x91\x08\x99\xb0\xfd\x48\xa7\x83\x83\xd1\x09\xa8\x41\x8c\xa7\x5e\x8c\x99\xd4\xe7\x5e\xa4\x95\xc2\x88\xb4\xe9\xdf\x18\x32\xbf\xf0\x24\x90\x38\x61\x88\xd6\xbf\x77\x3f\x63\x03\x4b\xc7\xdd\xce\x45\x34\x2b\x6b\xab\x0f\x85\xcd\x80\xa2\xfd\x12\xce\x52\x43\xec\xfb\x5c\x63\x5c\xed\x6d\x7d\xb9\xa0\xf5\xe5\xd8\x56\xe7\x79\xb0\xdc\x94\x8f\x7e\xb9\x29\x1a\x4d\xe4\x33\x4c\xb5\x39\xfb\x66\xe7\xf9\xe5\xa3\xc5\x09\x85\x3d\x54\x8c\xd2\x6c\xe1\x93\xc5\x72\xc5\x47\xac\x71\x9d\x7c\x8e\xf4\x9f\x36\xe5\xce\xb8\x3e\xab\xa2\xa9\x96\xc0\xd0\x52\x4b\x11\x9d\xdb\x8a\x27\x6e\x2b\x9f\x40\xf2\x11\xfb\xe3\xf1\xfa\x6b\xa4\x18\x13\x61\x9a\x51\x77\x96\x78\x88\x12\xdc\x91\xbf\x3f\xdd\x8e\x9c\xe9\xd8\xdf\x79\xec\x79\x37\xd5\x7d\x4e\xf7\xcd\x45\xbc\xc9\x62\x20\xac\x89\xe6\x2b\x82\x24\xf1\x4b\x6d\xd8\x95\xeb\x06\x7b\x09\x06\xa4\x44\x57\xd1\xf0\xe1\x72\x62\xf1\x50\xfc\x0a\x00\x00\xff\xff\x73\x6d\xc3\x54\x2a\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1834, mode: os.FileMode(420), modTime: time.Unix(1487160502, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

