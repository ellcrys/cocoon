// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1486987672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\x4b\x6f\xe2\x3e\x10\xbf\xf3\x29\x2c\xeb\x7f\xfc\x97\x94\x5d\xf5\x82\xb4\x07\x16\xba\x15\x2b\x28\x11\x8f\xd3\x0a\x55\xd3\x64\x1a\x2c\x1c\x3b\xb2\x07\x5a\x36\xca\x77\x5f\xd9\x09\x6d\x5e\x2d\x17\x9c\xf9\xcd\xe3\x37\xcf\x7c\xc0\x18\xff\xad\x9f\xf9\x98\xb9\x27\x63\x7c\x8d\x89\xd0\x8a\x8f\x19\x4f\xa4\x7e\x06\xc9\xff\x2f\xe5\xf3\x99\x93\x45\x3a\xd2\x5a\x0d\xf3\x7c\x3e\x2b\x8a\x2b\xf4\x08\x29\x7e\x0a\x6e\x2f\x99\x07\x2d\x9a\xb3\x88\xf0\x2a\x0e\x8d\xd0\x46\xd0\x85\x8f\xd9\xdd\x6d\x25\x9b\x48\x39\xa1\x95\x8a\x9c\xfe\x0b\x48\x8b\x95\x7c\x06\x04\x11\x2a\x42\x63\xf9\x98\xfd\xf1\x42\xc6\x78\x1c\x8d\xb8\x7f\xef\x2b\xbd\xa9\x56\x96\x0c\x08\x45\x75\xbd\xbc\xfa\x67\x8c\x2f\xb6\x60\x12\x24\x47\xe7\xbf\x1c\x88\xcc\xf0\x88\x46\xa1\x1c\x2a\x48\xf1\xca\xb8\xac\xc2\x87\xa6\x14\xea\xf4\x56\xc7\x56\x19\x1a\x50\xb1\xc3\x7e\xf0\x4a\x5c\x34\x88\x6c\xc1\x1e\x1f\x8c\x3e\x65\x9f\xf0\xf8\xaa\x60\x55\x26\x27\xe5\x82\xe7\xb9\x7f\x15\x45\x03\xab\x67\xa9\x4e\x52\xd6\x40\x17\xb9\x1e\xb4\x19\xb8\x2f\x38\x81\x3d\x76\x19\x94\x75\x37\xe2\x8c\xc6\xe9\xc6\x3a\x3a\xa2\x69\xe3\x53\xad\x5e\x44\xf2\x3e\x3a\x35\x44\xa4\x90\xf8\x20\x79\x3e\x77\xcf\x8e\x6f\xe6\xe2\xa7\x69\x55\xc6\x28\xee\xc2\x60\x92\x76\x22\xef\x58\x70\xd0\x29\xf2\x0e\xb2\x6f\x48\x8a\x16\xdb\x7b\x75\xee\xa3\x3a\x5d\x4d\x57\xab\xc7\xa7\xf5\x7d\xb8\x7a\xda\xad\x17\x9b\x92\xf5\xd4\x17\x67\x8d\x99\xde\xad\x17\x45\xc1\xbf\xf4\xbc\x29\x47\xdb\xd3\xdd\xb7\xb0\x25\x12\xb8\xb0\x6d\x9b\x85\x4e\x3e\x2f\xdf\x12\xde\x7e\x09\xe9\x1d\x8e\x6e\x3b\x95\xa9\xd0\x8d\xf8\x8b\xcb\x9f\x5e\xe5\x4b\x76\x5b\x4c\x33\x09\xd4\x4f\x6f\x62\x48\xbc\x40\x44\x7d\xa5\x6e\xd3\x62\x8c\x3f\x20\x11\x9a\x8d\x3e\x19\xbf\xa4\xfc\x40\x94\xd9\x71\x10\x18\x78\x1d\x26\x82\x0e\xa7\xe7\x93\x45\x13\x69\x45\xa8\x68\x18\xe9\x34\x50\x91\x8e\xd1\x06\xe5\xb0\x05\x29\x58\x42\x13\xd8\xc8\x88\x8c\x6c\x90\xe8\x9b\x12\xb8\x89\x31\x93\xfa\x32\xb4\x87\xce\x20\xf8\x93\x24\x81\xc4\x19\x67\x68\xfd\x46\xfa\xf6\xf7\x1a\xb7\x6c\x8b\xc6\x77\x3b\xf7\x99\xb0\x19\x50\x74\x08\xe1\x22\x35\xc4\xbe\x4b\x83\x3e\xe3\x7d\xfd\x30\xa0\xf5\xd9\xdb\x56\xdf\xf8\x34\xdc\x95\x0b\x1b\xee\x8a\x46\x0b\xf8\x12\x53\x6d\x2e\xbe\x55\x79\x7e\xfd\x68\xe9\xcc\x84\x3d\x56\x1a\xe5\xb3\x85\xcf\x57\xa1\x9b\xcc\xc6\x30\xf0\x47\xa4\x57\x6d\xca\x7d\xff\x98\xfd\xa2\xc9\x96\xc0\x50\xa8\xa5\x88\x2e\x6d\xc6\x73\x77\x51\xcf\x20\xf9\x98\x7d\xbf\xfd\xf8\x35\x42\x4c\x88\x30\xcd\xa8\x3b\x89\x7c\x86\x12\x9c\xcb\x6f\x77\xfd\x96\x4b\x1d\xfb\x11\x89\xbd\x5e\x2f\xbb\xf7\xdd\xe8\x3d\xa2\xbb\x2c\x06\xc2\x1a\x69\xbe\x21\x48\x12\x7f\x90\x46\x5d\xba\x6e\x2d\x42\x30\x20\x25\xba\x8c\x46\x83\xab\xc7\x62\x50\xfc\x0b\x00\x00\xff\xff\xda\x9e\x34\xb0\xe6\x06\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1766, mode: os.FileMode(420), modTime: time.Unix(1486987606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

