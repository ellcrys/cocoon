// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1486989098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\x4d\x6f\xdb\x30\x0c\xbd\xf7\x57\x08\xc2\x8e\x43\xd1\x6c\xe8\x25\xc0\x0e\x99\xdd\x0d\x19\x92\xda\xc8\xc7\x69\x08\x0a\x56\x66\x3d\x21\xb2\x64\xc8\x4c\xd6\xcc\xd0\x7f\x1f\x24\x3b\x8d\xed\xb8\xcd\x25\x34\xdf\x33\xdf\x23\x4d\xa9\xbe\x61\x8c\xff\x32\xcf\x7c\xca\x7c\xc8\x18\x5f\x61\x2e\x8d\xe6\x53\xc6\x73\x65\x9e\x41\xf1\xcf\x4d\x7e\x1e\xfb\x9c\x30\xc2\x18\x7d\x5b\xd7\xf3\xd8\xb9\x33\xf4\x08\x05\xbe\x0b\x6e\x4e\x65\x00\x2b\xb4\x47\x29\xf0\x9c\x4e\xad\x34\x56\xd2\x89\x4f\xd9\xfd\x5d\x9b\x9b\x29\x35\xa3\x44\x0b\xcf\x7f\x01\x55\x61\x9b\x8f\x81\x40\xa0\x26\xb4\x15\x9f\xb2\xdf\x21\xc9\x18\xcf\xc4\x84\x87\x78\xd7\xf2\x22\xa3\x2b\xb2\x20\x35\x75\x79\x75\xfb\xcf\x18\x5f\x6c\xc0\xe6\x48\xde\xce\xa7\x1a\x88\xec\xed\x1e\xad\x46\x75\xab\xa1\xc0\xb3\xe3\x66\x0a\x17\xa6\x92\xfa\xf0\xda\xc5\x92\x12\x2d\xe8\xcc\x63\xdf\x78\x9b\x76\x3d\x23\x1b\xa8\xf6\x3f\xad\x39\x94\xef\xf8\xf8\x68\x60\x6d\x27\x07\xed\xc5\xeb\x3a\x44\xce\xf5\xb0\x6e\x97\xfa\xa0\x54\x07\xf4\xca\x5d\xd1\xbe\xf0\x98\x38\x41\xb5\xbf\x76\xd0\xcc\xdd\xca\x23\x5a\xcf\xcd\x8c\xd8\xa3\x1d\xe2\x91\xd1\x2f\x32\x7f\x5b\x9d\x0e\x22\x0b\xc8\x83\x48\x5d\xcf\x7d\x78\x55\x9b\x79\xfd\xa2\x68\xc7\x28\x8c\xd6\x28\xc8\x0c\x15\x18\xe3\x60\xf3\xd0\x0f\xaf\x08\x2c\xf1\x5d\x0f\x77\x03\x43\x0f\xfa\x38\xe6\x26\x4a\xa2\x24\x79\x7c\x5a\x3d\xa4\xc9\xd3\x76\xb5\x58\x37\xc6\xa2\xd0\xff\x0a\x4b\xb3\x5d\x2d\x9c\xe3\x1f\x56\x5e\x37\xdb\x1b\xac\xec\x06\xd8\x12\x09\xbc\xec\xf0\x9d\x85\xc9\xdf\x9f\xd0\x12\x5e\x7f\x48\x15\x0a\x4e\xee\xae\xba\x6e\xd1\xb5\xfc\x87\xcb\xef\x81\xf2\xa1\xbb\x0d\x16\xa5\x02\x1a\xb7\x37\xb3\x24\x5f\x40\xd0\x28\x18\xcb\xaa\x04\x12\x7f\x52\x38\x29\x03\x59\x68\xa3\xc3\xb8\xc4\xbb\xee\xe1\xc0\xca\x1c\x6c\x33\x8d\x6e\x63\x3c\x4a\xb7\xcd\xd2\xa6\x5b\xd7\xf3\xc8\x97\x58\x18\x7b\x0a\xbd\xd4\xf5\xf9\x61\xc0\x89\x65\xb5\x6f\x19\x4d\x38\xc0\xe7\x49\xea\x3f\x5d\x6f\x5a\xfc\x11\xe9\xaf\xb1\xcd\xce\x5f\x96\xc3\xf5\xdd\xfa\xd5\x49\x8d\x92\xe2\x34\x74\x3c\xf7\xb7\xca\x11\x14\x9f\xb2\xaf\x77\x97\x5f\x4f\x62\x46\x84\x45\x49\xd7\x9f\x8a\xc7\xa8\xc0\x97\xfc\x72\x3f\xfe\xe6\xd2\x64\xe1\x14\x64\x81\x37\xea\xee\x6d\x79\x46\x2f\x92\x6d\x99\x01\x61\xc7\x34\x5f\x13\xe4\x79\x38\x94\x93\x6b\xbb\x7e\x6f\x52\xb0\xa0\x14\xfa\x8e\x26\x37\xe7\x8a\xee\xc6\xfd\x0f\x00\x00\xff\xff\x9a\x0e\x70\x1d\xea\x05\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1514, mode: os.FileMode(420), modTime: time.Unix(1486989070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

