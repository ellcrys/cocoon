// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487449816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x4b\x6f\xe3\x36\x10\xbe\xe7\x57\x10\xc4\x1e\x9b\xd8\xd9\x62\x2f\x06\x7a\xf0\x5a\x69\xe0\xc2\xb6\x04\x3f\x0e\x45\x11\x18\x63\x9a\x96\x09\x53\xa4\x40\x8e\x9c\x75\x05\xfd\xf7\x82\x94\xdc\xe8\x65\xa7\x45\x81\xe6\x12\x7a\xe6\x9b\xd7\x37\xa3\x21\xf3\x07\x42\xe8\x6f\x7a\x47\x47\xc4\x1d\x09\xa1\x4b\x1e\x0b\xad\xe8\x88\xd0\x58\xea\x1d\x48\xfa\x53\x29\x9f\x06\x4e\xc6\x34\xd3\x5a\x3d\xe6\xf9\x34\x28\x8a\xab\x6a\x01\x09\xbf\xa9\x5c\x5f\x52\xaf\xb4\xdc\x9c\x05\xe3\x57\x71\x64\x84\x36\x02\x2f\x74\x44\xbe\x0d\x2b\xd9\x58\xca\x31\x86\x8a\x39\xfc\x01\xa4\xe5\x95\x3c\x00\x04\xc6\x15\x72\x63\xe9\x88\xfc\xe1\x85\x84\xd0\x3d\x7b\xa6\xfe\xfc\x56\xe1\x26\x5a\x59\x34\x20\x14\xd6\x71\x79\xf5\x9f\x10\x3a\x5b\x83\x89\x39\xba\x74\xbe\xe4\x80\x68\x9e\x4e\xdc\x28\x2e\x9f\x14\x24\xfc\x9a\x71\xc9\xc2\x07\x52\x0a\x95\xfd\xa8\xeb\xc2\x94\x1b\x50\x7b\xa7\xfb\x85\x56\xe2\xa2\x91\xc8\x1a\xec\xe9\xd5\xe8\x2c\xbd\x91\xc7\x3d\xc2\xaa\x4a\x32\xe5\x82\xe7\xb9\x3f\x15\x45\x43\x57\xaf\x52\x65\x52\xd6\x94\x2e\x72\x3d\x68\x33\x70\x5f\x70\x04\x7b\xea\x66\x50\xf2\x6e\xc4\x99\x1b\x87\xdd\x6b\x76\xe2\xa6\xad\x9f\x68\x75\x10\xf1\xdf\xa3\x53\xd3\x88\x04\x62\x1f\x24\xcf\xa7\xee\xd8\xf1\x4d\x08\x3d\x68\xc3\xf8\x36\xcd\xa4\xa4\x23\x82\x26\xe3\x1d\x04\xd3\x49\x52\x11\xbd\x03\x7b\xec\xba\x50\x1c\xdf\xb5\x39\x6d\x13\xbd\xf7\xd1\x8e\xda\x62\x17\x05\x26\xf6\x94\xd0\x2f\xf9\x22\x9c\x8f\x83\xed\xfc\x65\x3d\xde\xae\x26\xcb\x69\xb4\x5e\x6d\x83\xe9\xb2\x18\x34\x34\xc1\x4b\x34\x0b\x7f\xaf\x00\xdb\xc5\x78\xfe\x52\xd0\xb7\x8e\xd7\xd4\x88\xb3\x90\x3c\xe6\xfb\x5b\xe9\xa7\xda\xe0\x36\x81\xd4\xc5\x6e\x33\xe4\xab\x53\x8a\x33\xd4\xe6\xf1\x88\xe8\x40\x3f\x0f\x87\xc3\x16\xac\x78\x6b\x08\x8a\x56\x03\x5e\xd4\xb9\x8f\xfd\x49\x38\x09\xc3\xc5\xf6\xf6\x17\xdb\xc5\x4e\xc2\xe0\x65\xbb\x59\xce\xca\x9e\x4d\xbc\xcd\x44\xef\xf9\x66\x39\xfb\xcc\x6a\x3d\x7e\x6d\x5b\xad\x21\xfe\xcc\x6a\x36\x5e\x74\xcc\x66\xa0\x9c\xdd\xdd\x92\x57\xe5\x1a\xb1\x7d\xa4\xb6\x46\xdb\x76\x33\x58\x43\x35\x0a\x15\x1d\xdd\xb6\x46\xda\xe0\x0c\x76\x5c\x96\x7e\x1a\x2d\x22\x84\x34\x73\x6b\x99\xd3\x39\x47\xe8\x6b\x48\x77\xa2\x9c\x77\x93\xa9\x47\x09\x99\x62\x47\x6e\x9e\xfa\xc6\xbb\xe2\xeb\x75\x19\x6e\xa2\x55\xdb\xba\xea\xeb\xe1\xbd\xd7\xb4\x36\xdd\x0e\x3c\x90\x9a\x81\x1c\x58\x66\x44\x8a\xf6\x3e\xc3\x33\x1d\xdf\xfe\xb0\xe7\xf0\xe3\x57\x21\x3d\xfd\xcf\xc3\x4e\xd4\x4a\xbb\x12\x7f\xf2\xf9\x77\x0f\xb9\x1b\x69\xcd\x93\x54\x02\x96\xcd\x6c\x73\x39\x36\x28\x0e\xc0\xb0\xb7\xd3\x84\xd0\x57\x8e\xc8\xcd\x4a\x67\x86\x95\xdf\x3e\x62\x6a\x47\x83\x81\x81\xf7\xa7\x58\xe0\x31\xdb\x65\x96\x1b\xa6\x15\x72\x85\x4f\x4c\x27\x03\xc5\xf4\x9e\xdb\x41\x49\xdc\x20\x01\x8b\xdc\x5c\x29\xf9\x7c\x03\xb4\x8b\xf5\x57\xa5\x04\x14\x67\x1e\x70\x8b\xff\x92\xe5\xff\xb9\xa0\x9b\x93\xf4\xdf\xeb\x6a\xf7\x6d\xc9\xad\x2f\xc1\xf6\x6e\xa6\x68\x53\xde\x6a\xd1\xa6\x28\xba\xe3\xc3\x13\x6d\x2e\x7e\x72\xf2\xfc\xfa\xa3\x07\x37\x0d\xa3\x15\x1d\x91\xee\xfc\x2d\xca\xfb\xa0\x7d\x01\xde\xa2\xdc\x85\xfc\x2e\xfc\x84\x7d\x1d\x76\xbc\x79\x7d\x70\x51\x90\x08\xe6\xb6\x82\xa5\xa3\xae\x53\xef\x98\xd0\x6a\x63\xb4\x17\x46\xd1\x83\x7f\xeb\xc8\xda\xa8\xfb\x3b\x3f\x10\x36\x05\x64\xc7\x08\x2e\x52\x83\xbb\x7c\xf2\xba\x83\x8f\xf3\x5b\xfd\x39\x73\xa3\x29\xb7\x1b\xf2\x4f\x9a\xe1\x72\x39\x55\x88\xf2\xd8\xd2\xf7\x35\xaa\xd1\xa4\x8f\x52\x8b\x66\xb6\x08\x06\x23\x2d\x05\xbb\xb4\x33\x9e\xba\x77\xe0\x19\x64\x75\x61\x5e\xff\x1a\x21\xc6\x88\x3c\x49\xb1\xbb\xa5\x68\xc0\x25\x38\x97\x5f\xbf\xf5\x5b\xce\xab\x97\xc4\xde\xe3\x7a\xb3\xbb\x2e\xf9\xa2\xf7\xe9\xb7\x49\xf7\x80\xbc\x96\x34\x5d\x21\xc4\xb1\x7f\x46\x3d\x77\xd3\x75\x2b\x33\x02\x03\x52\xfa\x1b\xe7\xf9\xe1\xea\xb1\x78\x28\xfe\x0a\x00\x00\xff\xff\x40\xff\x07\x75\x9c\x0b\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2972, mode: os.FileMode(420), modTime: time.Unix(1487448451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

