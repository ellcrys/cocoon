// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487158918, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4f\x6f\xdb\x3e\x0c\xbd\xf7\x53\x08\xc2\x0f\xe8\xe5\xd7\xae\xd9\xd0\x4b\x80\x1d\x32\xbb\x2b\x32\x38\xb1\xd1\x38\xa7\x21\x28\x58\x99\x75\x85\xc8\x92\x21\x2b\x59\x33\xc3\xdf\x7d\x90\xec\x34\xfe\x97\x34\x97\xd0\x7c\x8f\xe2\x23\x45\xaa\xbc\x22\x84\xfe\x52\x2f\x74\x4a\xac\x49\x08\x7d\xc2\x94\x2b\x49\xa7\x84\xa6\x42\xbd\x80\xa0\xff\xd7\xfe\xb9\x6f\x7d\x4c\x31\xa5\xe4\x4d\x59\xce\xfd\xaa\x3a\x42\x4b\xc8\xf0\x2c\x18\x1f\x72\x07\x16\xa8\xf7\x9c\xe1\xd1\x1d\x69\xae\x34\x37\x07\x3a\x25\xf7\x77\x8d\x6f\x26\xc4\xcc\x84\x92\x59\xfe\x2b\x88\x02\x1b\xbf\x0f\x06\x18\x4a\x83\xba\xa0\x53\xf2\xdb\x39\x09\xa1\x09\x9b\x50\x67\x6f\x1a\x9e\xa7\x64\x61\x34\x70\x69\xda\xbc\xb2\xf9\x27\x84\x06\x31\xe8\x14\x8d\x95\xf3\x5f\x09\xc6\xe8\xdb\x2d\x6a\x89\xe2\x56\x42\x86\x47\xc5\x75\x17\x4e\x4c\xc1\xe5\xee\xbd\x8d\x85\x39\x6a\x90\x89\xc5\xbe\xd3\xc6\x5d\x75\x84\xc4\x50\x6c\x1f\xb5\xda\xe5\x67\x74\x5c\x6a\x58\x53\xc9\x4e\xda\xe4\x65\xe9\xac\xaa\xea\x60\xed\x2a\xe5\x4e\x88\x16\x68\x33\xb7\x93\x76\x13\x8f\x25\x37\x50\x6c\x87\x0a\xea\xbe\x6b\xbe\x47\x6d\xb9\x89\x62\x5b\xd4\x7d\xdc\x53\xf2\x95\xa7\x1f\xa3\xd3\x42\x78\x06\xa9\x4b\x52\x96\x73\x6b\x0e\xce\x26\x36\x7f\x96\x35\x6d\x7c\x81\xe2\x6d\x48\x00\x9d\xba\x52\xe8\x0d\x23\xd7\xa2\x20\x5f\x84\x62\x20\xae\xe9\xa6\x43\xac\x7a\xa2\x1e\xe4\x7e\x4c\x91\x17\x7a\x61\xb8\x7c\x3e\x3f\xc5\x43\xae\x17\xfa\x0f\xcf\xeb\xa7\xa0\xae\xc3\x73\x31\x9e\x4a\x70\xfd\x14\x7c\x16\x15\xcf\x1e\xfb\x51\x31\xa4\x9f\x45\x05\xb3\xe5\x20\x2c\x00\x69\xe3\x2e\x96\xbc\xaa\x57\xcb\x35\x6b\xd3\xc3\x16\x68\xc0\xf6\xa3\x1f\x13\xa8\xf4\xfc\xf5\x2d\xe0\xfd\x27\x17\xee\xc0\xc9\xdd\x40\x72\x83\xae\xf8\x5f\x5c\xfc\x70\x94\x8b\xea\x62\xcc\x72\x01\x66\x5c\xde\x4c\x1b\xfe\x0a\xcc\x8c\x82\x3e\x2f\x72\x30\xec\x2d\x82\x83\x50\x90\xb8\x32\x5a\x8c\x93\xbd\x69\x6f\x2e\x16\x6a\xa7\xeb\x6e\xb4\x0b\xa3\x5e\xb4\xae\x37\x2a\x5a\x57\x1d\x8d\x74\x81\x99\xd2\x07\x57\x4b\x59\x1e\x3f\x7a\x1c\x9f\x17\xdb\x86\x51\x9b\x3d\x7c\x1e\x46\x2b\x3a\x25\x9d\x6e\xd1\x25\x9a\x3f\x4a\xd7\x0b\x79\x9a\xda\xaa\xab\xd6\x80\x36\x91\x12\x9c\x1d\xfa\x8a\xe7\xf6\xc9\xdb\x83\xa0\x53\xf2\xed\xee\xf4\xeb\xa4\x98\x19\x83\x59\x6e\x86\x57\x45\x7d\x14\x60\x8f\xfc\x7a\x3f\x1e\xb9\x50\x89\x5b\xd1\xc4\xf1\x46\xd5\x7d\x0c\xcf\xe8\x2b\xb7\xce\x13\x30\xd8\x12\x4d\x57\x06\xd2\xd4\xbd\x18\x93\xa1\x5c\x3b\x37\x11\x68\x10\x02\x6d\x45\x93\xab\xe3\x89\xd5\x55\xf5\x2f\x00\x00\xff\xff\xa8\x11\x88\x7f\x87\x06\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1671, mode: os.FileMode(420), modTime: time.Unix(1487158908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

