// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487161134, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x6f\xe3\x38\x0c\xbd\xf7\x57\x08\xc2\x1e\xb7\x49\xb3\x8b\x5e\x02\xec\x21\x6b\x77\x8a\x0c\xf2\x85\x26\x39\x0d\x8a\x82\xb5\x19\x47\xb0\x2c\x19\x12\x93\x36\x63\xf8\xbf\x0f\x24\x3b\xad\x3f\x92\xb6\x97\x32\x7c\x8f\xe2\xe3\xb3\xc4\xe2\x86\x31\xfe\x53\xbf\xf2\x31\x73\x21\x63\xfc\x09\x13\xa1\x15\x1f\x33\x9e\x48\xfd\x0a\x92\xff\x5d\xe5\xa7\xa1\xcb\x45\x3a\xd2\x5a\xdd\x16\xc5\x34\x2c\xcb\x33\xb4\x80\x0c\xaf\x82\x9b\x53\xee\x41\x8b\xe6\x28\x22\x3c\xa7\x57\x46\x68\x23\xe8\xc4\xc7\xec\xfe\xae\xce\x4d\xa4\x9c\xd0\x52\x45\x8e\xbf\x03\x69\xb1\xce\x87\x40\x10\xa1\x22\x34\x96\x8f\xd9\x2f\x9f\x64\x8c\xc7\xd1\x88\xfb\xf8\xb9\xe6\x05\x5a\x59\x32\x20\x14\x35\x79\x45\xfd\x9f\x31\x3e\xdb\x80\x49\x90\x9c\x9c\xbf\x0a\x20\x32\x83\x14\x8d\x42\x39\x50\x90\xe1\x59\x71\xe5\xc2\x27\x53\x0a\x75\x78\x6f\x62\xcb\x1c\x0d\xa8\xd8\x61\xff\xf1\x3a\x5d\xb6\x84\x6c\xc0\xa6\x8f\x46\x1f\xf2\x2b\x3a\xbe\x32\xac\x9e\xe4\xa0\x5c\xf3\xa2\xf0\x51\x59\xb6\xb0\xe6\x94\xea\x20\x65\x03\x74\x9d\x9b\x4d\xdb\x8d\x2f\x35\x27\xb0\x69\x5f\x41\xe5\xbb\x11\x47\x34\x8e\x1b\xeb\x28\x45\xd3\xc5\x03\xad\x76\x22\xf9\xb8\x3a\x0d\x44\x64\x90\xf8\x26\x45\x31\x75\x61\xef\x6c\xe6\xfa\x67\x59\x6d\x63\xfe\x16\xf7\x71\x30\x89\x9f\xe4\xb9\x05\x94\x1d\x0d\x0f\xea\x78\x49\x40\xb0\x0c\x96\xcb\xc5\xcb\xf5\x4b\xdb\xe7\x06\xcb\xf0\xe1\x65\xfb\x34\xab\x64\x07\xbe\x26\xd0\x31\x6e\x9f\x66\xdf\x55\x6d\x26\x8f\xdd\xaa\x0d\x24\xdf\x55\xcd\x26\x8b\x5e\xd9\x0c\x94\xab\xfb\x72\xe4\x75\xf5\x92\x2a\x73\x3a\xd8\x1c\x09\x9c\x1f\xdd\x9a\x99\x4e\xae\x7f\xad\x39\xbc\xff\x10\xd2\x1f\x38\xba\xeb\x49\xae\xd1\xb5\xf8\x8d\xf3\xff\x3d\xe5\x4b\x75\x1b\xcc\x72\x09\x74\x59\xde\xc4\x90\xd8\x41\x54\xbd\xcf\xae\x0e\xc6\xf8\x23\x12\xa1\x59\xeb\x83\xf1\x4b\x80\xef\x89\x72\x3b\x1e\x0e\x2d\x69\x03\x09\x0e\x12\xad\x13\x89\x90\x0b\x3b\x88\x74\x36\x4c\x8d\x4e\x40\x0d\x63\x3c\xde\xc6\x98\x4b\x7d\xba\x8d\xb4\x52\x18\x91\x36\x03\xbb\xef\xb9\xef\xb7\x9b\x04\x12\x47\x0c\xd1\xfa\xc7\x3d\xdc\xeb\x0c\x87\x96\x0e\xbb\x9d\xab\x68\x4f\xd6\x55\x1f\x0a\x9b\x03\x45\xfb\x15\x9c\xa4\x86\xd8\xfb\xdc\x60\x7c\xc6\xcf\xcd\x4d\x82\xd6\x8f\x63\x3b\xce\xf3\x60\xb5\xad\x5e\xf8\x6a\x5b\xb6\x4c\xe4\x73\xcc\xb4\x39\x79\xb3\x8b\xe2\xfc\xa3\xc3\x09\x85\x4d\x6b\x46\x15\x76\xf0\xe9\x72\xb5\xe6\x63\xd6\xfa\x9c\x7c\x81\xf4\xa6\x4d\xda\x79\x56\x65\x5b\x2d\x81\xa1\x95\x96\x22\x3a\x75\x15\x4f\xdd\x0a\x3e\x82\xe4\x63\xf6\xef\xdd\xe7\x5f\xab\xc5\x84\x08\xb3\x9c\xfa\x77\x89\x87\x28\xc1\x1d\xf9\xcf\xfd\xe5\xca\xb9\x8e\xfd\x37\x8f\x3d\xef\xa2\xba\x8f\xdb\x7d\x71\xeb\x6e\xf3\x18\x08\x1b\xa2\xf9\x9a\x20\x49\xfc\x06\x1b\xf5\xe5\xba\x8b\xbd\x02\x03\x52\xa2\x9b\x68\x74\x73\x3e\xb1\xbc\x29\xff\x04\x00\x00\xff\xff\x34\xc6\x18\xf8\x17\x07\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1815, mode: os.FileMode(420), modTime: time.Unix(1487161000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

