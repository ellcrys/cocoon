// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487411574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4d\x8f\xe2\x38\x10\xbd\xf7\xaf\xb0\xac\x39\x6e\x37\xf4\xac\xe6\x82\xb4\x07\x86\xf4\xb6\x58\xf1\x11\x01\x7d\x58\xad\x10\x2a\x4c\x75\xb0\x70\xec\xc8\x76\x98\x61\xa3\xfc\xf7\x95\x9d\xb0\x9d\xc4\x81\x9e\x5c\x30\x55\xcf\x55\xcf\xaf\x5c\x95\x14\x0f\x84\xd0\xbf\xd4\x9e\x8e\x88\x5b\x12\x42\x57\x98\x70\x25\xe9\x88\xd0\x44\xa8\x3d\x08\xfa\x5b\x65\x9f\x46\xce\xc6\x14\x53\x4a\x3e\x16\xc5\x34\x2a\xcb\xab\x6b\x01\x29\xde\x74\x6e\x2e\x99\x77\x1a\xd4\x67\xce\xf0\x6a\x8e\x35\x57\x9a\xdb\x0b\x1d\x91\x6f\xc3\xda\x36\x16\x62\x6c\x97\x92\x39\xfc\x3b\x08\x83\xb5\x3d\x02\x0b\x0c\xa5\x45\x6d\xe8\x88\xfc\xe3\x8d\x84\xd0\x03\x7b\xa6\x7e\xbd\xad\x71\x13\x25\x8d\xd5\xc0\xa5\x6d\xe2\x8a\xfa\x97\x10\x3a\xdb\x80\x4e\xd0\x3a\x3a\x5f\x0a\xb0\x56\x3f\x9d\x50\x4b\x14\x4f\x12\x52\xbc\x32\xae\x54\xf8\x40\x0a\x2e\xf3\x9f\x4d\xdf\x32\x43\x0d\xf2\xe0\x7c\x7f\xd0\xda\x5c\xb6\x88\x6c\xc0\x9c\x5e\xb5\xca\xb3\x1b\x3c\xee\x09\x56\x9f\x24\x97\x2e\x79\x51\xf8\x55\x59\xb6\x7c\xcd\x53\xca\x5c\x88\x86\xd3\x65\x6e\x26\x6d\x27\xee\x4b\x6e\xc1\x9c\x42\x06\x95\xee\x9a\x9f\x51\x3b\xec\x41\xb1\x13\xea\xae\x7f\xa2\xe4\x3b\x4f\xfe\xbf\x3a\x0d\x0f\x4f\x21\xf1\x49\x8a\x62\xea\x96\x41\x6c\x42\xe8\xbb\xd2\x0c\x77\x59\x2e\x04\x1d\x11\xab\x73\x0c\x10\x4c\xa5\x69\x2d\xf4\x1e\xcc\x31\x0c\x01\x3a\xf1\x87\xa5\x5f\x8a\xc5\x72\x3e\x8e\x76\xf3\x97\xcd\x78\xb7\x9e\xac\xa6\xf1\x66\xbd\x8b\xa6\xab\x72\xd0\xf2\x44\x2f\xf1\x6c\xf9\x77\x0d\xd8\x2d\xc6\xf3\x97\x92\x6e\x83\xa8\x99\xe6\x67\x2e\x30\xc1\xc3\x2d\x62\x99\xd2\x76\x97\x42\xe6\x72\x77\xcf\xee\x79\x4b\x89\xcc\x2a\xfd\x78\xb4\xd6\x81\x7e\x1f\x0e\x87\x1d\x58\xb9\x6d\x19\xca\x8e\xb4\x2f\xf2\xdc\xa7\xeb\x64\x39\x59\x2e\x17\xbb\xdb\xbd\x18\x62\x27\xcb\xe8\x65\xf7\xb6\x9a\x55\xd5\x98\xf8\x3d\x13\x75\xc0\xb7\xd5\xec\xb3\x5d\x9b\xf1\x6b\x77\xd7\x06\x92\xcf\x76\xcd\xc6\x8b\x60\xdb\x0c\xa4\xdb\x77\xf7\xc8\xeb\x6a\x40\x98\x3e\x51\x3b\x97\xd6\x84\x0c\x36\x50\x5f\x85\x5a\x8e\xb0\xac\xb1\xd2\x76\x06\x7b\x14\x55\x9c\x56\x89\x08\x21\x6d\x6e\x9d\xed\x74\x8e\x16\xfa\x0a\x12\xde\x28\x17\x5d\xe7\xf2\x51\x40\x2e\xd9\x11\xf5\x53\xdf\xc5\x6d\x5c\x51\x87\x1f\x08\xc5\x40\x0c\x0c\xd3\x3c\xb3\xe6\xbe\x4c\x33\x95\xdc\xee\xbb\x39\xfc\xfc\x93\x0b\xaf\xe1\xf3\x30\xc8\x5a\x7b\xd7\xfc\x5f\x9c\x7f\xf7\x90\xbb\x99\x36\x98\x66\x02\x6c\x55\x91\xae\x20\x63\x6d\xf9\x3b\x30\xdb\x5b\x2e\x42\xe8\x2b\x5a\x8b\x7a\xad\x72\xed\xc7\x39\x75\x32\x9b\xd1\x60\xa0\xe1\xc7\x53\xc2\xed\x31\xdf\xe7\x06\x35\x53\xd2\xa2\xb4\x4f\x4c\xa5\x03\xc9\xd4\x01\xcd\xa0\xaa\xf0\x20\x05\x63\x51\x5f\x25\xf9\xbc\x8d\xbb\x87\xf5\x6f\x32\x01\x96\x9f\x31\x42\x63\x3f\x55\xb9\x7b\xbe\x15\x1a\xcf\xdd\xf4\xb6\x61\xfc\x56\x0d\xe7\xf8\xad\x2c\x43\x99\x31\x55\xfa\xe2\x15\x2e\x8a\xeb\x9f\x1e\xdc\x74\x19\xaf\xe9\x88\x84\x75\x5a\xa0\xfd\xa1\x74\x30\xc7\xab\x27\xd4\xda\xa5\xfc\xce\x7d\x25\xbe\x0e\x83\x68\xde\x1f\x5d\x24\xa4\x9c\xb9\x16\x30\x74\x14\x06\xf5\x81\x09\xad\xdb\xa3\xdb\x1d\x65\x0f\x7e\x1b\xd8\xba\xa8\xfb\x03\x2e\xe2\x26\x03\xcb\x8e\x31\x5c\x84\x02\x37\x69\x8b\x66\x80\x8f\xf5\xb6\xf9\x56\xbe\x51\x94\xdb\x05\xf9\x95\x62\x38\x2e\xa7\x1a\x51\x2d\x3b\xfe\xbe\x42\xb5\x8a\xf4\x71\xd4\xb2\xcd\xd6\x82\xb6\xb1\x12\x9c\x5d\xba\x8c\xa7\xee\x73\xe6\x0c\xa2\x7e\x3b\x5c\x9f\x56\x8a\xb1\xb5\x98\x66\x36\xec\x66\x1a\xa1\x00\x17\xf2\xeb\xb7\xfe\x9d\x73\x75\xf0\x5d\x77\xf0\xb8\x5e\x76\xd7\x89\x56\xf6\x7e\xc1\xbc\x65\x07\xb0\xd8\x20\x4d\xd7\x16\x92\xc4\x7f\x0d\x3c\x87\x74\xdd\x68\x89\x41\x83\x10\x7e\xbc\x3e\x3f\x5c\x23\x96\x0f\xe5\x7f\x01\x00\x00\xff\xff\xcc\x0d\xc4\xbe\x63\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2659, mode: os.FileMode(420), modTime: time.Unix(1487411548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

