// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487068943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x6f\xdb\x30\x0c\xbd\xf7\x57\x08\xc2\x8e\x5b\xd1\x6c\xe8\x25\xc0\x0e\x99\xdd\x15\x19\x92\xd8\x68\x9c\xd3\x10\x14\xac\xcd\x7a\x42\x64\xc9\x90\x99\xac\x99\xe1\xff\x3e\x48\x76\x1a\x7f\x25\xcd\x25\x34\xdf\xa3\xf8\x48\x91\x2a\x6f\x18\xe3\xbf\xf4\x0b\x9f\x32\x6b\x32\xc6\x9f\x30\x15\x5a\xf1\x29\xe3\xa9\xd4\x2f\x20\xf9\xe7\xda\x3f\xf7\xad\x2f\xd6\xb1\xd6\xea\x4b\x59\xce\xfd\xaa\x3a\x41\x2b\xc8\xf0\x22\x18\x1d\x73\x07\x16\x68\x0e\x22\xc6\x93\x3b\x34\x42\x1b\x41\x47\x3e\x65\xf7\x77\x8d\x6f\x26\xe5\x8c\x02\x15\x5b\xfe\x2b\xc8\x02\x1b\xbf\x0f\x04\x31\x2a\x42\x53\xf0\x29\xfb\xed\x9c\x8c\xf1\x24\x9e\x70\x67\x6f\x1b\x9e\xa7\x55\x41\x06\x84\xa2\x36\xaf\x6c\xfe\x19\xe3\x8b\x08\x4c\x8a\x64\xe5\x7c\x2a\x81\xc8\xdc\xee\xd0\x28\x94\xb7\x0a\x32\x3c\x29\xae\xbb\x70\x66\x4a\xa1\xf6\x6f\x6d\x2c\xc8\xd1\x80\x4a\x2c\xf6\x9d\x37\xee\xaa\x23\x24\x82\x62\xf7\x68\xf4\x3e\xbf\xa0\xe3\x5a\xc3\x9a\x4a\xf6\xca\x26\x2f\x4b\x67\x55\x55\x07\x6b\x57\xa9\xf6\x52\xb6\x40\x9b\xb9\x9d\xb4\x9b\x78\x2c\x39\x41\xb1\x1b\x2a\xa8\xfb\x6e\xc4\x01\x8d\xe5\x26\x3a\xde\xa1\xe9\xe3\x9e\x56\xaf\x22\x7d\x1f\x9d\x16\x22\x32\x48\x5d\x92\xb2\x9c\x5b\x73\x70\x36\xb3\xf9\xb3\xac\x69\x63\xac\x95\xc2\x98\x74\x3f\x03\x63\x1c\x4c\xea\xea\xe1\x05\x81\x21\xbe\xed\xe0\x55\x4f\xd0\x83\x3a\x8c\xa9\xf1\x02\x2f\x08\x56\xcf\x97\x27\x78\xc8\xf5\x02\xff\xe1\x79\xf3\xb4\xa8\x6b\xf0\x5c\x8c\xa7\x13\xdc\x3c\x2d\x3e\x8a\x8a\x66\x8f\xfd\xa8\x08\xd2\x8f\xa2\x16\xb3\xd5\x20\x6c\x01\xca\xc6\x5d\x2d\x79\x5d\xaf\x95\xeb\xd1\xb6\x87\x2d\x91\xc0\xf6\xa3\x1f\xb3\xd0\xe9\xe5\xab\x5b\xc2\xdb\x4f\x21\xdd\x81\x93\xbb\x81\xe4\x06\x5d\x8b\x7f\xb8\xfc\xe1\x28\x57\xd5\x45\x98\xe5\x12\x68\x5c\xde\xcc\x90\x78\x85\x98\x46\x41\x5f\x14\x39\x50\xfc\x27\x84\xa3\xd4\x90\xb8\x32\x5a\x8c\xb3\xbd\x6d\x6f\x2d\x16\x7a\x6f\xea\x6e\xb4\x0b\xe3\x5e\xb8\xa9\xb7\x29\xdc\x54\x1d\x8d\x7c\x89\x99\x36\x47\x57\x4b\x59\x9e\x3e\x7a\x1c\x5f\x14\xbb\x86\x51\x9b\x3d\x7c\x1e\x84\x6b\x3e\x65\x9d\x6e\xf1\x15\xd2\x5f\x6d\xea\x65\x3c\x4f\x6d\xd5\x55\x6b\x67\x3a\xd4\x52\xc4\xc7\xbe\xe2\xb9\x7d\xee\x0e\x20\xf9\x94\x7d\xbb\x3b\xff\x3a\x29\x66\x44\x98\xe5\x34\xbc\x2a\xee\xa3\x04\x7b\xe4\xd7\xfb\xf1\xc8\xa5\x4e\xdc\x7a\x26\x8e\x37\xaa\xee\x7d\x78\x46\x5f\xb8\x4d\x9e\x00\x61\x4b\x34\x5f\x13\xa4\xa9\x7b\x2d\x26\x43\xb9\x76\x6e\x42\x30\x20\x25\xda\x8a\x26\x37\xa7\x13\xab\x9b\xea\x7f\x00\x00\x00\xff\xff\x23\xd1\x3f\xe8\x83\x06\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 1667, mode: os.FileMode(420), modTime: time.Unix(1487068920, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

