// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1488385471, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4b\x6f\xe3\x36\x10\xbe\xef\xaf\x20\x88\x3d\x36\xb1\xb3\xc5\x5e\x0c\xf4\xa0\x58\x69\xe0\xc2\x0f\xc1\x8f\x43\x51\x04\xc2\x84\x62\x14\xc2\x14\x29\x90\x23\xef\xba\x82\xfe\x7b\x41\x49\xde\x48\xa2\xec\xd4\x97\x30\x33\xdf\xbc\xbe\xe1\x0c\x55\x7e\x21\x84\xfe\xa5\x5f\xe9\x8c\xb8\x23\x21\x74\xcb\x53\xa1\x15\x9d\x11\x9a\x4a\xfd\x0a\x92\xfe\xd6\xc8\x17\xa1\x93\x95\xe5\x22\xac\xaa\x8b\x6c\x0d\x19\xf7\xa5\xfb\x73\x5e\x4b\x2d\x37\x27\xc1\xf8\x45\x1c\x19\xa1\x8d\xc0\x33\x9d\x91\xef\xd3\x56\x16\x48\x19\xe0\x46\x31\x87\x7f\x03\x69\x79\x2b\x0f\x01\x81\x71\x85\xdc\x58\x3a\x23\xff\xd4\x42\x42\x68\xc2\x1e\x68\x7d\x7e\x69\x71\x73\xad\x2c\x1a\x10\x0a\xbb\xb8\xb2\xfd\x4b\x08\x5d\xee\xc1\xa4\x1c\x5d\x3a\x5f\x4b\x40\x34\xf7\x47\x6e\x14\x97\xf7\x0a\x32\x7e\xc9\xb8\xa9\xfb\x03\x29\x85\x2a\x7e\x76\x75\x9b\x9c\x1b\x50\x89\xd3\xfd\x41\x5b\x71\xd5\x4b\x64\x0f\xf6\xf8\x6c\x74\x91\x5f\xc9\x63\x94\xa9\xb6\x84\x42\xb9\xa8\x65\x59\x9f\xaa\xaa\xa7\xeb\x96\xa7\x0a\x29\x3b\x4a\x17\xb2\x1b\xad\x1f\xb1\x17\x15\xc1\x1e\xef\xbc\xd0\x0d\xd3\x46\x9c\xb8\x71\xa0\x44\xb3\x23\x37\x43\xfd\x5c\xab\x37\x91\xfe\xba\x1e\x1d\x8d\xc8\x20\xbd\xd4\xe4\x8e\x9e\x6f\x42\xe8\x9b\x36\x8c\xc7\x79\x21\x25\x9d\x11\x34\x05\xf7\x10\x4c\x67\x59\x4b\xed\x2b\xd8\x77\xdf\x85\xe2\xf8\x43\x9b\x63\x9c\xe9\xa4\x8e\xf6\xae\x2d\xfa\x28\x30\x69\xcd\x05\xfd\x5a\xae\x37\xab\x20\x8c\x57\x4f\xfb\x20\xde\xcd\xb7\x8b\x68\xbf\x8b\xc3\xc5\xb6\x9a\xf4\x34\xe1\x53\xb4\xdc\xfc\xdd\x02\xe2\x75\xb0\x7a\xaa\xe8\x8b\xe7\x35\x37\xe2\x24\x24\x4f\x79\x72\x2d\xfd\x5c\x1b\x8c\x33\xc8\x5d\xec\x21\x43\x75\x75\x4a\x71\x86\xda\xdc\xbd\x23\x3a\xd0\xef\xd3\xe9\x74\x00\xab\x5e\x7a\x82\x6a\xd0\x80\x27\x75\x1a\x63\x7f\xbe\x99\x6f\x36\xeb\x78\x64\x2a\x7d\xd0\x7c\x13\x3e\xc5\x87\xed\xb2\x81\xce\x35\xd3\x5a\xcd\x75\xc2\x0f\xdb\xe5\x67\x56\xfb\xe0\x79\x68\xb5\x87\xf4\x33\xab\x65\xb0\xf6\xcc\x96\xa0\x6e\xd9\x3d\x1e\x16\xcb\x30\x8e\x82\x6d\xb0\xda\x75\x4d\x1f\x0b\x21\x93\x08\x0c\x64\xb6\xaa\xe8\x4d\xa6\x76\xcd\xbe\xb1\x63\xbd\xb8\x3e\x80\xad\x7e\x0f\xed\x05\x6a\x01\xfe\x65\x88\xb4\xc1\x25\xbc\x72\x77\x95\x87\x8d\x25\x84\xf4\x53\x1b\x98\xd3\x15\x47\x18\x6b\xa3\x7f\x0f\x9d\x77\x53\xa8\xbb\x5f\x11\xee\xc7\xa6\xa2\x73\xb3\x9d\xc1\x44\x6a\x06\x72\x62\x99\x11\x39\xda\xdb\x34\x2d\x75\x7a\x7d\xa8\x57\xf0\xf3\x4f\x21\x6b\x0e\x1f\xa6\x5e\xd4\x56\xbb\x13\xff\xf2\xd5\x63\x0d\xb9\x19\x69\xcf\xb3\x5c\x02\x36\x1d\x19\x32\x12\x18\x14\x6f\xc0\x70\xb4\x5d\x84\xd0\x67\x8e\xc8\xcd\x4e\x17\x86\x35\x73\x8f\x98\xdb\xd9\x64\x62\xe0\xc7\x7d\x2a\xf0\xbd\x78\x2d\x2c\x37\x4c\x2b\xe4\x0a\xef\x99\xce\x26\x8a\xe9\x84\xdb\x09\xab\xef\xcd\x24\x03\x8b\xdc\x5c\x28\xf9\x7c\xfa\x87\xc5\xd6\x4f\xa1\x04\x14\x27\x1e\x72\x8b\x9f\xb2\x3c\xac\x6f\xcb\x6d\x9d\xbb\x1d\x9d\xde\xe8\xd0\xac\xfc\xe8\x50\x55\x3e\xcd\x3c\xd3\xe6\x5c\x33\x5c\x96\x97\x7f\x46\x70\x8b\x4d\xe4\x66\xc5\xef\xd3\xba\xd9\x99\xc3\xd7\xa1\xf9\xf9\x5c\xbb\x90\x8f\xa2\xee\xc4\xb7\xa9\xe7\xad\xd6\x87\x67\x05\x99\x60\x6e\x06\x2c\x9d\xf9\x4e\x6b\xc7\x84\xb6\xf3\x31\x1c\x8f\x6a\x04\xff\xe2\xc9\x86\xa8\xdb\x7b\x31\x14\x36\x07\x64\xef\x11\x9c\xa5\x06\xb7\xa0\xcb\xae\x83\x8f\xf3\x4b\xf7\x91\xbf\xd2\x94\xeb\x0d\xf9\x3f\xcd\x70\xb9\x1c\x5b\x44\x73\x1c\xe8\xc7\x1a\xd5\x6b\xd2\x47\xa9\x55\x3f\x5b\x04\x83\x91\x96\x82\x9d\x87\x19\x2f\xdc\xd7\xd1\x09\x64\xfb\xa8\x5c\x7e\xbd\x10\x01\x22\xcf\x72\xf4\xa7\x99\x86\x5c\x82\x73\xf9\xed\xfb\xb8\xe5\xaa\x7d\x6d\x93\x1a\x37\x9a\xdd\x65\xa5\x55\xa3\x1f\x44\x87\x3c\x01\xe4\x9d\xa4\xe9\x0e\x21\x4d\xeb\x4f\x8d\x07\x3f\x5d\xb7\x5a\xdc\x96\x97\xb2\xde\xaf\x0f\x5f\x2e\x1e\xab\x2f\xd5\x7f\x01\x00\x00\xff\xff\x6a\xe0\xa3\xfa\xa4\x0a\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2724, mode: os.FileMode(420), modTime: time.Unix(1488385440, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

