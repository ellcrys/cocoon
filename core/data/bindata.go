// Code generated by go-bindata.
// sources:
// bindata.go
// cocoon.job.json
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1487516039, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _cocoonJobJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x4d\x6f\xe3\x36\x13\xbe\xe7\x57\x10\xc4\x1e\xdf\xc4\xce\xbe\xd8\x8b\x81\x1e\xbc\x56\x1a\xb8\xb0\x2d\xc1\x1f\x87\xa2\x30\x8c\x31\x4d\xcb\x84\x29\x52\x20\x47\xce\xba\x82\xfe\x7b\x41\x49\xde\x48\xa2\x9c\xb4\x28\xd0\x5c\x42\xcf\x3c\xf3\xf5\xcc\x68\xc8\xfc\x81\x10\xfa\x9b\xde\xd3\x11\x71\x47\x42\xe8\x92\xc7\x42\x2b\x3a\x22\x34\x96\x7a\x0f\x92\xfe\xaf\x92\x4f\x03\x27\xcb\xf3\x69\x50\x14\x37\xd9\x02\x12\xee\x4b\xd7\xd7\xb4\x94\x5a\x6e\x2e\x82\xf1\x9b\x38\x32\x42\x1b\x81\x57\x3a\x22\xdf\x86\xb5\x6c\x2c\xe5\x18\x43\xc5\x1c\xfe\x08\xd2\xf2\x5a\x1e\x00\x02\xe3\x0a\xb9\xb1\x74\x44\xfe\x28\x85\x84\xd0\x03\x7b\xa6\xe5\x79\x5b\xe3\x26\x5a\x59\x34\x20\x14\x36\x71\x79\xfd\x9f\x10\x3a\x5b\x83\x89\x39\xba\x74\xbe\xe4\x80\x68\x9e\xce\xdc\x28\x2e\x9f\x14\x24\xfc\x96\x71\x55\xf7\x3b\x52\x0a\x95\xfd\x68\xea\xc2\x94\x1b\x50\x07\xa7\xfb\x85\xd6\xe2\xa2\x95\xc8\x1a\xec\xf9\xd5\xe8\x2c\xbd\x93\x47\x2f\x53\x75\x09\x99\x72\x51\xf3\xbc\x3c\x15\x45\x4b\xd7\x2c\x4f\x65\x52\x36\x94\x2e\x64\x33\x5a\x3b\x62\x2b\x2a\x82\x3d\x3f\x7a\xa1\x2b\xa6\x8d\xb8\x70\xe3\x40\x07\xcd\xce\xdc\x74\xf5\x13\xad\x8e\x22\xfe\x39\x1e\x0d\x8d\x48\x20\xbe\xd5\xe4\x8e\x9e\x6f\x42\xe8\x51\x1b\xc6\x77\x69\x26\x25\x1d\x11\x34\x19\xf7\x10\x4c\x27\x49\x4d\xed\x1e\xec\xc9\x77\xa1\x38\xbe\x69\x73\xde\x25\xfa\x50\x46\x3b\x69\x8b\x3e\x0a\x4c\x5c\x72\x41\xbf\xe4\x8b\x70\x3e\x0e\x76\xf3\x97\xf5\x78\xb7\x9a\x2c\xa7\xd1\x7a\xb5\x0b\xa6\xcb\x62\xd0\xd2\x04\x2f\xd1\x2c\xfc\xbd\x06\xec\x16\xe3\xf9\x4b\x41\xb7\x9e\xd7\xd4\x88\x8b\x90\x3c\xe6\x87\x7b\xe9\xa7\xda\xe0\x2e\x81\xd4\xc5\xee\x32\x54\x56\xa7\x14\x67\xa8\xcd\xe3\x09\xd1\x81\xfe\x3f\x1c\x0e\x3b\xb0\x62\xdb\x12\x14\x9d\x06\xbc\xa8\x4b\x1f\xfb\x93\x70\x12\x86\x8b\x5d\xcf\x57\xe9\x83\x26\x61\xf0\xb2\xdb\x2c\x67\x15\x74\xa2\x99\xd6\x6a\xa2\x0f\x7c\xb3\x9c\x7d\x66\xb5\x1e\xbf\x76\xad\xd6\x10\x7f\x66\x35\x1b\x2f\x3c\xb3\x19\x28\x67\xf7\x61\xad\xab\x6a\x63\xd8\x3e\x36\x7f\x0e\x33\x2b\x5d\x5a\x3f\x83\x35\xd4\x33\x50\xd3\xe1\xf7\x33\xd2\x06\x67\xb0\xe7\xb2\xf2\xd3\xea\x0d\x21\xa4\x9d\x5b\xc7\x9c\xce\x39\x42\x5f\x27\xfc\x51\x72\xde\x4d\xa6\x1e\x25\x64\x8a\x9d\xb8\x79\xea\x9b\xeb\x9a\xaf\xd7\x65\xb8\x89\x56\x5d\xeb\xaa\xc6\xc7\xe3\x5b\xaf\x69\x63\xac\x1d\x78\x20\x35\x03\x39\xb0\xcc\x88\x14\xed\xc7\x0c\xcf\x74\x7c\xff\x8b\x9e\xc3\x8f\x5f\x85\x2c\xe9\x7f\x1e\x7a\x51\x6b\xed\x4a\xfc\xc9\xe7\xdf\x4b\xc8\x87\x91\xd6\x3c\x49\x25\x60\xd5\xcc\x2e\x97\x63\x83\xe2\x08\x0c\x7b\x3b\x4d\x08\x7d\xe5\x88\xdc\xac\x74\x66\x58\xf5\xd1\x23\xa6\x76\x34\x18\x18\x78\x7b\x8a\x05\x9e\xb2\x7d\x66\xb9\x61\x5a\x21\x57\xf8\xc4\x74\x32\x50\x4c\x1f\xb8\x1d\x54\xc4\x0d\x12\xb0\xc8\xcd\x8d\x92\xcf\x3f\xfd\x6e\xb1\xe5\x3d\x28\x01\xc5\x85\x07\xdc\xe2\x3f\x64\xf9\x3f\x2e\xe8\xee\x24\xfd\xfb\xba\xba\x7d\x5b\x72\x5b\x96\x60\x7b\x57\x52\xb4\xa9\xee\xb1\x68\x53\x14\xfe\xf8\xf0\x44\x9b\x6b\x39\x39\x79\x7e\xfb\xd1\x83\x9b\x86\xd1\x8a\x8e\x88\x3f\x7f\x8b\xea\x22\xe8\x5e\x79\xf7\x28\x77\x21\xbf\x8b\x72\xc2\xbe\x0e\x3d\x6f\xa5\x3e\xb8\x2a\x48\x04\x73\x5b\xc1\xd2\x91\xef\xb4\x74\x4c\x68\xbd\x31\xba\x0b\xa3\xe8\xc1\x6f\x3d\x59\x17\xf5\xf1\xb2\x0f\x84\x4d\x01\xd9\x29\x82\xab\xd4\xe0\x6e\x9d\xbc\xe9\xe0\xfd\xbc\x6d\xbe\x5c\xee\x34\xe5\x7e\x43\xfe\x4e\x33\x5c\x2e\xe7\x1a\x51\x1d\x3b\xfa\xbe\x46\xb5\x9a\xf4\x5e\x6a\xd1\xce\x16\xc1\x60\xa4\xa5\x60\xd7\x6e\xc6\x53\xf7\xe4\xbb\x80\xac\x6f\xca\xdb\x5f\x2b\xc4\x18\x91\x27\x29\xfa\x5b\x8a\x06\x5c\x82\x73\xf9\xf5\x5b\xbf\xe5\xbc\x7e\x42\x1c\x4a\x5c\x6f\x76\xb7\x25\x5f\xf4\xbe\xf2\x36\xe9\x01\x90\x37\x92\xa6\x2b\x84\x38\x2e\xdf\x4f\xcf\x7e\xba\x6e\x65\x46\x60\x40\xca\xf2\xc6\x79\x7e\xb8\x79\x2c\x1e\x8a\xbf\x02\x00\x00\xff\xff\x91\xc0\x73\xd3\x79\x0b\x00\x00")

func cocoonJobJsonBytes() ([]byte, error) {
	return bindataRead(
		_cocoonJobJson,
		"cocoon.job.json",
	)
}

func cocoonJobJson() (*asset, error) {
	bytes, err := cocoonJobJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cocoon.job.json", size: 2937, mode: os.FileMode(420), modTime: time.Unix(1487515961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bindata.go": bindataGo,
	"cocoon.job.json": cocoonJobJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"cocoon.job.json": &bintree{cocoonJobJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

